/* Minification failed. Returning unminified contents.
(2285,13-26): run-time error JS1300: Strict-mode does not allow assignment to undefined variables: printerServer
(2287,13-26): run-time error JS1300: Strict-mode does not allow assignment to undefined variables: printerServer
 */
/*!
 * @overview  SHA-256 implementation in JavaScript
 * @copyright Copyright (c) Chris Veness 2002-2014
 * @license   Licensed under MIT license
 *            See http://www.movable-type.co.uk/scripts/sha1.html
 */

//@formatter:off
"use strict";var Sha256={};Sha256.hash=function(t){t=t.utf8Encode();var r=[1116352408,1899447441,3049323471,3921009573,961987163,1508970993,2453635748,2870763221,3624381080,310598401,607225278,1426881987,1925078388,2162078206,2614888103,3248222580,3835390401,4022224774,264347078,604807628,770255983,1249150122,1555081692,1996064986,2554220882,2821834349,2952996808,3210313671,3336571891,3584528711,113926993,338241895,666307205,773529912,1294757372,1396182291,1695183700,1986661051,2177026350,2456956037,2730485921,2820302411,3259730800,3345764771,3516065817,3600352804,4094571909,275423344,430227734,506948616,659060556,883997877,958139571,1322822218,1537002063,1747873779,1955562222,2024104815,2227730452,2361852424,2428436474,2756734187,3204031479,3329325298],e=[1779033703,3144134277,1013904242,2773480762,1359893119,2600822924,528734635,1541459225];t+=String.fromCharCode(128);for(var n=t.length/4+2,o=Math.ceil(n/16),a=new Array(o),h=0;o>h;h++){a[h]=new Array(16);for(var S=0;16>S;S++)a[h][S]=t.charCodeAt(64*h+4*S)<<24|t.charCodeAt(64*h+4*S+1)<<16|t.charCodeAt(64*h+4*S+2)<<8|t.charCodeAt(64*h+4*S+3)}a[o-1][14]=8*(t.length-1)/Math.pow(2,32),a[o-1][14]=Math.floor(a[o-1][14]),a[o-1][15]=8*(t.length-1)&4294967295;for(var u,f,c,i,d,R,p,y,x=new Array(64),h=0;o>h;h++){for(var O=0;16>O;O++)x[O]=a[h][O];for(var O=16;64>O;O++)x[O]=Sha256.σ1(x[O-2])+x[O-7]+Sha256.σ0(x[O-15])+x[O-16]&4294967295;u=e[0],f=e[1],c=e[2],i=e[3],d=e[4],R=e[5],p=e[6],y=e[7];for(var O=0;64>O;O++){var T=y+Sha256.Σ1(d)+Sha256.Ch(d,R,p)+r[O]+x[O],s=Sha256.Σ0(u)+Sha256.Maj(u,f,c);y=p,p=R,R=d,d=i+T&4294967295,i=c,c=f,f=u,u=T+s&4294967295}e[0]=e[0]+u&4294967295,e[1]=e[1]+f&4294967295,e[2]=e[2]+c&4294967295,e[3]=e[3]+i&4294967295,e[4]=e[4]+d&4294967295,e[5]=e[5]+R&4294967295,e[6]=e[6]+p&4294967295,e[7]=e[7]+y&4294967295}return Sha256.toHexStr(e[0])+Sha256.toHexStr(e[1])+Sha256.toHexStr(e[2])+Sha256.toHexStr(e[3])+Sha256.toHexStr(e[4])+Sha256.toHexStr(e[5])+Sha256.toHexStr(e[6])+Sha256.toHexStr(e[7])},Sha256.ROTR=function(t,r){return r>>>t|r<<32-t},Sha256.Σ0=function(t){return Sha256.ROTR(2,t)^Sha256.ROTR(13,t)^Sha256.ROTR(22,t)},Sha256.Σ1=function(t){return Sha256.ROTR(6,t)^Sha256.ROTR(11,t)^Sha256.ROTR(25,t)},Sha256.σ0=function(t){return Sha256.ROTR(7,t)^Sha256.ROTR(18,t)^t>>>3},Sha256.σ1=function(t){return Sha256.ROTR(17,t)^Sha256.ROTR(19,t)^t>>>10},Sha256.Ch=function(t,r,e){return t&r^~t&e},Sha256.Maj=function(t,r,e){return t&r^t&e^r&e},Sha256.toHexStr=function(t){for(var r,e="",n=7;n>=0;n--)r=t>>>4*n&15,e+=r.toString(16);return e},"undefined"==typeof String.prototype.utf8Encode&&(String.prototype.utf8Encode=function(){return unescape(encodeURIComponent(this))}),"undefined"==typeof String.prototype.utf8Decode&&(String.prototype.utf8Decode=function(){try{return decodeURIComponent(escape(this))}catch(t){return this}}),"undefined"!=typeof module&&module.exports&&(module.exports=Sha256),"function"==typeof define&&define.amd&&define([],function(){return Sha256});
;
/*!
 * @overview  RSVP - a tiny implementation of Promises/A+.
 * @copyright Copyright (c) 2014 Yehuda Katz, Tom Dale, Stefan Penner and contributors
 * @license   Licensed under MIT license
 *            See https://raw.githubusercontent.com/tildeio/rsvp.js/master/LICENSE
 * @version   3.1.0
 */

//@formatter:off
(function(){"use strict";function lib$rsvp$utils$$objectOrFunction(x){return typeof x==="function"||typeof x==="object"&&x!==null}function lib$rsvp$utils$$isFunction(x){return typeof x==="function"}function lib$rsvp$utils$$isMaybeThenable(x){return typeof x==="object"&&x!==null}var lib$rsvp$utils$$_isArray;if(!Array.isArray){lib$rsvp$utils$$_isArray=function(x){return Object.prototype.toString.call(x)==="[object Array]"}}else{lib$rsvp$utils$$_isArray=Array.isArray}var lib$rsvp$utils$$isArray=lib$rsvp$utils$$_isArray;var lib$rsvp$utils$$now=Date.now||function(){return(new Date).getTime()};function lib$rsvp$utils$$F(){}var lib$rsvp$utils$$o_create=Object.create||function(o){if(arguments.length>1){throw new Error("Second argument not supported")}if(typeof o!=="object"){throw new TypeError("Argument must be an object")}lib$rsvp$utils$$F.prototype=o;return new lib$rsvp$utils$$F};function lib$rsvp$events$$indexOf(callbacks,callback){for(var i=0,l=callbacks.length;i<l;i++){if(callbacks[i]===callback){return i}}return-1}function lib$rsvp$events$$callbacksFor(object){var callbacks=object._promiseCallbacks;if(!callbacks){callbacks=object._promiseCallbacks={}}return callbacks}var lib$rsvp$events$$default={mixin:function(object){object["on"]=this["on"];object["off"]=this["off"];object["trigger"]=this["trigger"];object._promiseCallbacks=undefined;return object},on:function(eventName,callback){if(typeof callback!=="function"){throw new TypeError("Callback must be a function")}var allCallbacks=lib$rsvp$events$$callbacksFor(this),callbacks;callbacks=allCallbacks[eventName];if(!callbacks){callbacks=allCallbacks[eventName]=[]}if(lib$rsvp$events$$indexOf(callbacks,callback)===-1){callbacks.push(callback)}},off:function(eventName,callback){var allCallbacks=lib$rsvp$events$$callbacksFor(this),callbacks,index;if(!callback){allCallbacks[eventName]=[];return}callbacks=allCallbacks[eventName];index=lib$rsvp$events$$indexOf(callbacks,callback);if(index!==-1){callbacks.splice(index,1)}},trigger:function(eventName,options,label){var allCallbacks=lib$rsvp$events$$callbacksFor(this),callbacks,callback;if(callbacks=allCallbacks[eventName]){for(var i=0;i<callbacks.length;i++){callback=callbacks[i];callback(options,label)}}}};var lib$rsvp$config$$config={instrument:false};lib$rsvp$events$$default["mixin"](lib$rsvp$config$$config);function lib$rsvp$config$$configure(name,value){if(name==="onerror"){lib$rsvp$config$$config["on"]("error",value);return}if(arguments.length===2){lib$rsvp$config$$config[name]=value}else{return lib$rsvp$config$$config[name]}}var lib$rsvp$instrument$$queue=[];function lib$rsvp$instrument$$scheduleFlush(){setTimeout(function(){var entry;for(var i=0;i<lib$rsvp$instrument$$queue.length;i++){entry=lib$rsvp$instrument$$queue[i];var payload=entry.payload;payload.guid=payload.key+payload.id;payload.childGuid=payload.key+payload.childId;if(payload.error){payload.stack=payload.error.stack}lib$rsvp$config$$config["trigger"](entry.name,entry.payload)}lib$rsvp$instrument$$queue.length=0},50)}function lib$rsvp$instrument$$instrument(eventName,promise,child){if(1===lib$rsvp$instrument$$queue.push({name:eventName,payload:{key:promise._guidKey,id:promise._id,eventName:eventName,detail:promise._result,childId:child&&child._id,label:promise._label,timeStamp:lib$rsvp$utils$$now(),error:lib$rsvp$config$$config["instrument-with-stack"]?new Error(promise._label):null}})){lib$rsvp$instrument$$scheduleFlush()}}var lib$rsvp$instrument$$default=lib$rsvp$instrument$$instrument;function lib$rsvp$$internal$$withOwnPromise(){return new TypeError("A promises callback cannot return that same promise.")}function lib$rsvp$$internal$$noop(){}var lib$rsvp$$internal$$PENDING=void 0;var lib$rsvp$$internal$$FULFILLED=1;var lib$rsvp$$internal$$REJECTED=2;var lib$rsvp$$internal$$GET_THEN_ERROR=new lib$rsvp$$internal$$ErrorObject;function lib$rsvp$$internal$$getThen(promise){try{return promise.then}catch(error){lib$rsvp$$internal$$GET_THEN_ERROR.error=error;return lib$rsvp$$internal$$GET_THEN_ERROR}}function lib$rsvp$$internal$$tryThen(then,value,fulfillmentHandler,rejectionHandler){try{then.call(value,fulfillmentHandler,rejectionHandler)}catch(e){return e}}function lib$rsvp$$internal$$handleForeignThenable(promise,thenable,then){lib$rsvp$config$$config.async(function(promise){var sealed=false;var error=lib$rsvp$$internal$$tryThen(then,thenable,function(value){if(sealed){return}sealed=true;if(thenable!==value){lib$rsvp$$internal$$resolve(promise,value)}else{lib$rsvp$$internal$$fulfill(promise,value)}},function(reason){if(sealed){return}sealed=true;lib$rsvp$$internal$$reject(promise,reason)},"Settle: "+(promise._label||" unknown promise"));if(!sealed&&error){sealed=true;lib$rsvp$$internal$$reject(promise,error)}},promise)}function lib$rsvp$$internal$$handleOwnThenable(promise,thenable){if(thenable._state===lib$rsvp$$internal$$FULFILLED){lib$rsvp$$internal$$fulfill(promise,thenable._result)}else if(thenable._state===lib$rsvp$$internal$$REJECTED){thenable._onError=null;lib$rsvp$$internal$$reject(promise,thenable._result)}else{lib$rsvp$$internal$$subscribe(thenable,undefined,function(value){if(thenable!==value){lib$rsvp$$internal$$resolve(promise,value)}else{lib$rsvp$$internal$$fulfill(promise,value)}},function(reason){lib$rsvp$$internal$$reject(promise,reason)})}}function lib$rsvp$$internal$$handleMaybeThenable(promise,maybeThenable){if(maybeThenable.constructor===promise.constructor){lib$rsvp$$internal$$handleOwnThenable(promise,maybeThenable)}else{var then=lib$rsvp$$internal$$getThen(maybeThenable);if(then===lib$rsvp$$internal$$GET_THEN_ERROR){lib$rsvp$$internal$$reject(promise,lib$rsvp$$internal$$GET_THEN_ERROR.error)}else if(then===undefined){lib$rsvp$$internal$$fulfill(promise,maybeThenable)}else if(lib$rsvp$utils$$isFunction(then)){lib$rsvp$$internal$$handleForeignThenable(promise,maybeThenable,then)}else{lib$rsvp$$internal$$fulfill(promise,maybeThenable)}}}function lib$rsvp$$internal$$resolve(promise,value){if(promise===value){lib$rsvp$$internal$$fulfill(promise,value)}else if(lib$rsvp$utils$$objectOrFunction(value)){lib$rsvp$$internal$$handleMaybeThenable(promise,value)}else{lib$rsvp$$internal$$fulfill(promise,value)}}function lib$rsvp$$internal$$publishRejection(promise){if(promise._onError){promise._onError(promise._result)}lib$rsvp$$internal$$publish(promise)}function lib$rsvp$$internal$$fulfill(promise,value){if(promise._state!==lib$rsvp$$internal$$PENDING){return}promise._result=value;promise._state=lib$rsvp$$internal$$FULFILLED;if(promise._subscribers.length===0){if(lib$rsvp$config$$config.instrument){lib$rsvp$instrument$$default("fulfilled",promise)}}else{lib$rsvp$config$$config.async(lib$rsvp$$internal$$publish,promise)}}function lib$rsvp$$internal$$reject(promise,reason){if(promise._state!==lib$rsvp$$internal$$PENDING){return}promise._state=lib$rsvp$$internal$$REJECTED;promise._result=reason;lib$rsvp$config$$config.async(lib$rsvp$$internal$$publishRejection,promise)}function lib$rsvp$$internal$$subscribe(parent,child,onFulfillment,onRejection){var subscribers=parent._subscribers;var length=subscribers.length;parent._onError=null;subscribers[length]=child;subscribers[length+lib$rsvp$$internal$$FULFILLED]=onFulfillment;subscribers[length+lib$rsvp$$internal$$REJECTED]=onRejection;if(length===0&&parent._state){lib$rsvp$config$$config.async(lib$rsvp$$internal$$publish,parent)}}function lib$rsvp$$internal$$publish(promise){var subscribers=promise._subscribers;var settled=promise._state;if(lib$rsvp$config$$config.instrument){lib$rsvp$instrument$$default(settled===lib$rsvp$$internal$$FULFILLED?"fulfilled":"rejected",promise)}if(subscribers.length===0){return}var child,callback,detail=promise._result;for(var i=0;i<subscribers.length;i+=3){child=subscribers[i];callback=subscribers[i+settled];if(child){lib$rsvp$$internal$$invokeCallback(settled,child,callback,detail)}else{callback(detail)}}promise._subscribers.length=0}function lib$rsvp$$internal$$ErrorObject(){this.error=null}var lib$rsvp$$internal$$TRY_CATCH_ERROR=new lib$rsvp$$internal$$ErrorObject;function lib$rsvp$$internal$$tryCatch(callback,detail){try{return callback(detail)}catch(e){lib$rsvp$$internal$$TRY_CATCH_ERROR.error=e;return lib$rsvp$$internal$$TRY_CATCH_ERROR}}function lib$rsvp$$internal$$invokeCallback(settled,promise,callback,detail){var hasCallback=lib$rsvp$utils$$isFunction(callback),value,error,succeeded,failed;if(hasCallback){value=lib$rsvp$$internal$$tryCatch(callback,detail);if(value===lib$rsvp$$internal$$TRY_CATCH_ERROR){failed=true;error=value.error;value=null}else{succeeded=true}if(promise===value){lib$rsvp$$internal$$reject(promise,lib$rsvp$$internal$$withOwnPromise());return}}else{value=detail;succeeded=true}if(promise._state!==lib$rsvp$$internal$$PENDING){}else if(hasCallback&&succeeded){lib$rsvp$$internal$$resolve(promise,value)}else if(failed){lib$rsvp$$internal$$reject(promise,error)}else if(settled===lib$rsvp$$internal$$FULFILLED){lib$rsvp$$internal$$fulfill(promise,value)}else if(settled===lib$rsvp$$internal$$REJECTED){lib$rsvp$$internal$$reject(promise,value)}}function lib$rsvp$$internal$$initializePromise(promise,resolver){var resolved=false;try{resolver(function resolvePromise(value){if(resolved){return}resolved=true;lib$rsvp$$internal$$resolve(promise,value)},function rejectPromise(reason){if(resolved){return}resolved=true;lib$rsvp$$internal$$reject(promise,reason)})}catch(e){lib$rsvp$$internal$$reject(promise,e)}}function lib$rsvp$enumerator$$makeSettledResult(state,position,value){if(state===lib$rsvp$$internal$$FULFILLED){return{state:"fulfilled",value:value}}else{return{state:"rejected",reason:value}}}function lib$rsvp$enumerator$$Enumerator(Constructor,input,abortOnReject,label){var enumerator=this;enumerator._instanceConstructor=Constructor;enumerator.promise=new Constructor(lib$rsvp$$internal$$noop,label);enumerator._abortOnReject=abortOnReject;if(enumerator._validateInput(input)){enumerator._input=input;enumerator.length=input.length;enumerator._remaining=input.length;enumerator._init();if(enumerator.length===0){lib$rsvp$$internal$$fulfill(enumerator.promise,enumerator._result)}else{enumerator.length=enumerator.length||0;enumerator._enumerate();if(enumerator._remaining===0){lib$rsvp$$internal$$fulfill(enumerator.promise,enumerator._result)}}}else{lib$rsvp$$internal$$reject(enumerator.promise,enumerator._validationError())}}var lib$rsvp$enumerator$$default=lib$rsvp$enumerator$$Enumerator;lib$rsvp$enumerator$$Enumerator.prototype._validateInput=function(input){return lib$rsvp$utils$$isArray(input)};lib$rsvp$enumerator$$Enumerator.prototype._validationError=function(){return new Error("Array Methods must be provided an Array")};lib$rsvp$enumerator$$Enumerator.prototype._init=function(){this._result=new Array(this.length)};lib$rsvp$enumerator$$Enumerator.prototype._enumerate=function(){var enumerator=this;var length=enumerator.length;var promise=enumerator.promise;var input=enumerator._input;for(var i=0;promise._state===lib$rsvp$$internal$$PENDING&&i<length;i++){enumerator._eachEntry(input[i],i)}};lib$rsvp$enumerator$$Enumerator.prototype._eachEntry=function(entry,i){var enumerator=this;var c=enumerator._instanceConstructor;if(lib$rsvp$utils$$isMaybeThenable(entry)){if(entry.constructor===c&&entry._state!==lib$rsvp$$internal$$PENDING){entry._onError=null;enumerator._settledAt(entry._state,i,entry._result)}else{enumerator._willSettleAt(c.resolve(entry),i)}}else{enumerator._remaining--;enumerator._result[i]=enumerator._makeResult(lib$rsvp$$internal$$FULFILLED,i,entry)}};lib$rsvp$enumerator$$Enumerator.prototype._settledAt=function(state,i,value){var enumerator=this;var promise=enumerator.promise;if(promise._state===lib$rsvp$$internal$$PENDING){enumerator._remaining--;if(enumerator._abortOnReject&&state===lib$rsvp$$internal$$REJECTED){lib$rsvp$$internal$$reject(promise,value)}else{enumerator._result[i]=enumerator._makeResult(state,i,value)}}if(enumerator._remaining===0){lib$rsvp$$internal$$fulfill(promise,enumerator._result)}};lib$rsvp$enumerator$$Enumerator.prototype._makeResult=function(state,i,value){return value};lib$rsvp$enumerator$$Enumerator.prototype._willSettleAt=function(promise,i){var enumerator=this;lib$rsvp$$internal$$subscribe(promise,undefined,function(value){enumerator._settledAt(lib$rsvp$$internal$$FULFILLED,i,value)},function(reason){enumerator._settledAt(lib$rsvp$$internal$$REJECTED,i,reason)})};function lib$rsvp$promise$all$$all(entries,label){return new lib$rsvp$enumerator$$default(this,entries,true,label).promise}var lib$rsvp$promise$all$$default=lib$rsvp$promise$all$$all;function lib$rsvp$promise$race$$race(entries,label){var Constructor=this;var promise=new Constructor(lib$rsvp$$internal$$noop,label);if(!lib$rsvp$utils$$isArray(entries)){lib$rsvp$$internal$$reject(promise,new TypeError("You must pass an array to race."));return promise}var length=entries.length;function onFulfillment(value){lib$rsvp$$internal$$resolve(promise,value)}function onRejection(reason){lib$rsvp$$internal$$reject(promise,reason)}for(var i=0;promise._state===lib$rsvp$$internal$$PENDING&&i<length;i++){lib$rsvp$$internal$$subscribe(Constructor.resolve(entries[i]),undefined,onFulfillment,onRejection)}return promise}var lib$rsvp$promise$race$$default=lib$rsvp$promise$race$$race;function lib$rsvp$promise$resolve$$resolve(object,label){var Constructor=this;if(object&&typeof object==="object"&&object.constructor===Constructor){return object}var promise=new Constructor(lib$rsvp$$internal$$noop,label);lib$rsvp$$internal$$resolve(promise,object);return promise}var lib$rsvp$promise$resolve$$default=lib$rsvp$promise$resolve$$resolve;function lib$rsvp$promise$reject$$reject(reason,label){var Constructor=this;var promise=new Constructor(lib$rsvp$$internal$$noop,label);lib$rsvp$$internal$$reject(promise,reason);return promise}var lib$rsvp$promise$reject$$default=lib$rsvp$promise$reject$$reject;var lib$rsvp$promise$$guidKey="rsvp_"+lib$rsvp$utils$$now()+"-";var lib$rsvp$promise$$counter=0;function lib$rsvp$promise$$needsResolver(){throw new TypeError("You must pass a resolver function as the first argument to the promise constructor")}function lib$rsvp$promise$$needsNew(){throw new TypeError("Failed to construct 'Promise': Please use the 'new' operator, this object constructor cannot be called as a function.")}function lib$rsvp$promise$$Promise(resolver,label){var promise=this;promise._id=lib$rsvp$promise$$counter++;promise._label=label;promise._state=undefined;promise._result=undefined;promise._subscribers=[];if(lib$rsvp$config$$config.instrument){lib$rsvp$instrument$$default("created",promise)}if(lib$rsvp$$internal$$noop!==resolver){if(!lib$rsvp$utils$$isFunction(resolver)){lib$rsvp$promise$$needsResolver()}if(!(promise instanceof lib$rsvp$promise$$Promise)){lib$rsvp$promise$$needsNew()}lib$rsvp$$internal$$initializePromise(promise,resolver)}}var lib$rsvp$promise$$default=lib$rsvp$promise$$Promise;lib$rsvp$promise$$Promise.cast=lib$rsvp$promise$resolve$$default;lib$rsvp$promise$$Promise.all=lib$rsvp$promise$all$$default;lib$rsvp$promise$$Promise.race=lib$rsvp$promise$race$$default;lib$rsvp$promise$$Promise.resolve=lib$rsvp$promise$resolve$$default;lib$rsvp$promise$$Promise.reject=lib$rsvp$promise$reject$$default;lib$rsvp$promise$$Promise.prototype={constructor:lib$rsvp$promise$$Promise,_guidKey:lib$rsvp$promise$$guidKey,_onError:function(reason){var promise=this;lib$rsvp$config$$config.after(function(){if(promise._onError){lib$rsvp$config$$config["trigger"]("error",reason,promise._label)}})},then:function(onFulfillment,onRejection,label){var parent=this;var state=parent._state;if(state===lib$rsvp$$internal$$FULFILLED&&!onFulfillment||state===lib$rsvp$$internal$$REJECTED&&!onRejection){if(lib$rsvp$config$$config.instrument){lib$rsvp$instrument$$default("chained",parent,parent)}return parent}parent._onError=null;var child=new parent.constructor(lib$rsvp$$internal$$noop,label);var result=parent._result;if(lib$rsvp$config$$config.instrument){lib$rsvp$instrument$$default("chained",parent,child)}if(state){var callback=arguments[state-1];lib$rsvp$config$$config.async(function(){lib$rsvp$$internal$$invokeCallback(state,child,callback,result)})}else{lib$rsvp$$internal$$subscribe(parent,child,onFulfillment,onRejection)}return child},"catch":function(onRejection,label){return this.then(undefined,onRejection,label)},"finally":function(callback,label){var promise=this;var constructor=promise.constructor;return promise.then(function(value){return constructor.resolve(callback()).then(function(){return value})},function(reason){return constructor.resolve(callback()).then(function(){throw reason})},label)}};function lib$rsvp$all$settled$$AllSettled(Constructor,entries,label){this._superConstructor(Constructor,entries,false,label)}lib$rsvp$all$settled$$AllSettled.prototype=lib$rsvp$utils$$o_create(lib$rsvp$enumerator$$default.prototype);lib$rsvp$all$settled$$AllSettled.prototype._superConstructor=lib$rsvp$enumerator$$default;lib$rsvp$all$settled$$AllSettled.prototype._makeResult=lib$rsvp$enumerator$$makeSettledResult;lib$rsvp$all$settled$$AllSettled.prototype._validationError=function(){return new Error("allSettled must be called with an array")};function lib$rsvp$all$settled$$allSettled(entries,label){return new lib$rsvp$all$settled$$AllSettled(lib$rsvp$promise$$default,entries,label).promise}var lib$rsvp$all$settled$$default=lib$rsvp$all$settled$$allSettled;function lib$rsvp$all$$all(array,label){return lib$rsvp$promise$$default.all(array,label)}var lib$rsvp$all$$default=lib$rsvp$all$$all;var lib$rsvp$asap$$len=0;var lib$rsvp$asap$$toString={}.toString;var lib$rsvp$asap$$vertxNext;function lib$rsvp$asap$$asap(callback,arg){lib$rsvp$asap$$queue[lib$rsvp$asap$$len]=callback;lib$rsvp$asap$$queue[lib$rsvp$asap$$len+1]=arg;lib$rsvp$asap$$len+=2;if(lib$rsvp$asap$$len===2){lib$rsvp$asap$$scheduleFlush()}}var lib$rsvp$asap$$default=lib$rsvp$asap$$asap;var lib$rsvp$asap$$browserWindow=typeof window!=="undefined"?window:undefined;var lib$rsvp$asap$$browserGlobal=lib$rsvp$asap$$browserWindow||{};var lib$rsvp$asap$$BrowserMutationObserver=lib$rsvp$asap$$browserGlobal.MutationObserver||lib$rsvp$asap$$browserGlobal.WebKitMutationObserver;var lib$rsvp$asap$$isNode=typeof self==="undefined"&&typeof process!=="undefined"&&{}.toString.call(process)==="[object process]";var lib$rsvp$asap$$isWorker=typeof Uint8ClampedArray!=="undefined"&&typeof importScripts!=="undefined"&&typeof MessageChannel!=="undefined";function lib$rsvp$asap$$useNextTick(){var nextTick=process.nextTick;var version=process.versions.node.match(/^(?:(\d+)\.)?(?:(\d+)\.)?(\*|\d+)$/);if(Array.isArray(version)&&version[1]==="0"&&version[2]==="10"){nextTick=setImmediate}return function(){nextTick(lib$rsvp$asap$$flush)}}function lib$rsvp$asap$$useVertxTimer(){return function(){lib$rsvp$asap$$vertxNext(lib$rsvp$asap$$flush)}}function lib$rsvp$asap$$useMutationObserver(){var iterations=0;var observer=new lib$rsvp$asap$$BrowserMutationObserver(lib$rsvp$asap$$flush);var node=document.createTextNode("");observer.observe(node,{characterData:true});return function(){node.data=iterations=++iterations%2}}function lib$rsvp$asap$$useMessageChannel(){var channel=new MessageChannel;channel.port1.onmessage=lib$rsvp$asap$$flush;return function(){channel.port2.postMessage(0)}}function lib$rsvp$asap$$useSetTimeout(){return function(){setTimeout(lib$rsvp$asap$$flush,1)}}var lib$rsvp$asap$$queue=new Array(1e3);function lib$rsvp$asap$$flush(){for(var i=0;i<lib$rsvp$asap$$len;i+=2){var callback=lib$rsvp$asap$$queue[i];var arg=lib$rsvp$asap$$queue[i+1];callback(arg);lib$rsvp$asap$$queue[i]=undefined;lib$rsvp$asap$$queue[i+1]=undefined}lib$rsvp$asap$$len=0}function lib$rsvp$asap$$attemptVertex(){try{var r=require;var vertx=r("vertx");lib$rsvp$asap$$vertxNext=vertx.runOnLoop||vertx.runOnContext;return lib$rsvp$asap$$useVertxTimer()}catch(e){return lib$rsvp$asap$$useSetTimeout()}}var lib$rsvp$asap$$scheduleFlush;if(lib$rsvp$asap$$isNode){lib$rsvp$asap$$scheduleFlush=lib$rsvp$asap$$useNextTick()}else if(lib$rsvp$asap$$BrowserMutationObserver){lib$rsvp$asap$$scheduleFlush=lib$rsvp$asap$$useMutationObserver()}else if(lib$rsvp$asap$$isWorker){lib$rsvp$asap$$scheduleFlush=lib$rsvp$asap$$useMessageChannel()}else if(lib$rsvp$asap$$browserWindow===undefined&&typeof require==="function"){lib$rsvp$asap$$scheduleFlush=lib$rsvp$asap$$attemptVertex()}else{lib$rsvp$asap$$scheduleFlush=lib$rsvp$asap$$useSetTimeout()}function lib$rsvp$defer$$defer(label){var deferred={};deferred["promise"]=new lib$rsvp$promise$$default(function(resolve,reject){deferred["resolve"]=resolve;deferred["reject"]=reject},label);return deferred}var lib$rsvp$defer$$default=lib$rsvp$defer$$defer;function lib$rsvp$filter$$filter(promises,filterFn,label){return lib$rsvp$promise$$default.all(promises,label).then(function(values){if(!lib$rsvp$utils$$isFunction(filterFn)){throw new TypeError("You must pass a function as filter's second argument.")}var length=values.length;var filtered=new Array(length);for(var i=0;i<length;i++){filtered[i]=filterFn(values[i])}return lib$rsvp$promise$$default.all(filtered,label).then(function(filtered){var results=new Array(length);var newLength=0;for(var i=0;i<length;i++){if(filtered[i]){results[newLength]=values[i];newLength++}}results.length=newLength;return results})})}var lib$rsvp$filter$$default=lib$rsvp$filter$$filter;function lib$rsvp$promise$hash$$PromiseHash(Constructor,object,label){this._superConstructor(Constructor,object,true,label)}var lib$rsvp$promise$hash$$default=lib$rsvp$promise$hash$$PromiseHash;lib$rsvp$promise$hash$$PromiseHash.prototype=lib$rsvp$utils$$o_create(lib$rsvp$enumerator$$default.prototype);lib$rsvp$promise$hash$$PromiseHash.prototype._superConstructor=lib$rsvp$enumerator$$default;lib$rsvp$promise$hash$$PromiseHash.prototype._init=function(){this._result={}};lib$rsvp$promise$hash$$PromiseHash.prototype._validateInput=function(input){return input&&typeof input==="object"};lib$rsvp$promise$hash$$PromiseHash.prototype._validationError=function(){return new Error("Promise.hash must be called with an object")};lib$rsvp$promise$hash$$PromiseHash.prototype._enumerate=function(){var enumerator=this;var promise=enumerator.promise;var input=enumerator._input;var results=[];for(var key in input){if(promise._state===lib$rsvp$$internal$$PENDING&&Object.prototype.hasOwnProperty.call(input,key)){results.push({position:key,entry:input[key]})}}var length=results.length;enumerator._remaining=length;var result;for(var i=0;promise._state===lib$rsvp$$internal$$PENDING&&i<length;i++){result=results[i];enumerator._eachEntry(result.entry,result.position)}};function lib$rsvp$hash$settled$$HashSettled(Constructor,object,label){this._superConstructor(Constructor,object,false,label)}lib$rsvp$hash$settled$$HashSettled.prototype=lib$rsvp$utils$$o_create(lib$rsvp$promise$hash$$default.prototype);lib$rsvp$hash$settled$$HashSettled.prototype._superConstructor=lib$rsvp$enumerator$$default;lib$rsvp$hash$settled$$HashSettled.prototype._makeResult=lib$rsvp$enumerator$$makeSettledResult;lib$rsvp$hash$settled$$HashSettled.prototype._validationError=function(){return new Error("hashSettled must be called with an object")};function lib$rsvp$hash$settled$$hashSettled(object,label){return new lib$rsvp$hash$settled$$HashSettled(lib$rsvp$promise$$default,object,label).promise}var lib$rsvp$hash$settled$$default=lib$rsvp$hash$settled$$hashSettled;function lib$rsvp$hash$$hash(object,label){return new lib$rsvp$promise$hash$$default(lib$rsvp$promise$$default,object,label).promise}var lib$rsvp$hash$$default=lib$rsvp$hash$$hash;function lib$rsvp$map$$map(promises,mapFn,label){return lib$rsvp$promise$$default.all(promises,label).then(function(values){if(!lib$rsvp$utils$$isFunction(mapFn)){throw new TypeError("You must pass a function as map's second argument.")}var length=values.length;var results=new Array(length);for(var i=0;i<length;i++){results[i]=mapFn(values[i])}return lib$rsvp$promise$$default.all(results,label)})}var lib$rsvp$map$$default=lib$rsvp$map$$map;function lib$rsvp$node$$Result(){this.value=undefined}var lib$rsvp$node$$ERROR=new lib$rsvp$node$$Result;var lib$rsvp$node$$GET_THEN_ERROR=new lib$rsvp$node$$Result;function lib$rsvp$node$$getThen(obj){try{return obj.then}catch(error){lib$rsvp$node$$ERROR.value=error;return lib$rsvp$node$$ERROR}}function lib$rsvp$node$$tryApply(f,s,a){try{f.apply(s,a)}catch(error){lib$rsvp$node$$ERROR.value=error;return lib$rsvp$node$$ERROR}}function lib$rsvp$node$$makeObject(_,argumentNames){var obj={};var name;var i;var length=_.length;var args=new Array(length);for(var x=0;x<length;x++){args[x]=_[x]}for(i=0;i<argumentNames.length;i++){name=argumentNames[i];obj[name]=args[i+1]}return obj}function lib$rsvp$node$$arrayResult(_){var length=_.length;var args=new Array(length-1);for(var i=1;i<length;i++){args[i-1]=_[i]}return args}function lib$rsvp$node$$wrapThenable(then,promise){return{then:function(onFulFillment,onRejection){return then.call(promise,onFulFillment,onRejection)}}}function lib$rsvp$node$$denodeify(nodeFunc,options){var fn=function(){var self=this;var l=arguments.length;var args=new Array(l+1);var arg;var promiseInput=false;for(var i=0;i<l;++i){arg=arguments[i];if(!promiseInput){promiseInput=lib$rsvp$node$$needsPromiseInput(arg);if(promiseInput===lib$rsvp$node$$GET_THEN_ERROR){var p=new lib$rsvp$promise$$default(lib$rsvp$$internal$$noop);lib$rsvp$$internal$$reject(p,lib$rsvp$node$$GET_THEN_ERROR.value);return p}else if(promiseInput&&promiseInput!==true){arg=lib$rsvp$node$$wrapThenable(promiseInput,arg)}}args[i]=arg}var promise=new lib$rsvp$promise$$default(lib$rsvp$$internal$$noop);args[l]=function(err,val){if(err)lib$rsvp$$internal$$reject(promise,err);else if(options===undefined)lib$rsvp$$internal$$resolve(promise,val);else if(options===true)lib$rsvp$$internal$$resolve(promise,lib$rsvp$node$$arrayResult(arguments));else if(lib$rsvp$utils$$isArray(options))lib$rsvp$$internal$$resolve(promise,lib$rsvp$node$$makeObject(arguments,options));else lib$rsvp$$internal$$resolve(promise,val)};if(promiseInput){return lib$rsvp$node$$handlePromiseInput(promise,args,nodeFunc,self)}else{return lib$rsvp$node$$handleValueInput(promise,args,nodeFunc,self)}};fn.__proto__=nodeFunc;return fn}var lib$rsvp$node$$default=lib$rsvp$node$$denodeify;function lib$rsvp$node$$handleValueInput(promise,args,nodeFunc,self){var result=lib$rsvp$node$$tryApply(nodeFunc,self,args);if(result===lib$rsvp$node$$ERROR){lib$rsvp$$internal$$reject(promise,result.value)}return promise}function lib$rsvp$node$$handlePromiseInput(promise,args,nodeFunc,self){return lib$rsvp$promise$$default.all(args).then(function(args){var result=lib$rsvp$node$$tryApply(nodeFunc,self,args);if(result===lib$rsvp$node$$ERROR){lib$rsvp$$internal$$reject(promise,result.value)}return promise})}function lib$rsvp$node$$needsPromiseInput(arg){if(arg&&typeof arg==="object"){if(arg.constructor===lib$rsvp$promise$$default){return true}else{return lib$rsvp$node$$getThen(arg)}}else{return false}}var lib$rsvp$platform$$platform;if(typeof self==="object"){lib$rsvp$platform$$platform=self}else if(typeof global==="object"){lib$rsvp$platform$$platform=global}else{throw new Error("no global: `self` or `global` found")}var lib$rsvp$platform$$default=lib$rsvp$platform$$platform;function lib$rsvp$race$$race(array,label){return lib$rsvp$promise$$default.race(array,label)}var lib$rsvp$race$$default=lib$rsvp$race$$race;function lib$rsvp$reject$$reject(reason,label){return lib$rsvp$promise$$default.reject(reason,label)}var lib$rsvp$reject$$default=lib$rsvp$reject$$reject;function lib$rsvp$resolve$$resolve(value,label){return lib$rsvp$promise$$default.resolve(value,label)}var lib$rsvp$resolve$$default=lib$rsvp$resolve$$resolve;function lib$rsvp$rethrow$$rethrow(reason){setTimeout(function(){throw reason});throw reason}var lib$rsvp$rethrow$$default=lib$rsvp$rethrow$$rethrow;lib$rsvp$config$$config.async=lib$rsvp$asap$$default;lib$rsvp$config$$config.after=function(cb){setTimeout(cb,0)};var lib$rsvp$$cast=lib$rsvp$resolve$$default;function lib$rsvp$$async(callback,arg){lib$rsvp$config$$config.async(callback,arg)}function lib$rsvp$$on(){lib$rsvp$config$$config["on"].apply(lib$rsvp$config$$config,arguments)}function lib$rsvp$$off(){lib$rsvp$config$$config["off"].apply(lib$rsvp$config$$config,arguments)}if(typeof window!=="undefined"&&typeof window["__PROMISE_INSTRUMENTATION__"]==="object"){var lib$rsvp$$callbacks=window["__PROMISE_INSTRUMENTATION__"];lib$rsvp$config$$configure("instrument",true);for(var lib$rsvp$$eventName in lib$rsvp$$callbacks){if(lib$rsvp$$callbacks.hasOwnProperty(lib$rsvp$$eventName)){lib$rsvp$$on(lib$rsvp$$eventName,lib$rsvp$$callbacks[lib$rsvp$$eventName])}}}var lib$rsvp$umd$$RSVP={race:lib$rsvp$race$$default,Promise:lib$rsvp$promise$$default,allSettled:lib$rsvp$all$settled$$default,hash:lib$rsvp$hash$$default,hashSettled:lib$rsvp$hash$settled$$default,denodeify:lib$rsvp$node$$default,on:lib$rsvp$$on,off:lib$rsvp$$off,map:lib$rsvp$map$$default,filter:lib$rsvp$filter$$default,resolve:lib$rsvp$resolve$$default,reject:lib$rsvp$reject$$default,all:lib$rsvp$all$$default,rethrow:lib$rsvp$rethrow$$default,defer:lib$rsvp$defer$$default,EventTarget:lib$rsvp$events$$default,configure:lib$rsvp$config$$configure,async:lib$rsvp$$async};if(typeof define==="function"&&define["amd"]){define(function(){return lib$rsvp$umd$$RSVP})}else if(typeof module!=="undefined"&&module["exports"]){module["exports"]=lib$rsvp$umd$$RSVP}else if(typeof lib$rsvp$platform$$default!=="undefined"){lib$rsvp$platform$$default["RSVP"]=lib$rsvp$umd$$RSVP}}).call(this);
;
(function () {
    'use strict'
var posenum= angular.module('pos.enum', [])
.value('SmsType', 
{
		'1' : 'enum_SmsRandom',
				'2' : 'enum_SmsBrandName',
		})
.value('SmsTypeMap',
{
		'Random' : 1,
				'BrandName' : 2,
		})
.value('PricingState', 
{
		'0' : 'New',
				'1' : 'Trial',
				'2' : 'Cancel',
				'3' : 'Premium',
		})
.value('PricingStateMap',
{
		'New' : 0,
				'FreeTrial' : 1,
				'Cancel' : 2,
				'Premium' : 3,
		})
.value('AccountingTransactionType', 
{
		'1' : 'receiptVoucher',
				'2' : 'paymentVoucher',
		})
.value('AccountingTransactionTypeMap',
{
		'ReceiptVoucher' : 1,
				'PaymentVoucher' : 2,
		})
.value('OrderState', 
{
		'1' : 'enum_OnOrder',
				'2' : 'enum_Completed',
				'3' : 'enum_Void',
				'4' : 'enum_InTransit',
		})
.value('OrderStateMap',
{
		'OnOrder' : 1,
				'Completed' : 2,
				'Void' : 3,
				'InTransit' : 4,
		})
.value('DeliveryOrderState', 
{
		'0' : 'enum_InTransit',
				'1' : 'enum_Exception',
				'2' : 'enum_Completed',
				'3' : 'enum_Void',
		})
.value('DeliveryOrderStateMap',
{
		'InTransit' : 0,
				'Exception' : 1,
				'Completed' : 2,
				'Void' : 3,
		})
.value('TransferState', 
{
		'1' : 'enum_InProcess',
				'2' : 'enum_WaitingForConfirmation',
				'3' : 'enum_Completed',
				'4' : 'enum_Void',
		})
.value('TransferStateMap',
{
		'InProcess' : 1,
				'WaitingForConfirmation' : 2,
				'Completed' : 3,
				'Void' : 4,
		})
.value('ProductType', 
{
		'1' : 'enum_ProductType_Standard',
				'2' : 'enum_ProductType_Service',
				'3' : 'enum_ProductType_Composite',
		})
.value('ProductTypeMap',
{
		'Standard' : 1,
				'Service' : 2,
				'Composite' : 3,
		})
.value('TransactionType', 
{
		'1' : 'menu_Sell',
				'2' : 'menu_OrderStock',
				'3' : 'menu_Returns',
				'4' : 'menu_ReturnToSupplier',
				'5' : 'menu_InventoryCount',
				'6' : 'menu_InternalStockTransfer',
				'7' : 'enum_TransactionType_ProductDamage',
				'8' : 'menu_Manufacturing',
				'9' : 'enum_TransactionType_ReduceMaterial',
				'10' : 'receiptVoucher',
				'11' : 'paymentVoucher',
				'12' : 'enum_TransactionType_AdjustedDebt',
				'13' : 'enum_TransactionType_Recieve',
				'14' : 'enum_TransactionType_ReduceDirectMaterial',
				'15' : 'enum_TransactionType_ShippingCost',
				'16' : 'enum_TransactionType_Gift',
				'17' : 'enum_TransactionType_Self',
		})
.value('TransactionTypeMap',
{
		'Sell' : 1,
				'OrderStock' : 2,
				'Returns' : 3,
				'ReturnToSupplier' : 4,
				'InventoryCount' : 5,
				'InternalStockTransfer' : 6,
				'Damage' : 7,
				'Manufacturing' : 8,
				'ReduceMaterial' : 9,
				'ReceiptVoucher' : 10,
				'PaymentVoucher' : 11,
				'AdjustedDebt' : 12,
				'Recieve' : 13,
				'ReduceDirectMaterial' : 14,
				'ShippingCost' : 15,
				'Gift' : 16,
				'Self' : 17,
		})
.value('ListOfReason', 
{
		'7' : 'enum_TransactionType_ProductDamage',
				'16' : 'enum_TransactionType_Gift',
				'17' : 'enum_TransactionType_Self',
		})
.value('ListOfReasonMap',
{
		'Damage' : 7,
				'Gift' : 16,
				'Self' : 17,
		})
.value('DocumentState', 
{
		'1' : 'enum_InProcess',
				'2' : 'enum_Completed',
				'3' : 'enum_Void',
		})
.value('DocumentStateMap',
{
		'InProcess' : 1,
				'Completed' : 2,
				'Void' : 3,
		})
.value('Fields', 
{
		'0' : 'enum_Field_Other',
				'1' : 'enum_Field_Retail',
				'2' : 'enum_Field_Fashion',
				'3' : 'enum_Field_Coffee',
				'4' : 'enum_Field_Electronic',
				'5' : 'enum_Field_BuildingMaterials',
				'6' : 'enum_Field_Book',
				'7' : 'enum_Field_Drug',
				'8' : 'enum_Field_Cosmetics',
				'9' : 'enum_Field_Stationary',
				'10' : 'enum_Field_Interior',
		})
.value('PartnerType', 
{
		'1' : 'menu_Customers',
				'2' : 'menu_Suppliers',
				'3' : 'menu_ShippingPartners',
		})
.value('PartnerTypeMap',
{
		'Customer' : 1,
				'Supplier' : 2,
				'ShippingPartner' : 3,
		})
})();
;
'use strict'
/**************************************************************
 * Set of all REST client 
 **************************************************************/

/**
 * @description
 *  Augment resource with common query method
 * @param: {object} $resource 
 * @return: {object} common request service
 */
function common(resource) {
    resource.getModifiedSince = function (lastSync, params) {
        var query = { ModifiedDate: lastSync };
        $.extend(query, params);
        return resource.get(query);
    };
    return resource;
};

var services = [{
        name: 'ActivityResource', endpoint: 'activities'
    },{
        name: 'ChartResource', endpoint: 'chart/:action',
        otherActions: {
            getDashboard: { method: "GET", isArray: false, params: { action: 'dashboard' } },
            getCashFlow: { method: "GET", isArray: false, params: { action: 'cashflow' } },
            getToday: { method: "GET", isArray: false, params: { action: 'dashboard' } },
        }
    },
    {
        name: 'BarCodeResource', endpoint: 'barcode/:action',
        otherActions: {
            ImportItems: { method: "POST", isArray: true, params: { action: 'import' } },
        }

    },
    {
        name: 'CategoryResource', endpoint: 'categories/:categoryId/:action',
        otherActions: {
            getHierarchical: { method: "GET", isArray: true, params: { action: 'hierarchical' } },
            getFlatten: { method: "GET", isArray: true, params: { action: 'flatten' } },
        }
    }
    ,
    {
        name: 'RoomResource', endpoint: 'rooms/:roomId/:action',
    },
    {
        name: 'CustomerOrderingResource', endpoint: 'customerordering/:customerOrderingId/:action',
        otherActions: {
            approved: { method: "POST", isArray: false, params: { action: 'approved' } },
            activeroom: { method: "GET", isArray: false, params: { action: 'activeroom' } },
            changeroom: { method: "POST", isArray: false, params: { action: 'changeroom' } },
            removebyroom: { method: "POST", isArray: false, params: { action: 'removebyroom' } },
        }
    }
    ,
    {
        name: 'NotebookResource', endpoint: 'notebooks/:notebookId/:action',
        otherActions: {
            getDetailForEdit: { method: "GET", isArray: true, params: { action: 'detailforedit' } },
        }
    }
    ,
    {
        name: 'GroupResource', endpoint: 'groups/:groupId/:action',
    }
    ,
        {
            name: 'RoomGroupResource', endpoint: 'roomgroups/:groupId/:action',
        }
    ,
    {
        name: 'AccountResource', endpoint: 'accounts/:accountId/:action',
    }
    ,
    {
        name: 'AccountingTransactionResource', endpoint: 'accountingtransaction/:accountingTransactionId/:action',
        otherActions: {
            voidDocument: { method: "DELETE", isArray: false, params: { action: 'void' } },
            transfer: { method: "POST", isArray: false, params: { action: 'transfer' } },
        }
    }
    ,
    {
        name: 'AccountingTransactionGroupResource', endpoint: 'accountingtransactiongroups/:accountingTransactionGroupId/:action',
    }
    ,
    {
        name: 'PartnerResource', endpoint: 'partners/:partnerId/:action',
        otherActions: {
            getByGroup: { method: "GET", isArray: true, params: { action: 'getbygroup' } },
            getByBirthday: { method: "GET", isArray: true, params: { action: 'getbybirthday' } },
            getCurrentDebt: { method: "GET", isArray: false, params: { action: 'currentdebt' } },
            importpartners: { method: "POST", params: { action: 'import' } },
        }
    }
    ,
    {
        name: 'ProductResource', endpoint: 'products/:productId/:action',
        otherActions: {
            getpopularproducts: { method: "GET", isArray: true, params: { action: 'popular' } },
            importproducts: { method: "POST", params: { action: 'import' } },
            getAttributes: { method: "GET", isArray: true, params: { action: 'attributes' } },
            getComponents: { method: "GET", isArray: true, params: { action: 'components' } },
            getSuppliers: { method: "GET", isArray: true, params: { action: 'suppliers' } },
            getExtra: { method: "GET", isArray: true, params: { action: 'extra' } },
            getCurrentOnHand: { method: "GET", isArray: false, params: { action: 'currentonhand' } },
            getByCategory: { method: "GET", isArray: true, params: { action: 'getbycategory' } },
            getCostOfComponent: { method: "GET", isArray: false, params: { action: 'getcostofcomponent' } },
            deleteExtra: { method: "DELETE", isArray: false, params: { action: 'deleteextra' } },
            addExtra: { method: "POST", isArray: false, params: { action: 'addextra' } },
            addExtraByCode: { method: "POST", isArray: false, params: { action: 'addextrabycode' } },
            }
    },
    {
        name: 'OfflineResource', endpoint: 'offline/:offlineId/:action',
    },
    {
        name: 'PriceBookResource', endpoint: 'pricebooks/:pricebookId/:action',
        otherActions: {
            getprice: { method: "GET", isArray: false, params: { action: 'productprice' } },
            getprices: { method: "POST", isArray: false, params: { action: 'manyproductprice' } },
            deleteItem: { method: "DELETE", isArray: false, params: { action: 'deleteitem' } },
            addItem: { method: "POST", isArray: false, params: { action: 'additem' } },
            addItemByCode: { method: "POST", isArray: false, params: { action: 'additembycode' } },
            updateItem: { method: "POST", isArray: false, params: { action: 'updateitem' } },
            addByCategory: { method: "POST", isArray: false, params: { action: 'additembycategory' } },
            calculator: { method: "POST", isArray: false, params: { action: 'calculator' } },
            importpricebook: { method: "POST", isArray: false, params: { action: 'import' } },
        }
    },
    {
        name: 'InventoryCountResource', endpoint: 'inventorycount/:inventorycountId/:action',
        otherActions: {
            addByCategory: { method: "POST", isArray: false, params: { action: 'additembycategory' } },
            voidDocument: { method: "DELETE", isArray: false, params: { action: 'void' } },
            getDetailForEdit: { method: "GET", isArray: true, params: { action: 'detailforedit' } },
            ImportItems: { method: "POST", isArray: true, params: { action: 'import' } },
        }
    },
    {
        name: 'SmsResource', endpoint: 'sms/:smsId/:action',
        otherActions: {
            getDetailForEdit: { method: "GET", isArray: true, params: { action: 'detailforedit' } },
        }
    },
    {
        name: 'ManufacturingResource', endpoint: 'manufacturing/:manufacturingId/:action',
        otherActions: {
            voidDocument: { method: "DELETE", isArray: false, params: { action: 'void' } },
            getDetailForEdit: { method: "GET", isArray: true, params: { action: 'detailforedit' } },
            getMaterialDetailForEdit: { method: "GET", isArray: true, params: { action: 'materialdetailforedit' } },
        }
    },
    {
        name: 'OtherTransactionResource', endpoint: 'othertransaction/:othertransactionId/:action',
        otherActions: {
            voidDocument: { method: "DELETE", isArray: false, params: { action: 'void' } },
            getDetailForEdit: { method: "GET", isArray: true, params: { action: 'detailforedit' } },
        }
    }
    ,
    {
        name: 'TransferResource', endpoint: 'transfers/:transferId/:action',
        otherActions: {
            voidDocument: { method: "DELETE", isArray: false, params: { action: 'void' } },
            getDetailForEdit: { method: "GET", isArray: true, params: { action: 'detailforedit' } },
            ImportItems: { method: "POST", isArray: true, params: { action: 'import' } },
        }
    },
        {
            name: 'OrderstockResource', endpoint: 'orderstock/:orderstockId/:action',
            otherActions: {
                voidDocument: { method: "DELETE", isArray: false, params: { action: 'void' } },
                getDetailForEdit: { method: "GET", isArray: true, params: { action: 'detailforedit' } },
                getDetailBySupplier: { method: "GET", isArray: true, params: { action: 'getbysupplier' } },
                ImportItems: { method: "POST", isArray: true,  params: { action: 'import' } },
            }
        }
        ,
        {
            name: 'OrderResource', endpoint: 'orders/:orderId/:action',
            otherActions: {
                voidDocument: { method: "DELETE", isArray: false, params: { action: 'void' } },
                getDetailForEdit: { method: "GET", isArray: true, params: { action: 'detailforedit' } },
            }
        }
        ,
        {
            name: 'PurchaseOrderReturnResource', endpoint: 'returntosuppliers/:purchaseOrderReturnId/:action',
            otherActions: {
                voidDocument: { method: "DELETE", isArray: false, params: { action: 'void' } },
                getDetailForEdit: { method: "GET", isArray: true, params: { action: 'detailforedit' } },
            }
        }

    , {
        name: 'DeliveryOrderResource', endpoint: 'delivery/:deliveryorderId/:action',
        otherActions: {
            voidDocument: { method: "DELETE", isArray: false, params: { action: 'void' } },
            getDetailForEdit: { method: "GET", isArray: true, params: { action: 'detailforedit' } },
            ImportItems: { method: "POST", isArray: true, params: { action: 'import' } },
        }
    },
        {
            name: 'ReturnResource', endpoint: 'returns/:returnId/:action',
            otherActions: {
                voidDocument: { method: "DELETE", isArray: false, params: { action: 'void' } },
                getDetailForEdit: { method: "GET", isArray: true, params: { action: 'detailforedit' } },
            }
        }
    , {
        name: 'UserResource', endpoint: 'users/:userId/:action',
        otherActions: {
                getUser: { method: "GET", isArray: false },
                getPrivileges: { method: 'GET', isArray: false, params: { action: 'privileges' } },
                savePrivileges: { method: 'POST', isArray: false, params: { action: 'privileges' } },
                copyPrivileges: { method: 'POST', isArray: false, params: { action: 'copyprivileges' } },
                saveProfile: { method: 'POST', isArray: false, params: { action: 'profile' } },

            }
    },{
        name: 'BranchResource', endpoint: 'branchs/:branchId/:action',
        otherActions: {
                saveBranch: { method: 'POST', isArray: false },
                getBranch: { method: "GET", isArray: false },
            }
    }, {
        name: 'VoucherResource', endpoint: 'voucher/:voucherId/:action',
        otherActions: {
            saveVoucher: { method: 'POST', isArray: false },
            getVoucher: { method: "GET", isArray: false },
            importvouchers: { method: "POST", params: { action: 'import' } },
        }
    }, {
        name: 'PrintTemplateResource', endpoint: 'printtemplates/:type/:action',
        otherActions: {
                savePrintTemplate: { method: 'POST', isArray: false },
                getPrintTemplate: { method: 'GET', isArray: false }
            }
    },{
        name: 'SettingResource', endpoint: 'setting/:section/:subsection',
        otherActions: {
            updateFeatureConfiguration: { method: 'POST', isArray: false, params: { section: 'updatefeatureconfiguration' } },
            updateSingleFeatureConfiguration: { method: 'POST', isArray: false, params: { section: 'updatesinglefeatureconfiguration' } },
                getFeatureConfiguration: { method: 'GET', isArray: true, params: { section: 'featureconfiguration' } }
            }
    },
        {
            name: 'PointConfigResource', endpoint: 'pointconfig',
        },
        {
            name: 'PointUseResource', endpoint: 'pointuse/:useId/:action',
        },
    {
        name: 'VendorResource', endpoint: 'vendors/:section/:subsection',
        otherActions: {
            updateCurrent: { method: 'POST', isArray: false, params: { section: 'current' } },
            makeSampleData: { method: 'POST', isArray: false, params: { section: 'setup' } },
            clear: { method: 'POST', isArray: false, params: { section: 'clear' } },
            }
    },
];

var mod = angular.module('pos.dataservices', ['pos.session', 'ngResource']);

function createService(module, desc, otherActions) {
    //console.log(desc);
    var key = desc.endpoint.split("/:"),
        resourceId = {};
    key = key[1];
    resourceId[key] = '@' + key;

    module.factory(desc.name, [
                       '$resource', 'posSession', function ($resource, _session) {
                           var r = $resource(_session.baseApi + desc.endpoint, resourceId, otherActions);
                           r.domain = desc.name.replace("Resource", "");
                           if (r.domain.lastIndexOf("y") == r.domain.length - 1)
                               r.domain = r.domain.substr(0, r.domain.length - 1) + 'ies';
                           else if (r.domain.lastIndexOf("h") == r.domain.length - 1)
                               r.domain = r.domain + 'es';
                           else
                               r.domain += 's';
                           return common(r);
                       }
                   ]);
}

angular.forEach(services, function (s) {
    createService(mod, s, s.otherActions);
});
mod.factory('CommonServices', [
                '$filter', '$http',
                function ($filter, $http) {
                    function changeCurrentBranch(id, callback) {
                        $http.post("/Home/ChangeBranch", { branchId: id })
                            .success(function (data) {
                                if (data && typeof callback == "function") {
                                    callback(data);
                                }
                            });
                    }
                    return {
                        ChangeBranch: changeCurrentBranch
                    };
                }
            ]);
;
'use strict'
angular.module('pos.directives', [])
.directive('appFilereader', ['$q', function ($q) {
    var slice = Array.prototype.slice;
    return {
        restrict: 'A',
        require: '?ngModel',
        link: function (scope, element, attrs, ngModel) {
            if (!ngModel) return;

            ngModel.$render = function () { }

            element.bind('change', function (e) {
                var element = e.target;
                if (!element.value) return;

                element.disabled = true;
                $q.all(slice.call(element.files, 0).map(readFile))
                  .then(function (values) {
                      if (element.multiple) ngModel.$setViewValue(values);
                      else ngModel.$setViewValue(values.length ? values[0] : null);
                      element.value = null;
                      element.disabled = false;
                  });

                function readFile(file) {
                    var deferred = $q.defer();

                    var reader = new FileReader()
                    reader.onload = function (e) {
                        deferred.resolve(e.target.result);
                    }
                    reader.onerror = function (e) {
                        deferred.reject(e);
                    }
                    reader.readAsDataURL(file);

                    return deferred.promise;
                }

            }); //change

        } //link
    };
}])
    .directive('shouldFocus', function () {
        return {
            restrict: 'A',
            link: function (scope, element, attrs) {
                scope.$watch(attrs.shouldFocus, function (newVal, oldVal) {
                    if (newVal && element.prop("class").indexOf("active")) {
                        var par = element.parent("ul");
                        var cellHeight = element.children().innerHeight();
                        var maxHeight = par.height();
                        var startIndex = Math.floor(maxHeight / cellHeight);

                        if (scope.$index > startIndex) {
                            var scroll = (scope.$index - startIndex) * cellHeight;
                            par.scrollTop(scroll);
                        }
                        if (scope.$index === 0) {
                            par.scrollTop(0);
                        }
                    }
                });
            }
        }
    })
    .directive("whenScrolled", function () {
        return {

            restrict: 'A',
            link: function (scope, elem, attrs) {

                // we get a list of elements of size 1 and need the first element
                var raw = elem[0];
                // we load more elements when scrolled past a limit
                elem.bind("scroll", function () {
                    if (raw.scrollTop + raw.offsetHeight + 5 >= raw.scrollHeight) {
                        scope.loading = true;

                        // we can give any function which loads more elements into the list
                        scope.$apply(attrs.whenScrolled);
                    }
                });
            }
        }
    })
    .directive('selectOnFocus',function () {
        return {
            restrict: 'A',
            link: function (scope, element, attr) {
                element.on('focus', function () {
                    if (!$(".keyboardInputMaster").is(":visible")) {
                        var domElement = element[0];
                        if (angular.isFunction(domElement.setSelectionRange)) {
                            domElement.setSelectionRange(0, domElement.value.length);
                        }
                    }

                });
            }
        };
    })
        .directive('filterCol', ['$window', function ($window) {
            return {
                restrict: 'A',
                link: function (scope, element, attr) {
                    toggleclass();
                    $window.onresize = function (event) {
                        var exists = document.getElementById('filtercol');
                        if (typeof (exists) !== 'undefined' && exists !== null) {
                            toggleclass();
                        }

                    }
                    
                    function toggleclass() {
                        var contentwrapper = angular.element(document.getElementById("content-wrapper"));
                        var clientWidth = document.documentElement.clientWidth;

                        if (scope.cachedElementWidth !== clientWidth) {
                            if (clientWidth <= 991) {
                                element.removeClass('filter-col-show')
                                if (typeof (contentwrapper) !== 'undefined' && contentwrapper !== null) {
                                    contentwrapper.removeClass('content-wrapper-with-filter');
                                    scope.cachedElementWidth = clientWidth;
                                }

                            } else {
                                element.addClass('filter-col-show');
                                if (typeof (contentwrapper) !== 'undefined' && contentwrapper !== null) {
                                    contentwrapper.addClass('content-wrapper-with-filter');
                                    scope.cachedElementWidth = clientWidth;
                                }



                            }
                        }
                       
                    }
                }
            };
        }])
    .directive('toggleClassFilter', function () {
        return {
            restrict: 'A',
            link: function (scope, element, attrs) {
                element.bind('click', function () {
                    var clientWidth = document.documentElement.clientWidth;
                    var contentwrapper = angular.element(document.getElementById("content-wrapper"));
                    var colfilter = angular.element(document.getElementById("filtercol"));
                    if (typeof (colfilter) !== 'undefined' && colfilter !== null)
                        colfilter.toggleClass('filter-col-show');
                    if (typeof (contentwrapper) !== 'undefined' && contentwrapper !== null)
                        contentwrapper.toggleClass('content-wrapper-with-filter');

                    if (clientWidth <= 500 && typeof (colfilter) !== 'undefined' && colfilter !== null && colfilter.hasClass('filter-col-show')) {
                        var leftfilter = angular.element(document.getElementById("left-filter"));
                        if (typeof (leftfilter) !== 'undefined' && leftfilter !== null)
                            leftfilter.addClass('hidden');
                        var rightfilter = angular.element(document.getElementById("right-filter"));
                        if (typeof (rightfilter) !== 'undefined' && rightfilter !== null)
                            rightfilter.addClass('hidden');
                    } else {
                        var leftfilter = angular.element(document.getElementById("left-filter"));
                        if (typeof (leftfilter) !== 'undefined' && leftfilter !== null)
                            leftfilter.removeClass('hidden');
                        var rightfilter = angular.element(document.getElementById("right-filter"));
                        if (typeof (rightfilter) !== 'undefined' && rightfilter !== null)
                            rightfilter.removeClass('hidden');
                    }
                });
            }
        };
    })
    .directive('toggleClass', function () {
        return {
            restrict: 'A',
            link: function (scope, element, attrs) {
                element.bind('click', function () {
                    element.toggleClass(attrs.toggleClass);
                });
            }
        };
    }).directive('gridExpandRow', [function () {
        return {
            link: function (scope, elem, attrs) {
                var grid = elem;
                grid.on('click', 'tr.k-master-row td[role="gridcell"]', function () {
                    $("tr.k-master-row").removeClass("k-master-state");
                    $(".k-tabstrip-wrapper").removeAttr("style");
                    if (!$(this).parent().hasClass("SummaryRow")) {
                        var linkIcon = $(this).parent().find(".k-icon");
                        if (!linkIcon.hasClass("k-i-expand")) {
                            grid.data().kendoGrid.collapseRow($(this).parent());
                        } else {
                            grid.data().kendoGrid.expandRow($(this).parent());
                            //$(this).parent().addClass("k-master-state");
                            //$(this).parent().next().find(".k-tabstrip-wrapper").width($('.k-grid-content').width() - 2);
                            //$("body").animate({
                            //    scrollTop: $(this).parent().offset().top
                            //}, 120);
                        }
                    }
                });
            }
        };
    }]).directive('ngEnter', function () {
        return function (scope, element, attrs) {
            element.bind("keydown keypress", function (event) {
                if (event.which === 13) {
                    scope.$apply(function () {
                        scope.$eval(attrs.ngEnter);
                    });

                    event.preventDefault();
                }
            });
        };
    })
    .directive('report', function () {
        return {
            restrict: 'EA',
            transclude: 'true',
            scope: {
                name: '@',
                parameters: '@',
                apiurl: '@'
            },
            templateUrl: '/ReportViewer/templates/viewer.html',
            link: function (scope, element, attrs) {
                //create the viewer object first, can be done in index.html as well
                var reportViewer = $("#reportViewer-barcode").data("telerik_ReportViewer");
                if (!reportViewer) {
                    $(document).ready(function () {
                        $("#reportViewer-master").telerik_ReportViewer({
                            error: function (e, args) {
                            },
                            reportSource: {
                                report: scope.name,
                                parameters: { filter: scope.parameters },

                            },
                            serviceUrl: scope.apiurl + "/api/reports/",
                            // The URL for the report viewer template. The template can be edited -
                            // new functionalities can be added and unneeded ones can be removed.
                            // For more information please check http://www.telerik.com/help/reporting/html5-report-viewer-templates.html.
                            templateUrl: '/ReportViewer/templates/telerikReportViewerTemplate-FA.html',
                            // Specifies whether the viewer is in interactive or print preview mode.
                            // PRINT_PREVIEW - Displays the paginated report as if it is printed on paper. Interactivity is not enabled.
                            // INTERACTIVE - Displays the report in its original width and height without paging. Additionally interactivity is enabled.
                            viewMode: telerikReportViewer.ViewModes.PRINT_PREVIEW,

                            // Sets the scale mode of the viewer.
                            // Three modes exist currently:
                            // FIT_PAGE - The whole report will fit on the page (will zoom in or out), regardless of its width and height.
                            // FIT_PAGE_WIDTH - The report will be zoomed in or out so that the width of the screen and the width of the report match.
                            // SPECIFIC - Uses the scale to zoom in and out the report.
                            scaleMode: telerikReportViewer.ScaleModes.SPECIFIC,

                            // Zoom in and out the report using the scale
                            // 1.0 is equal to 100%, i.e. the original size of the report
                            scale: 1.0,
                            ready: function () {

                            },
                        })
                    });
                }
                //on state change update the report source
                scope.$watch('name', function () {

                    var reportViewer = $("#reportViewer-master").data("telerik_ReportViewer");

                    if (reportViewer) {
                        var rs = reportViewer.reportSource();
                        if (rs && rs.report)
                            if (rs.report !== scope.name ||
                                rs.parameters !== scope.parameters) {

                                reportViewer.reportSource({
                                    report: scope.name,
                                    parameters: JSON.parse(scope.parameters),
                                });
                            }
                    }
                });
            }
        }
    })
    .service('ConfirmDialog', ['$modal',
    function ($modal) {

        var modalDefaults = {
            backdrop: true,
            keyboard: true,
            modalFade: true,
            templateUrl: 'template/modal/confirmdialog.html'
        };

        var modalOptions = {
            closeButtonText: 'Close',
            actionButtonText: 'OK',
            headerText: 'Proceed?',
            bodyText: 'Perform this action?'
        };

        this.showModal = function (customModalDefaults, customModalOptions) {
            if (!customModalDefaults) customModalDefaults = {};
            customModalDefaults.backdrop = 'static';
            return this.show(customModalDefaults, customModalOptions);
        };

        this.show = function (customModalDefaults, customModalOptions) {
            //Create temp objects to work with since we're in a singleton service
            var tempModalDefaults = {};
            var tempModalOptions = {};

            //Map angular-ui modal custom defaults to modal defaults defined in service
            angular.extend(tempModalDefaults, modalDefaults, customModalDefaults);

            //Map modal.html $scope custom properties to defaults defined in service
            angular.extend(tempModalOptions, modalOptions, customModalOptions);

            if (!tempModalDefaults.controller) {

                tempModalDefaults.controller = function ($scope, $modalInstance) {
                    $scope.modalOptions = tempModalOptions;
                    $scope.modalOptions.ok = function (result) {
                        $modalInstance.close(result);
                    };
                    $scope.modalOptions.close = function (result) {
                        $modalInstance.dismiss('cancel');
                    };
                }
                tempModalDefaults.controller.$inject = ['$scope', '$modalInstance'];
            }

            return $modal.open(tempModalDefaults).result;
        };

    }]);;
'use strict'
function formatNumber(num) {
    if (num) {
        var decimalPart;
        var array = Math.floor(num).toString().split('');
        var index = -3;
        while (array.length + index > 0) {
            array.splice(index, 0, ',');
            index -= 4;
        }
        try {
            decimalPart = num.toFixed(3).split(".")[1];
        } catch (e) {

        }
        
        return (array.join('') + "." + decimalPart).replace(/\.?0+$/, '');
    } else return 0;
};
angular.module('pos.filters', [])
    .factory('kendofilter', function () {
        var kendofilter = {
            filter: addfilter,
            remove: removefilter,
            newCondition: addCondition,
            append: appendfilter,
            detach: detachfilter,
            addfilter: addmorefilter
        },
            odataFilters = {
                eq: "eq",
                neq: "ne",
                ne: "ne",
                gt: "gt",
                gte: "ge",
                ge: "ge",
                lt: "lt",
                lte: "le",
                le: "le",
                contains: "substringof",
                doesnotcontain: "substringof",
                endswith: "endswith",
                startswith: "startswith"
            };

        function addCondition(field, value, operator) {
            return {
                "field": field, // the column you want to filter
                "operator": operator, // the type of filter
                "value": value// the value
            };
        }

        function appendfilter(filters, condition, slogic) {
            if (condition.length > 0) {
                filters.push(
                    {
                        logic: slogic,
                        "filters": condition
                    });
            }
            return filters;
        }

        function detachfilter(filter, field) {
            var flmain = [];
            if (filter) {
                var orgFilter = filter.filters ? filter.filters : filter;
                if (orgFilter) {
                    for (var j = 0; j < orgFilter.length; j++) {
                        var forg = [];
                        for (var k = 0; k < orgFilter[j].filters.length; k++) {
                            var oldFilter = orgFilter[j].filters[k];
                            if (oldFilter.field != field) {
                                forg.push(oldFilter);
                            }
                        }
                        if (forg.length > 0) {
                            flmain.push({ logic: orgFilter[j].logic, "filters": forg });
                        }
                    }

                }
            }
            return flmain;
        }

        function addmorefilter(datasource, filter) {
            var flmain = filter;
            var orgFilter = datasource.filter();
            if (orgFilter) {
                for (var j = 0; j < orgFilter.filters.length; j++) {
                    var forg = [];
                    for (var k = 0; k < orgFilter.filters[j].filters.length; k++) {
                        var oldFilter = orgFilter.filters[j].filters[k];
                        var exists = false;
                        for (var m = 0; m < filter.length; m++) {
                            for (var n = 0; n < filter[m].filters.length; n++) {
                                if (oldFilter.field == filter[m].filters[n].field) {
                                    exists = true;
                                    break;
                                }
                            }
                            if (exists) break;
                        }
                        if (!exists)
                            forg.push(oldFilter);

                    }
                    if (forg.length > 0) {
                        flmain.push({ logic: orgFilter.filters[j].logic, "filters": forg });
                    }
                }
            }
            datasource.filter(flmain);
        }

        function addfilter(datasource, condition, slogic) {
            var flmain = [];
            var orgFilter = datasource.filter();
            if (orgFilter) {
                for (var j = 0; j < orgFilter.filters.length; j++) {
                    var forg = [];
                    for (var k = 0; k < orgFilter.filters[j].filters.length; k++) {
                        var oldFilter = orgFilter.filters[j].filters[k];
                        if (oldFilter.field != condition[0].field) {
                            forg.push(oldFilter);
                        }
                    }
                    if (forg.length > 0) {
                        flmain.push({ logic: orgFilter.filters[j].logic, "filters": forg });
                    }
                }
            }
            flmain.push(
                {
                    logic: slogic,
                    "filters": condition
                });
            datasource.filter(flmain);
        }

        function removefilter(datasource, field) {
            var flmain = [];

            var orgFilter = datasource.filter();
            if (orgFilter) {
                for (var j = 0; j < orgFilter.filters.length; j++) {
                    var forg = [];
                    for (var k = 0; k < orgFilter.filters[j].filters.length; k++) {
                        var oldFilter = orgFilter.filters[j].filters[k];
                        if (oldFilter.field != field) {
                            forg.push(oldFilter);
                        }
                    }
                    if (forg.length > 0) {
                        flmain.push({ logic: orgFilter.filters[j].logic, "filters": forg });
                    }
                }
            }
            datasource.filter(flmain);
        }

        return kendofilter;
    })
        .filter('calTotal', function () {
            return function (input, property) {
                var i = (input instanceof Array || typeof input === 'object') ? input.length : 0;
                if (typeof property === 'undefined' || i === 0) {
                    return i;
                } else if (typeof property === 'function') {
                    var total = 0;
                    while (i--) {
                        var tmp = property(input[i]);
                       
                        if (!isNaN(tmp)) {
                            total += tmp;
                        }
                    }
                        
                    return total;
                } else if (isNaN(input[0][property])) {
                    throw 'filter total can count only numeric values';
                } else {
                    var total = 0;
                    while (i--)
                        total += input[i][property];
                    return total;
                }
            };
        })
    .filter('formatNumber', [
                '$filter', function ($filter) {
                    //deprecated - use angular number filter instead 
                    function formatQuantity(num) {
                        return num ? $filter('number')(num, 3).replace(/\.?0+$/, '') : 0;
                    };
                    return formatQuantity;
                }
    ])
    .filter('number2Text', [
                '$filter', function ($filter) {
                    return function (val) {
                        return DocTienBangChu(val);
                    }
                }
    ])
    .filter('truncateDesc', [
                '$filter', function ($filter) {
                    return function (str) {
                        var limit = 105;
                        var bits, i;
                        if ("string" !== typeof str) {
                            return '';
                        }
                        bits = str.split('');
                        if (bits.length > limit) {
                            for (i = bits.length - 1; i > -1; --i) {
                                if (i > limit) {
                                    bits.length = i;
                                } else if (' ' === bits[i]) {
                                    bits.length = i;
                                    break;
                                }
                            }
                            bits.push('...');
                        }
                        return bits.join('');
                    }
                }
    ])
        .filter('parseDate', [function () {
            return function (val) {
                if (val)
                    return new Date(val);
                else
                    return new Date();
            };
        }]).filter("stringFormat", function () {
            return function (input) {
                var args = arguments;
                return input.replace(/\{(\d+)\}/g, function (match, capture) {
                    return args[1 * capture + 1];
                });
            };
        });
    ;
'use strict'
angular.module('pos.services', ['pos.session', 'ui.bootstrap.modal'])
    .factory("posPrinterService", [
                 'posSession', '$http', 'PrintTemplateResource', 'PrintTemplateResource', '$templateRequest', '$sce', '$filter',
                 function (_session, $http, _printTemplate, _PrintTemplateResource, $templateRequest, $sce, $filter) {
                     var posPrint = {
                         parsingTemplates: parsingTemplates,
                         printHtml: printHtml,
                         print: print,
                         getTokenDescription: getTokenDescription,
                         getTemplate: getTemplate
                     };
                     var kendoToken = [];
                         
                     kendoToken[1] = [
                        
                         {
                             value: "{Ten_Cua_Hang}", text: "#= data.CurrentRetailer.Name#", description: $filter('translate')('label_Retailer_Name')
                         }, {
                             value: "{Dia_Chi_Cua_Hang}", text: "#if(data.CurrentRetailer.Address){##=CurrentRetailer.Address##}#", description: $filter('translate')('label_Retailer_Address')
                         }, {
                             value: "{Dien_Thoai_Cua_Hang}", text: "#= data.CurrentRetailer.Phone#", description: $filter('translate')('label_Retailer_Phone')
                         }, {
                             value: "{Logo_50_50}", text: '<img src="#= data.CurrentRetailer.Logo#" style="width: 50px;"/>', description: 'Logo 50px'
                         }
                     , {
                             value: "{Logo_100_100}", text: '<img src="#= data.CurrentRetailer.Logo#" style="width: 100px;"/>', description: 'Logo 100px'
                         }
                     , {
                         value: "{Logo_200_200}", text: '<img src="#= data.CurrentRetailer.Logo#" style="width: 200px;"/>', description: 'Logo 200px'
                     }, {
                         value: "{Logo_Full}", text: '<img src="#= data.CurrentRetailer.Logo#" style="width: 100%;"/>', description: 'Logo 100%'
                         },
                         {
                             value: "{Ten_Chi_Nhanh}", text: "#if(data.CurrentBranch && data.CurrentBranch.Name){##=CurrentBranch.Name##}#", description: $filter('translate')('label_Branch_Name')
                         }
                     ,{
                             value: "{Dia_Chi_Chi_Nhanh}", text: "#if(data.CurrentBranch && data.CurrentBranch.Address){##=CurrentBranch.Address##}#", description: $filter('translate')('label_Branch_Address')
                         }
                     ,{
                             value: "{Dien_Thoai_Chi_Nhanh}", text: "#if(data.CurrentBranch && data.CurrentBranch.Phone){##=CurrentBranch.Phone##}#", description: $filter('translate')('label_Branch_Phone')
                         }
                                          
                     ,{
                             value: "{Ngay}", text: "#if (data.PurchaseDate) {# #=kendo.toString(kendo.parseDate(PurchaseDate),\"dd\")# #}#", description: $filter('translate')('label_Day')
                         }
                     ,{
                             value: "{Thang}", text: "#if (data.PurchaseDate) {# #=kendo.toString(kendo.parseDate(PurchaseDate),\"MM\")# #}#", description: $filter('translate')('label_Month')
                         }
                     ,{
                             value: "{Nam}", text: "#if (data.PurchaseDate) {# #=kendo.toString(kendo.parseDate(PurchaseDate),\"yyyy\")# #}#", description: $filter('translate')('label_Year')
                         }
                     ,{
                             value: "{Gio}", text: "#if (data.PurchaseDate) {# #=kendo.toString(kendo.parseDate(PurchaseDate),\"HH\")# #}#", description: $filter('translate')('label_Hour')
                         }
                     ,{
                             value: "{Phut}", text: "#if (data.PurchaseDate) {# #=kendo.toString(kendo.parseDate(PurchaseDate),\"mm\")# #}#", description: $filter('translate')('label_Minute')
                     }
                     ,{
                         value: "{Ngay_Tao}", text: "#if (data.ActiveDate) {# #=kendo.toString(kendo.parseDate(ActiveDate),\"dd-MM-yyyy HH:mm\")# #}#", description: $filter('translate')('label_CreatedDate')
                     }, {
                         value: "{Ngay_Tao_Karaoke}", text: "#=kendo.toString((data.OrderDetails.filter(x => x.IsTimer).map(x => kendo.parseDate(x.Checkin))[0]||kendo.parseDate(data.ActiveDate||new Date())),\"dd-MM-yyyy HH:mm\")#", description: $filter('translate')('label_CreatedDate') + ' Karaoke'
                     }
                     ,{
                         value: "{Ma_Chung_Tu}", text: '#if(data.Code){##=data.Code##}else{##="Phiếu tạm tính"##}#', description: $filter('translate')('label_DocumentCode')
                         },{
                             value: "{Ghi_Chu}", text: "#if(data.Description){# #=Description#  #}#", description: $filter('translate')('label_Description')
                         }
                     ,{
                             value: "{Nhan_Vien}", text: "#if (data.SoldBy && data.SoldBy.Name)# #=SoldBy.Name#", description: $filter('translate')('label_SoldBy')
                         }
                     ,{
                             value: "{Ma_Khach_Hang}", text: "#if(data.Partner &&data.Partner.Code){##=Partner.Code##}#", description: $filter('translate')('label_Customer_Code')
                     }, {
                         value: "{Nguoi_Quan_Ly_Khach}", text: "#if(data.Partner &&data.Partner.LeadOwnerName){##=Partner.LeadOwnerName##}#", description: $filter('translate')('label_LeadOwner')
                     }
                     , {
                             value: "{MST_Khach_Hang}", text: "#if(data.Partner &&data.Partner.TaxCode){##=Partner.TaxCode##}#", description: $filter('translate')('label_Partner_TaxCode')
                         },{
                             value: "{Ten_Khach_Hang}", text: "#if(data.Partner &&data.Partner.Name ){##=Partner.Name##}#", description: $filter('translate')('label_Customer_Name')
                         },{
                             value: "{Dia_Chi_Khach_Hang}", text: "#if(data.Partner &&data.Partner.Address){##=Partner.Address##}#", description: $filter('translate')('label_Customer_Address')
                         }, {
                             value: "{Dia_Chi_Giao_Hang}", text: "#if(data.Partner &&data.Partner.ShippingAddress){##=Partner.ShippingAddress##}#", description: $filter('translate')('label_ShippingAddress')
                         }, {
                             value: "{Dien_Thoai_Khach_Hang}", text: "#= (data.Partner && data.Partner.Phone)?Partner.Phone:''#", description: $filter('translate')('label_Customer_Phone')
                         },{
                         value: "{Du_No_Moi}", text: "#=formatNumber(setDefaultVal(data.MoreAttributes.OldDebt,0)+setDefaultVal(data.Total,0)-setDefaultVal(data.TotalPayment,0))#", description: $filter('translate')('label_Debt')
                         }, {
                         value: "{Du_No_Moi_Bang_Chu}", text: '#=DocTienBangChu(Math.abs(setDefaultVal(data.MoreAttributes.OldDebt,0)+setDefaultVal(data.Total,0)-setDefaultVal(data.TotalPayment,0)))# đồng chẵn', description: $filter('translate')('label_Debt') + "(" + $filter('translate')('label_Inwords') + ")"
                         }, {
                         value: "{Du_No_Cu}", text: "#=formatNumber(setDefaultVal(data.MoreAttributes.OldDebt,0))#", description: $filter('translate')('label_OldDebt')
                         },{
                             value: "{Tong_Truoc_Chiet_Khau}", text: "#if(data.Total){##=formatNumber(Total + (data.Discount?Discount:0)-(data.VAT?VAT:0))##}#", description: $filter('translate')('label_SubTotal')
                         }, {
                             value: "{Tong_Truoc_Chiet_Khau_Lam_Tron}", text: "#if(data.Total){##=kendo.toString(Total + (data.Discount?Discount:0)-(data.VAT?VAT:0),'n0')##}#", description: $filter('translate')('label_SubTotal')
                         }, {
                             value: "{Chiet_Khau}", text: "#=(data.DiscountToView?DiscountToView:0)#", description: $filter('translate')('label_Discount')
                         }, {
                             value: "{Chiet_Khau_Gia_Tri}", text: "#if(data.Discount){##=formatNumber(Discount)##}#", description: ($filter('translate')('label_Discount') + '(' + $filter('translate')('label_Value') + ')')
                         }, {
                             value: "{Chiet_Khau_2}", text: "#if(true){##=formatNumber(((data.Discount?Discount:0)-(data.Voucher?Voucher:0)))##}#", description: 'Chiết khấu không bao gồm Voucher, Điểm'
                         }, {
                             value: "{Voucher}", text: "#if(data.Voucher){##=formatNumber(Voucher)##}#", description: 'Voucher'
                         }, {
                             value: "{Diem_Thuong_Cu}", text: "#if(data.Partner){##=formatNumber(data.Partner.Point)##}#", description: 'Điểm thưởng cũ'
                         }, {
                             value: "{Diem_Thuong_Moi}", text: "#if(data.Partner&&data.Partner.NewPoint){##=formatNumber(data.Partner.NewPoint)##}#", description: 'Điểm thưởng mới'
                         }, {
                             value: "{Diem_Thuong_Su_Dung}", text: "#if(data.PointDiscount){##=formatNumber(data.PointDiscount)##}#", description: 'Điểm thưởng đã sử dụng trong đơn'
                         }, {
                             value: "{Diem_Thuong_Phat_Sinh}", text: "#if(true){##=formatNumber((data.Partner&&data.Partner.NewPoint?data.Partner.NewPoint:0)-(data.Partner&&data.Partner.Point?data.Partner.Point:0)+(data.PointDiscount?data.PointDiscount:0))##}#", description: 'Điểm thưởng phát sinh'
                         },
                          {
                              value: "{VAT}", text: "#if(data.VAT){##=formatNumber(VAT)##}#", description: 'VAT'
                          },
                         {
                             value: "{Tong_Cong}", text: "#if(data.Total){##=formatNumber(Total)##}#", description: $filter('translate')('label_Total')
                         },
                         {
                             value: "{Phi_Giao_Hang}", text: "#if(data.ShippingCost){##=formatNumber(ShippingCost)##}#", description: $filter('translate')('label_ShippingCost')
                         }
                         , {
                             value: "{Tong_Cong_Lam_Tron}", text: "#if(data.Total){##=kendo.toString(data.Total,'n0')##}#", description: $filter('translate')('label_Total')
                         }, {
                             value: "{Tong_Cong_Bang_Chu}", text: "<em>#=DocTienBangChu(Math.abs(Total))# đồng chẵn</em>", description: $filter('translate')('label_Inwords')
                         }
                     , {
                         value: "{Tong_Thanh_Toan}", text: "#if(data.TotalPayment){##=formatNumber(data.TotalPayment)##}#", description: $filter('translate')('label_TotalPayment')
                         }, {
                             value: "{Tien_Khach_Dua}", text: '#{##=formatNumber(data.AmountReceived)##}#', description: $filter('translate')('label_AmountReceived')
                     }, {
                         value: "{Tien_Khach_Dua_Lam_Tron}", text: "#{##=kendo.toString(data.AmountReceived,'n0')##}#", description: $filter('translate')('label_AmountReceived')
                     }, {
                             value: "{Tien_Thua_Tra_Khach}", text: "#if(data.ExcessCash&&data.ExcessCash>0){##=formatNumber(ExcessCash)##}else{##='0'##}#", description: $filter('translate')('label_ExcessCash')
                     }, {
                         value: "{Tien_Thua_Tra_Khach_Lam_Tron}", text: "#if(data.ExcessCash&&data.ExcessCash>0){##=kendo.toString(ExcessCash,'n0')##}else{##='0'##}#", description: $filter('translate')('label_ExcessCash')
                     }, {
                         value: "{Tien_Thua_Don_Hang}", text: "#=formatNumber(data.Total-(data.TotalPayment?data.TotalPayment:0))#", description: $filter('translate')('Tiền còn lại của đơn hàng')
                         }
                     , {
                         value: "{Tong_So_Luong}", text: "#var tq= 0# #for(var ndx= 0; ndx< OrderDetails.length; ndx++){# #tq+= OrderDetails[ndx].Quantity# #}# #=formatNumber(tq)#", description: $filter('translate')('label_TotalQuantity')
                         },{
                             value: "{No_Don_Hang}", text: "#if(data.TotalPayment){##=formatNumber(Total - TotalPayment)##}else{# #=formatNumber(Total)# #}#", description: $filter('translate')('label_DebtInvoice')
                         },{
                             value: "{STT}", text: "#=i + 1#", description: $filter('translate')('label_Index')
                         },
                         {
                             value: "{Ma_Hang_Hoa}", text: "#=OrderDetails[i].Code#", description: $filter('translate')('label_Product_Code')
                         },
                         {
                             value: "{Ten_Hang_Hoa}", text: "#=OrderDetails[i].Name#", description: $filter('translate')('label_Product_Name')
                         },
                         {
                             value: "{Thuoc_Tinh_Hang_Hoa}", text: "#=OrderDetails[i].AttributesName#", description: $filter('translate')('label_Product_AttributeName')
                         },
                         {
                             value: "{Quy_Cach_Hang_Hoa}", text: "#=OrderDetails[i].Specifications#", description: $filter('translate')('label_Product_Specifications')
                         }, {
                             value: "{So_Lo_Hang_Hoa}", text: "#=OrderDetails[i].SerialNumbers ? OrderDetails[i].SerialNumbers :''#", description: $filter('translate')('label_Product_SerialNumbers')
                         }, {
                             value: "{HSD_Hang_Hoa}", text: '#=OrderDetails[i].ExpiryDate ? kendo.toString(kendo.parseDate(OrderDetails[i].ExpiryDate),"dd-MM-yyyy") :""#', description: $filter('translate')('label_ExpirationDate')
                         }
                         , {
                             value: "{Ghi_Chu_Hang_Hoa}", text: "#= OrderDetails[i].Description?OrderDetails[i].Description:''#", description: $filter('translate')('label_Product_Note')
                         },{
                             value: "{DVT_Hang_Hoa}", text: "#if(OrderDetails[i].IsLargeUnit){##=OrderDetails[i].LargeUnit?OrderDetails[i].LargeUnit:''##}else{##=OrderDetails[i].Unit?OrderDetails[i].Unit:''##}#", description: $filter('translate')('label_Product_Unit')
                         }, {
                             value: "{DVT_Quy_Cach}", text: "#if(!OrderDetails[i].IsLargeUnit&&OrderDetails[i].ConversionValue&&OrderDetails[i].LargeUnit&&OrderDetails[i].Unit&&OrderDetails[i].Quantity>=OrderDetails[i].ConversionValue){##=(( Math.floor(OrderDetails[i].Quantity/OrderDetails[i].ConversionValue)>0?(Math.floor(OrderDetails[i].Quantity/OrderDetails[i].ConversionValue)+' '+OrderDetails[i].LargeUnit):'')+(OrderDetails[i].Quantity%OrderDetails[i].ConversionValue>0?(OrderDetails[i].Quantity%OrderDetails[i].ConversionValue+' '+OrderDetails[i].Unit):''))##}else{##=''##}#", description: $filter('translate')('label_Product_Unit') + '(' + $filter('translate')('label_Product_Specifications') + ')'
                         }, {
                             value: "{So_Luong}", text: "#if(OrderDetails[i].TotalTime&&OrderDetails[i].TotalTime.Text){##=OrderDetails[i].TotalTime.Text##}else{##=formatNumber(OrderDetails[i].Quantity)##}#", description: $filter('translate')('label_Quantity')
                         },{
                             value: "{Don_Gia_Chenh_Lech}", text: "#if(OrderDetails[i].BasePrice > OrderDetails[i].Price){##=(formatNumber((OrderDetails[i].BasePrice - OrderDetails[i].Price)*OrderDetails[i].Quantity))##}else{##='0'##}#", description: $filter('translate')('label_PriceDiff')
                         },
                         {
                             value: "{Don_Gia_Chenh_Lech_%}", text: "#if(OrderDetails[i].BasePrice&&OrderDetails[i].BasePrice>OrderDetails[i].Price){##=formatNumber(Math.round(((OrderDetails[i].BasePrice - OrderDetails[i].Price)/OrderDetails[i].BasePrice)*100))+'%'##}else{##='0%'##}#", description: $filter('translate')('label_PriceDiff') + '%'
                         },
                         {
                             value: "{Don_Gia_Chenh_Lech_%_NotToRound}", text: "#if(OrderDetails[i].BasePrice&&OrderDetails[i].BasePrice>OrderDetails[i].Price){##=formatNumber((((OrderDetails[i].BasePrice - OrderDetails[i].Price)/OrderDetails[i].BasePrice)*100))+'%'##}else{##='0%'##}#", description: $filter('translate')('label_PriceDiff') + '%'
                         },
                         {
                             value: "{Tong_Chenh_Lech_Gia}", text: "#=formatNumber(data.OrderDetails.reduce(function(aa, bb) { return aa + ((bb.BasePrice>bb.Price?bb.BasePrice:bb.Price)-bb.Price)*bb.Quantity; }, 0))#", description: 'Tổng chênh lệch giá'
                         },
                          {
                              value: "{Tong_Theo_Gia_Niem_Yet}", text: "#=formatNumber(data.OrderDetails.reduce(function(aa, bb) { return aa + ((bb.BasePrice>bb.Price?bb.BasePrice:bb.Price)*bb.Quantity); }, 0))#", description: 'Tổng tiền hàng theo giá niêm yết'
                          },
                         {
                             value: "{Don_Gia}", text: "#if(OrderDetails[i].TotalTime&&OrderDetails[i].TotalTime.Text&&OrderDetails[i].TotalTime.IsCustom){##='---'##}else{##=formatNumber(OrderDetails[i].Price)##}#", description: $filter('translate')('label_Price')
                         }, {
                             value: "{Don_Gia_Goc}", text: "#if(OrderDetails[i].BasePrice > OrderDetails[i].Price){##=formatNumber(OrderDetails[i].BasePrice)##}else{##=''##}#", description: $filter('translate')('label_BasePrice')
                         },
                         {
                             value: "{Don_Gia_Goc_Hien_Thi}", text: "#=formatNumber((OrderDetails[i].BasePrice==0?OrderDetails[i].Price:OrderDetails[i].BasePrice))#", description: $filter('translate')('label_BasePrice') + '(>=)'
                         },
                         {
                             value: "{Thanh_Tien_Hang_Hoa}", text: "#=formatNumber((OrderDetails[i].Price - (data.OrderDetails[i].Discount?OrderDetails[i].Discount:0)) * OrderDetails[i].Quantity)#", description: $filter('translate')('label_TotalLineItem')
                         },
                         {
                             value: "{Thanh_Tien_Hang_Hoa_Lam_Tron}", text: "#=kendo.toString(((OrderDetails[i].Price - (data.OrderDetails[i].Discount?OrderDetails[i].Discount:0)) * OrderDetails[i].Quantity),'n0')#", description: $filter('translate')('label_TotalLineItem')
                         },
                         {
                             value: "{Thanh_Tien_Hang_Hoa_Chua_CK}", text: "#=formatNumber((OrderDetails[i].BasePrice) * OrderDetails[i].Quantity)#", description: $filter('translate')('label_TotalLineItemBeforeDiscount')
                         },
                         {
                             value: "{Ten_Phong_Ban}", text: '#if(data.Room && data.Room.Name){##=Room.Name## ##=("["+data.Pos+"]")##}#', description: $filter('translate')('label_Room')
                         },
                         {
                             value: "{Gia_Phong_Ban}", text: "#=formatNumber(data.OrderDetails.filter(x => x.IsTimer).map(x => x.BasePrice)[0]||0)#", description: $filter('translate')('label_PriceForRoom')
                         },
                         {
                             value: "{Gia_Phong_Khung_1}", text: "#=formatNumber(data.OrderDetails.filter(x => x.IsTimer).map(x =>(x.BasePrice+Number(JSON.parse(x.PriceConfig).TimeValue)))[0]||0)#", description: $filter('translate')('label_PriceForRoom') + ' 1'
                         },
                         {
                             value: "{Gia_Phong_Khung_2}", text: "#=formatNumber(data.OrderDetails.filter(x => x.IsTimer).map(x =>(x.BasePrice+Number(JSON.parse(x.PriceConfig).TimeValue2)))[0]||0)#", description: $filter('translate')('label_PriceForRoom')+' 2'
                         },
                         {
                             value: "{So_Khach_Ngoi}", text: "#=formatNumber(data.NumberOfGuests)#", description: $filter('translate')('label_NumberOfGuests')
                         },
                         {
                             value: "{Begin}", text: "#for (var i = 0; i < OrderDetails.length; i++) { #", description:null
                         },{
                             value: "{End}", text: "# } #", description: null
                         }
                        
                     ];
                     if (_session.retailer.Id == 13720) {
                         kendoToken[1].push({
                             value: "{Tong_Cong_EU}", text: "#if(data.Total){##=kendo.toString(data.Total,'n2')##}#", description: $filter('translate')('label_Total'+' EU')
                         });
                         kendoToken[1].push({
                             value: "{Don_Gia_EU}", text: "#if(OrderDetails[i].TotalTime&&OrderDetails[i].TotalTime.Text&&OrderDetails[i].TotalTime.IsCustom){##='---'##}else{##=kendo.toString(OrderDetails[i].Price,'n2')##}#", description: $filter('translate')('label_Price')+' EU'
                         });
                         kendoToken[1].push({
                             value: "{Thanh_Tien_Hang_Hoa_EU}", text: "#=kendo.toString((OrderDetails[i].Price - (data.OrderDetails[i].Discount?OrderDetails[i].Discount:0),'n2') * OrderDetails[i].Quantity)#", description: $filter('translate')('label_TotalLineItem')+' EU'
                         });
                        
                     }
                     kendoToken[2] = kendoToken[1];
                     kendoToken[8] = kendoToken[1];
                     kendoToken[3] = [{
                             value: "{Ten_Cua_Hang}", text: "#= data.CurrentRetailer.Name#", description: $filter('translate')('label_Retailer_Name')
                         }, {
                             value: "{Dia_Chi_Cua_Hang}", text: "#= data.CurrentRetailer.Address#", description: $filter('translate')('label_Retailer_Address')
                         }, {
                             value: "{Dien_Thoai_Cua_Hang}", text: "#= data.CurrentRetailer.Phone#", description: $filter('translate')('label_Retailer_Phone')
                         }, {
                             value: "{Logo_50_50}", text: '<img src="#= data.CurrentRetailer.Logo#" style="width: 50px;"/>', description: 'Logo 50px'
                         }
                     , {
                             value: "{Logo_100_100}", text: '<img src="#= data.CurrentRetailer.Logo#" style="width: 100px;"/>', description: 'Logo 100px'
                     }, {
                         value: "{Logo_200_200}", text: '<img src="#= data.CurrentRetailer.Logo#" style="width: 200px;"/>', description: 'Logo 200px'
                     }
                         , {
                             value: "{Ten_Chi_Nhanh}", text: "#if(data.CurrentBranch && data.CurrentBranch.Name){##=CurrentBranch.Name##}#", description: $filter('translate')('label_Branch_Name')
                         }
                     , {
                             value: "{Dia_Chi_Chi_Nhanh}", text: "#if(data.CurrentBranch && data.CurrentBranch.Address){##=CurrentBranch.Address##}#", description: $filter('translate')('label_Branch_Address')
                         }
                     , {
                             value: "{Dien_Thoai_Chi_Nhanh}", text: "#if(data.CurrentBranch && data.CurrentBranch.Phone){##=CurrentBranch.Phone##}#", description: $filter('translate')('label_Branch_Phone')
                         }

                     , {
                             value: "{Ngay}", text: "#if (data.TransDate) {# #=kendo.toString(kendo.parseDate(TransDate),\"dd\")# #}#", description: $filter('translate')('label_Day')
                         }
                     , {
                             value: "{Thang}", text: "#if (data.TransDate) {# #=kendo.toString(kendo.parseDate(TransDate),\"MM\")# #}#", description: $filter('translate')('label_Month')
                         }
                     , {
                             value: "{Nam}", text: "#if (data.TransDate) {# #=kendo.toString(kendo.parseDate(TransDate),\"yyyy\")# #}#", description: $filter('translate')('label_Year')
                         }
                     , {
                             value: "{Gio}", text: "#if (data.TransDate) {# #=kendo.toString(kendo.parseDate(TransDate),\"HH\")# #}#", description: $filter('translate')('label_Hour')
                         }
                     , {
                             value: "{Phut}", text: "#if (data.TransDate) {# #=kendo.toString(kendo.parseDate(TransDate),\"mm\")# #}#", description: $filter('translate')('label_Minute')
                         }
                     , {
                         value: "{Ma_Chung_Tu}", text: "#=data.Code#", description: $filter('translate')('label_DocumentCode')
                         }, {
                             value: "{Ghi_Chu}", text: "#if(data.Description){# #=Description#  #}#", description: $filter('translate')('label_Description')
                         }
                     ,{
                             value: "{Ten_Doi_Tac}", text: "#if(data.PartnerName ){##=data.PartnerName##}#", description: $filter('translate')('label_Partner_Name')
                         }
                     ,{
                             value: "{Ma_Doi_Tac}", text: "#if(data.PartnerCode ){##=data.PartnerCode##}#", description: $filter('translate')('label_Partner_Code')
                         }
                     ,{
                             value: "{Dien_Thoai_Doi_Tac}", text: "#if(data.PartnerPhone ){##=data.PartnerPhone##}#", description: $filter('translate')('label_Partner_Phone')
                         },{
                             value: "{Dia_Chi_Doi_Tac}", text: "#if(data.PartnerAddress ){##=data.PartnerAddress##}#", description: $filter('translate')('label_Partner_Address')
                         }
                     ,{
                             value: "{Nhan_Vien}", text: "#if (data.UserName)# #=data.UserName#", description: $filter('translate')('label_CreatedBy')
                         },{
                             value: "{Gia_Tri}", text: "#if(data.Amount){##=formatNumber(Math.abs(Amount))##}#", description: $filter('translate')('label_Amount')
                         },{
                             value: "{Gia_Tri_Bang_Chu}", text: "<em>#=DocTienBangChu(Math.abs(Amount))# đồng chẵn</em>", description: $filter('translate')('label_Inwords')
                         }
                     ];
                     kendoToken[4] = kendoToken[3];
                     kendoToken[5] = [{
                             value: "{Ten_Cua_Hang}", text: "#= data.CurrentRetailer.Name#", description: $filter('translate')('label_Retailer_Name')
                         }, {
                             value: "{Dia_Chi_Cua_Hang}", text: "#= data.CurrentRetailer.Address#", description: $filter('translate')('label_Retailer_Address')
                         }, {
                             value: "{Dien_Thoai_Cua_Hang}", text: "#= data.CurrentRetailer.Phone#", description: $filter('translate')('label_Retailer_Phone')
                         }, {
                             value: "{Logo_50_50}", text: '<img src="#= data.CurrentRetailer.Logo#" style="width: 50px;"/>', description: 'Logo 50px'
                         }
                     , {
                             value: "{Logo_100_100}", text: '<img src="#= data.CurrentRetailer.Logo#" style="width: 100px;"/>', description: 'Logo 100px'
                     }, {
                         value: "{Logo_200_200}", text: '<img src="#= data.CurrentRetailer.Logo#" style="width: 200px;"/>', description: 'Logo 200px'
                     }, {
                             value: "{Ten_Chi_Nhanh}", text: "#if(data.CurrentBranch && data.CurrentBranch.Name){##=CurrentBranch.Name##}#", description: $filter('translate')('label_Branch_Name')
                         }
                     ,{
                             value: "{Dia_Chi_Chi_Nhanh}", text: "#if(data.CurrentBranch && data.CurrentBranch.Address){##=CurrentBranch.Address##}#", description: $filter('translate')('label_Branch_Address')
                         }
                     ,{
                             value: "{Dien_Thoai_Chi_Nhanh}", text: "#if(data.CurrentBranch && data.CurrentBranch.Phone){##=CurrentBranch.Phone##}#", description: $filter('translate')('label_Branch_Phone')
                         }
                                          
                     ,{
                         value: "{Ngay}", text: "#if (data.ReturnDate) {# #=kendo.toString(kendo.parseDate(ReturnDate),\"dd\")# #}#", description: $filter('translate')('label_Day')
                         }
                     ,{
                         value: "{Thang}", text: "#if (data.ReturnDate) {# #=kendo.toString(kendo.parseDate(ReturnDate),\"MM\")# #}#", description: $filter('translate')('label_Month')
                         }
                     ,{
                         value: "{Nam}", text: "#if (data.ReturnDate) {# #=kendo.toString(kendo.parseDate(ReturnDate),\"yyyy\")# #}#", description: $filter('translate')('label_Year')
                         }
                     ,{
                             value: "{Gio}", text: "#if (data.ReturnDate) {# #=kendo.toString(kendo.parseDate(ReturnDate),\"HH\")# #}#", description: $filter('translate')('label_Hour')
                         }
                     ,{
                             value: "{Phut}", text: "#if (data.ReturnDate) {# #=kendo.toString(kendo.parseDate(ReturnDate),\"mm\")# #}#", description: $filter('translate')('label_Minute')
                         }
                     ,{
                         value: "{Ma_Chung_Tu}", text: "#=data.Code#", description: $filter('translate')('label_DocumentCode')
                         },{
                             value: "{Ghi_Chu}", text: "#if(data.Description){# #=Description#  #}#", description: $filter('translate')('label_Description')
                         }
                     ,{
                             value: "{Nhan_Vien}", text: "#if (data.ReceivedBy && data.ReceivedBy.Name)# #=ReceivedBy.Name#", description: $filter('translate')('label_SoldBy')
                         }
                     ,{
                             value: "{Ma_Khach_Hang}", text: "#if(data.Partner &&data.Partner.Code){##=Partner.Code##}#", description: $filter('translate')('label_Customer_Code')
                         }
                     , {
                             value: "{MST_Khach_Hang}", text: "#if(data.Partner &&data.Partner.TaxCode){##=Partner.TaxCode##}#", description: $filter('translate')('label_Partner_TaxCode')
                         },{
                             value: "{Ten_Khach_Hang}", text: "#if(data.Partner &&data.Partner.Name ){##=Partner.Name##}#", description: $filter('translate')('label_Customer_Name')
                         },{
                             value: "{Dia_Chi_Khach_Hang}", text: "#if(data.Partner &&data.Partner.Address){##=Partner.Address##}#", description: $filter('translate')('label_Customer_Address')
                         },{
                             value: "{Dien_Thoai_Khach_Hang}", text: "#= (data.Partner && data.Partner.Phone)?Partner.Phone:''#", description: $filter('translate')('label_Customer_Phone')
                         },{
                             value: "{Tong_Cong}", text: "#if(data.Total){##=formatNumber(Total)##}#", description: $filter('translate')('label_Total')
                         }, {
                             value: "{Tong_Cong_Bang_Chu}", text: "<em>#=DocTienBangChu(Math.abs(Total))# đồng chẵn</em>", description: $filter('translate')('label_Inwords')
                         }
                          , {
                              value: "{Tong_Thanh_Toan}", text: "#if(data.TotalPayment){##=formatNumber(data.TotalPayment)##}#", description: $filter('translate')('label_TotalPayment')
                          }
                     , {
                         value: "{Tong_So_Luong}", text: "#var tq= 0# #for(var ndx= 0; ndx< ReturnDetails.length; ndx++){# #tq+= ReturnDetails[ndx].Quantity# #}# #=formatNumber(tq)#", description: $filter('translate')('label_TotalQuantity')
                         },{
                             value: "{STT}", text: "#=i + 1#", description: $filter('translate')('label_Index')
                         },
                         {
                             value: "{Ma_Hang_Hoa}", text: "#=ReturnDetails[i].Code#", description: $filter('translate')('label_Product_Code')
                         },
                         {
                             value: "{Ten_Hang_Hoa}", text: "#=ReturnDetails[i].Name#", description: $filter('translate')('label_Product_Name')
                         }, {
                             value: "{So_Lo_Hang_Hoa}", text: "#=ReturnDetails[i].SerialNumbers ? ReturnDetails[i].SerialNumbers :''#", description: $filter('translate')('label_Product_SerialNumbers')
                         }, {
                             value: "{HSD_Hang_Hoa}", text: '#=ReturnDetails[i].ExpiryDate ? kendo.toString(kendo.parseDate(ReturnDetails[i].ExpiryDate),"dd-MM-yyyy") :""#', description: $filter('translate')('label_ExpirationDate')
                         }, {
                             value: "{Ghi_Chu_Hang_Hoa}", text: "#= ReturnDetails[i].Description?ReturnDetails[i].Description:''#", description: $filter('translate')('label_Product_Note')
                         }, {
                             value: "{DVT_Hang_Hoa}", text: "#if(ReturnDetails[i].IsLargeUnit){##=ReturnDetails[i].LargeUnit?ReturnDetails[i].LargeUnit:''##}else{##=ReturnDetails[i].Unit?ReturnDetails[i].Unit:''##}#", description: $filter('translate')('label_Product_Unit')
                         }, {
                             value: "{So_Luong}", text: "#=formatNumber(ReturnDetails[i].Quantity)#", description: $filter('translate')('label_Quantity')
                         },{
                             value: "{Don_Gia}", text: "#=formatNumber(ReturnDetails[i].Price)#", description: $filter('translate')('label_Price')
                         },{
                             value: "{Thanh_Tien_Hang_Hoa}", text: "#=formatNumber(ReturnDetails[i].Price * ReturnDetails[i].Quantity)#", description: $filter('translate')('label_TotalLineItem')
                         }, {
                             value: "{Begin}", text: "#for (var i = 0; i < ReturnDetails.length; i++) { #"
                         }, {
                             value: "{End}", text: "# } #"
                         }

                     ];
                     kendoToken[6] = [

                         {
                             value: "{Ten_Cua_Hang}", text: "#= data.CurrentRetailer.Name#", description: $filter('translate')('label_Retailer_Name')
                         }, {
                             value: "{Dia_Chi_Cua_Hang}", text: "#if(data.CurrentRetailer.Address){##=CurrentRetailer.Address##}#", description: $filter('translate')('label_Retailer_Address')
                         }, {
                             value: "{Dien_Thoai_Cua_Hang}", text: "#= data.CurrentRetailer.Phone#", description: $filter('translate')('label_Retailer_Phone')
                         }, {
                             value: "{Logo_50_50}", text: '<img src="#= data.CurrentRetailer.Logo#" style="width: 50px;"/>', description: 'Logo 50px'
                         }
                     , {
                         value: "{Logo_100_100}", text: '<img src="#= data.CurrentRetailer.Logo#" style="width: 100px;"/>', description: 'Logo 100px'
                     }
                     , {
                         value: "{Logo_200_200}", text: '<img src="#= data.CurrentRetailer.Logo#" style="width: 200px;"/>', description: 'Logo 200px'
                     },
                         {
                             value: "{Ten_Chi_Nhanh}", text: "#if(data.CurrentBranch && data.CurrentBranch.Name){##=CurrentBranch.Name##}#", description: $filter('translate')('label_Branch_Name')
                         }
                     , {
                         value: "{Dia_Chi_Chi_Nhanh}", text: "#if(data.CurrentBranch && data.CurrentBranch.Address){##=CurrentBranch.Address##}#", description: $filter('translate')('label_Branch_Address')
                     }
                     , {
                         value: "{Dien_Thoai_Chi_Nhanh}", text: "#if(data.CurrentBranch && data.CurrentBranch.Phone){##=CurrentBranch.Phone##}#", description: $filter('translate')('label_Branch_Phone')
                     }

                     , {
                         value: "{Ngay}", text: "#if (data.DocumentDate) {# #=kendo.toString(kendo.parseDate(DocumentDate),\"dd\")# #}#", description: $filter('translate')('label_Day')
                     }
                     , {
                         value: "{Thang}", text: "#if (data.DocumentDate) {# #=kendo.toString(kendo.parseDate(DocumentDate),\"MM\")# #}#", description: $filter('translate')('label_Month')
                     }
                     , {
                         value: "{Nam}", text: "#if (data.DocumentDate) {# #=kendo.toString(kendo.parseDate(DocumentDate),\"yyyy\")# #}#", description: $filter('translate')('label_Year')
                     }
                     , {
                         value: "{Gio}", text: "#if (data.DocumentDate) {# #=kendo.toString(kendo.parseDate(DocumentDate),\"HH\")# #}#", description: $filter('translate')('label_Hour')
                     }
                     , {
                         value: "{Phut}", text: "#if (data.DocumentDate) {# #=kendo.toString(kendo.parseDate(DocumentDate),\"mm\")# #}#", description: $filter('translate')('label_Minute')
                     }
                     
                     , {
                         value: "{Ma_Chung_Tu}", text: '#if(data.Code){##=data.Code##}else{##="Phiếu tạm tính"##}#', description: $filter('translate')('label_DocumentCode')
                     }, {
                         value: "{Ngay_Giao_Hang}", text: "#if (data.DeliveryDate) {# #=kendo.toString(kendo.parseDate(DeliveryDate),\"dd-MM-yyyy HH:mm\")# #}#", description: $filter('translate')('label_DeliveryDate')
                     }, {
                         value: "{Ghi_Chu}", text: "#if(data.Description){# #=Description#  #}#", description: $filter('translate')('label_Description')
                     }
                     , {
                         value: "{Ma_NCC}", text: "#if(data.Partner &&data.Partner.Code){##=Partner.Code##}#", description: $filter('translate')('label_Supplier_Code')
                     }
                     , {
                         value: "{MST_NCC}", text: "#if(data.Partner &&data.Partner.TaxCode){##=Partner.TaxCode##}#", description: $filter('translate')('label_Partner_TaxCode')
                     }, {
                         value: "{Ten_NCC}", text: "#if(data.Partner &&data.Partner.Name ){##=Partner.Name##}#", description: $filter('translate')('label_Name')
                     }, {
                         value: "{Dia_Chi_NCC}", text: "#if(data.Partner &&data.Partner.Address){##=Partner.Address##}#", description: $filter('translate')('label_Address')
                     }, {
                         value: "{Dien_Thoai_NCC}", text: "#= (data.Partner && data.Partner.Phone)?Partner.Phone:''#", description: $filter('translate')('label_Phone')
                     }, {
                         value: "{Du_No}", text: "#if(data.Partner &&data.Partner.Debt != undefined){##=formatNumber(Partner.Debt)##}else{##='0'##}#", description: $filter('translate')('label_Debt')
                     },
                     {
                         value: "{Tong_Truoc_Chiet_Khau}", text: "#if(data.Total){##=formatNumber(Total + (data.Discount?Discount:0))##}#", description: $filter('translate')('label_SubTotal')
                     }, {
                         value: "{Chiet_Khau}", text: "#if(data.Discount){##=formatNumber(Discount)##}#", description: $filter('translate')('label_Discount')
                         }, {
                         value: "{VAT}", text: "#if(data.VAT){##=formatNumber(VAT)##}#", description: 'VAT'
                         }, {
                         value: "{Tong_Cong}", text: "#if(data.Total){##=formatNumber(Total)##}#", description: $filter('translate')('label_Total')
                     }, {
                         value: "{Tong_Cong_Bang_Chu}", text: "<em>#=DocTienBangChu(Math.abs(Total))# đồng chẵn</em>", description: $filter('translate')('label_Inwords')
                     }
                     , {
                         value: "{Tong_Thanh_Toan}", text: "#if(data.TotalPayment){##=formatNumber(data.TotalPayment)##}#", description: $filter('translate')('label_TotalPayment')
                     }
                     , {
                         value: "{Tong_So_Luong}", text: "#var tq= 0# #for(var ndx= 0; ndx< PurchaseOrderDetails.length; ndx++){# #tq+= PurchaseOrderDetails[ndx].Quantity# #}# #=formatNumber(tq)#", description: $filter('translate')('label_TotalQuantity')
                     }, {
                         value: "{No_Don_Hang}", text: "#if(data.TotalPayment){##=formatNumber(Total - TotalPayment)##}else{# #=formatNumber(Total)# #}#", description: $filter('translate')('label_DebtInvoice')
                     }, {
                         value: "{STT}", text: "#=i + 1#", description: $filter('translate')('label_Index')
                     },
                     {
                         value: "{Ma_Hang_Hoa}", text: "#=PurchaseOrderDetails[i].Code#", description: $filter('translate')('label_Product_Code')
                     },
                     {
                         value: "{Ma_Hang_Hoa_2}", text: "#=PurchaseOrderDetails[i].Code2#", description: $filter('translate')('label_Product_Code')+' 2'
                     }
                     ,
                     {
                         value: "{Ma_Hang_Hoa_3}", text: "#=PurchaseOrderDetails[i].Code3#", description: $filter('translate')('label_Product_Code') + ' 3'
                     },
                     {
                         value: "{Ma_Hang_Hoa_4}", text: "#=PurchaseOrderDetails[i].Code4#", description: $filter('translate')('label_Product_Code') + ' 4'
                     },
                     {
                         value: "{Ma_Hang_Hoa_5}", text: "#=PurchaseOrderDetails[i].Code5#", description: $filter('translate')('label_Product_Code') + ' 5'
                     },
                     {
                         value: "{Ten_Hang_Hoa}", text: "#=PurchaseOrderDetails[i].Name#", description: $filter('translate')('label_Product_Name')
                     }, {
                         value: "{So_Lo_Hang_Hoa}", text: "#=PurchaseOrderDetails[i].SerialNumbers ? PurchaseOrderDetails[i].SerialNumbers :''#", description: $filter('translate')('label_Product_SerialNumbers')
                     }, {
                         value: "{HSD_Hang_Hoa}", text: '#=PurchaseOrderDetails[i].ExpiryDate ? kendo.toString(kendo.parseDate(PurchaseOrderDetails[i].ExpiryDate),"dd-MM-yyyy") :""#', description: $filter('translate')('label_ExpirationDate')
                     }
                         , {
                             value: "{Ghi_Chu_Hang_Hoa}", text: "#= PurchaseOrderDetails[i].Description?PurchaseOrderDetails[i].Description:''#", description: $filter('translate')('label_Product_Note')
                         }, {
                             value: "{DVT_Hang_Hoa}", text: "#if(PurchaseOrderDetails[i].IsLargeUnit){##=PurchaseOrderDetails[i].LargeUnit?PurchaseOrderDetails[i].LargeUnit:''##}else{##=PurchaseOrderDetails[i].Unit?PurchaseOrderDetails[i].Unit:''##}#", description: $filter('translate')('label_Product_Unit')
                         }, {
                             value: "{So_Luong}", text: "#=formatNumber(PurchaseOrderDetails[i].Quantity)#", description: $filter('translate')('label_Quantity')
                         }, {
                             value: "{So_Luong_Dat}", text: "#=formatNumber(PurchaseOrderDetails[i].OrderQuantity)#", description: 'Số lượng đặt'
                         }, {
                             value: "{So_Luong_Chenh_Lech}", text: "#=formatNumber(PurchaseOrderDetails[i].OrderQuantity-PurchaseOrderDetails[i].Quantity)#", description: 'Số lượng chênh lệch'
                         }, {
                             value: "{So_Luong_Nhan}", text: "#if(data.Status===2){##=formatNumber(PurchaseOrderDetails[i].Quantity)##}else{}#", description: $filter('translate')('label_Quantity')+'('+$filter('translate')('label_PurchaseOrderConfirm')+')'
                         }, {
                             value: "{Ton_Kho}", text: "#=formatNumber(PurchaseOrderDetails[i].OnHand)#", description: $filter('translate')('label_Product_OnHand')
                         },
                         {
                             value: "{Don_Gia}", text: "#=formatNumber(PurchaseOrderDetails[i].Price)#", description: $filter('translate')('label_Price')
                         },
                         {
                             value: "{Thanh_Tien_Hang_Hoa}", text: "#=formatNumber((PurchaseOrderDetails[i].Price - (data.PurchaseOrderDetails[i].Discount?PurchaseOrderDetails[i].Discount:0)) * PurchaseOrderDetails[i].Quantity)#", description: $filter('translate')('label_TotalLineItem')
                         },
                         {
                             value: "{Begin}", text: "#for (var i = 0; i < PurchaseOrderDetails.length; i++) { #", description: null
                         }, {
                             value: "{End}", text: "# } #", description: null
                         }

                     ];
                     kendoToken[7] = [{
                         value: "{Ten_Cua_Hang}", text: "#= data.CurrentRetailer.Name#", description: $filter('translate')('label_Retailer_Name')
                     }, {
                         value: "{Dia_Chi_Cua_Hang}", text: "#= data.CurrentRetailer.Address#", description: $filter('translate')('label_Retailer_Address')
                     }, {
                         value: "{Dien_Thoai_Cua_Hang}", text: "#= data.CurrentRetailer.Phone#", description: $filter('translate')('label_Retailer_Phone')
                     }, {
                         value: "{Logo_50_50}", text: '<img src="#= data.CurrentRetailer.Logo#" style="width: 50px;"/>', description: 'Logo 50px'
                     }
                     , {
                         value: "{Logo_100_100}", text: '<img src="#= data.CurrentRetailer.Logo#" style="width: 100px;"/>', description: 'Logo 100px'
                     }, {
                         value: "{Ten_Chi_Nhanh}", text: "#if(data.CurrentBranch && data.CurrentBranch.Name){##=CurrentBranch.Name##}#", description: $filter('translate')('label_Branch_Name')
                     }
                     , {
                         value: "{Dia_Chi_Chi_Nhanh}", text: "#if(data.CurrentBranch && data.CurrentBranch.Address){##=CurrentBranch.Address##}#", description: $filter('translate')('label_Branch_Address')
                     }
                     , {
                         value: "{Dien_Thoai_Chi_Nhanh}", text: "#if(data.CurrentBranch && data.CurrentBranch.Phone){##=CurrentBranch.Phone##}#", description: $filter('translate')('label_Branch_Phone')
                     }

                     , {
                         value: "{Ngay}", text: "#if (data.DocumentDate) {# #=kendo.toString(kendo.parseDate(DocumentDate),\"dd\")# #}#", description: $filter('translate')('label_Day')
                     }
                     , {
                         value: "{Thang}", text: "#if (data.DocumentDate) {# #=kendo.toString(kendo.parseDate(DocumentDate),\"MM\")# #}#", description: $filter('translate')('label_Month')
                     }
                     , {
                         value: "{Nam}", text: "#if (data.DocumentDate) {# #=kendo.toString(kendo.parseDate(DocumentDate),\"yyyy\")# #}#", description: $filter('translate')('label_Year')
                     }
                     , {
                         value: "{Gio}", text: "#if (data.DocumentDate) {# #=kendo.toString(kendo.parseDate(DocumentDate),\"HH\")# #}#", description: $filter('translate')('label_Hour')
                     }
                     , {
                         value: "{Phut}", text: "#if (data.DocumentDate) {# #=kendo.toString(kendo.parseDate(DocumentDate),\"mm\")# #}#", description: $filter('translate')('label_Minute')
                     }
                     , {
                         value: "{Ma_Chung_Tu}", text: "#=data.Code#", description: $filter('translate')('label_DocumentCode')
                     }, {
                         value: "{Ghi_Chu}", text: "#if(data.Description){# #=Description#  #}#", description: $filter('translate')('label_Description')
                     }
                     
                     , {
                         value: "{Kho_Chuyen}", text: "#if(data.Branch &&data.Branch.Name){##=Branch.Name##}#", description: $filter('translate')('label_Transfer_Sender')
                     }, {
                         value: "{Kho_Nhan}", text: "#if(data.Branch1 &&data.Branch1.Name ){##=Branch1.Name##}#", description: $filter('translate')('label_Transfer_Receive')
                     }
                     , {
                         value: "{Tong_So_Luong}", text: "#var tq= 0# #for(var ndx= 0; ndx< TransferDetails.length; ndx++){# #tq+= TransferDetails[ndx].Quantity# #}# #=formatNumber(tq)#", description: $filter('translate')('label_TotalQuantity')
                     }, {
                         value: "{Tong_Gia_Tri}", text: "#=formatNumber(data.TransferDetails.reduce(function(aa, bb) { return aa + (bb.Price*bb.Quantity); }, 0))#", description: 'Tổng giá trị'
                     }, {
                         value: "{STT}", text: "#=i + 1#", description: $filter('translate')('label_Index')
                     },
                         {
                             value: "{Ma_Hang_Hoa}", text: "#=TransferDetails[i].Code#", description: $filter('translate')('label_Product_Code')
                         },
                         {
                             value: "{Ten_Hang_Hoa}", text: "#=TransferDetails[i].Name#", description: $filter('translate')('label_Product_Name')
                         }, {
                             value: "{So_Lo_Hang_Hoa}", text: "#=TransferDetails[i].SerialNumbers ? TransferDetails[i].SerialNumbers :''#", description: $filter('translate')('label_Product_SerialNumbers')
                         }, {
                             value: "{HSD_Hang_Hoa}", text: '#=TransferDetails[i].ExpiryDate ? kendo.toString(kendo.parseDate(TransferDetails[i].ExpiryDate),"dd-MM-yyyy") :""#', description: $filter('translate')('label_ExpirationDate')
                         }, {
                             value: "{Ghi_Chu_Hang_Hoa}", text: "#= TransferDetails[i].Description?TransferDetails[i].Description:''#", description: $filter('translate')('label_Product_Note')
                         }, {
                             value: "{DVT_Hang_Hoa}", text: "#if(TransferDetails[i].IsLargeUnit){##=TransferDetails[i].LargeUnit?TransferDetails[i].LargeUnit:''##}else{##=TransferDetails[i].Unit?TransferDetails[i].Unit:''##}#", description: $filter('translate')('label_Product_Unit')
                         }, {
                             value: "{So_Luong}", text: "#=formatNumber(TransferDetails[i].Quantity)#", description: $filter('translate')('label_Quantity')
                         }, {
                             value: "{Don_Gia}", text: "#=formatNumber(TransferDetails[i].Price)#", description: $filter('translate')('label_Price')
                         }, {
                             value: "{Thanh_Tien_Hang_Hoa}", text: "#=formatNumber(TransferDetails[i].Price * TransferDetails[i].Quantity)#", description: $filter('translate')('label_TotalLineItem')
                         }, {
                             value: "{Begin}", text: "#for (var i = 0; i < TransferDetails.length; i++) { #"
                         }, {
                             value: "{End}", text: "# } #"
                         }

                     ];
                     kendoToken[9] = kendoToken[6];
                     function getDefaultTemplateFile(type) {
                         if (type === 1)
                             return 'order.html';
                         else if (type === 2)
                             return 'ordera4.html';
                         else if (type === 3)
                             return 'receiptvoucher.html';
                         else if (type === 4)
                             return 'paymentvoucher.html';
                         else if (type === 5)
                             return 'return.html';
                         else if (type === 6)
                             return 'purchaseorder.html';
                         else if (type === 7)
                             return 'transfer.html';
                         else if (type === 8)
                             return 'onorder.html';
                         else if (type === 9)
                             return 'purchaseorderconfirm.html';
                         return null;
                     }
                     function getTokenDescription(type) {
                         return kendoToken[type];
                     }
                     function getTemplate(type, callback) {
                         _PrintTemplateResource.get({
                                                        type: type
                                                    }, function (data) {
                                                        if (data && data.Id) {
                                                            callback(data);
                                                        } else {
                                                            var templateUrl = $sce.getTrustedResourceUrl('/template/print/' + getDefaultTemplateFile(type));

                                                            $templateRequest(templateUrl).then(function (tmp) {
                                                                var returnData = {Content:tmp,Id:0,RetailerId:_session.retailer.Id};
                                                                callback(returnData);
                                                            }, function (error) {
                                                                $scope.posnotification.show(error, "error");
                                                            })
                                                        }
                                                    }, function (err) {
                                                        $scope.posnotification.show(getMessage(error), "error");
                                                    });
                     }
                     function parsingTemplates(html, type, data) {
                         try {
                             if (typeof data.MoreAttributes !== 'undefined' && typeof (data.MoreAttributes) !== 'object' && data.MoreAttributes) {
                                     data.MoreAttributes = JSON.parse(data.MoreAttributes);
                                 if (!data.MoreAttributes.OldDebt) {
                                     data.MoreAttributes.OldDebt = 0;
                                 }
                             } else {
                                 if (!data.MoreAttributes.OldDebt) {
                                     data.MoreAttributes.OldDebt = 0;
                                 }
                             }
                             
                         } catch (e) {
                             data.MoreAttributes = { OldDebt: 0 };
                         }
                         html = html.replaceAll('#', '\\\\#').replaceAll('\'', '\\\\\'');
                         html = getKendoTemplate(html, type);
                         html = kendo.template(html)(data);
                         if ((type === 1 || type === 2) && data.QRCode) {
                             if (_session.retailer.Id == 15975) {
                                 var qrCodeSRC = '<div style="display:flex;align-items:center;justify-content:center;width:76mm"><img src="' + showQRCode(data.QRCode) + '" style="width: 40mm;"/></div><div style="text-align:center;"><strong><span style="font-size:11px;">QRCODE|POS365.VN|VNPAY</span></strong></div>';
                                 html += qrCodeSRC;
                             } else {
                                 var qrCodeSRC = '<div style="display:flex;align-items:center;justify-content:center;"><img src="' + showQRCode(data.QRCode) + '" style="width: 150px;"/></div><div style="text-align:center;"><strong><span style="font-size:11px;">QRCODE|POS365.VN|VNPAY</span></strong></div>';
                                 html += qrCodeSRC;
                             }
                             
                         }
                         return html;
                     }
                     function printHtml(html, type, data, popTitle) {
                         if ((type === 1 || type === 2 || type === 8) && data.Partner && data.Partner.LeadOwnerId) {
                             for (var key in _session.auditusers) {
                                 if (data.Partner.LeadOwnerId == key) {
                                     data.Partner.LeadOwnerName = _session.auditusers[key];
                                     break;
                                 }
                             }
                         }
                         var content = parsingTemplates(html, type, data);
                         if (isMobile()) {
                             $.fn.printText(content, {
                                                mode: "popup",
                                                popTitle: popTitle
                                            });
                         } else {
                             $.fn.printText(content, {
                                                popTitle: popTitle
                                            });
                         }
                     }
                     function print(html, popTitle) {
                         if (isMobile()) {
                             $.fn.printText(html, {
                                 mode: "popup",
                                 popTitle: popTitle
                             });
                         } else {
                             $.fn.printText(html, {
                                 popTitle: popTitle
                             });
                         }
                     }
                     function getKendoTemplate(text, type) {
                         var _kendo = kendoToken[type];
                         var kendoTemplate = processTable(text);
                         if (kendoTemplate != null && _kendo != null)
                             for (var i = 0; i < _kendo.length; i++) {
                                 kendoTemplate = kendoTemplate.replaceAll(_kendo[i].value, _kendo[i].text);
                             }
                         return kendoTemplate;
                     }
                     function processTable(kendoTemplate) {
                         var index = kendoTemplate.indexOf("{Ten_Hang_Hoa");
                         if (index < 0)
                             index = kendoTemplate.indexOf("{Ma_Hang_Hoa}");
                         if (index < 0)
                             return kendoTemplate;
                         var first = -1;
                         var last = -1;
                         for (var i = index; i >= 0; i--)
                             if (kendoTemplate.substring(i, i + 3) == '<tr') {
                                 first = i;
                                 break;
                             }
                         for (var i = index; i <= kendoTemplate.length; i++) {
                             if (kendoTemplate.substring(i, i + 5) == '</tr>') {
                                 last = i + 12;
                             }
                             if (kendoTemplate.substring(i, i + 8) == '</table>')
                                 break;
                         }

                         if (first >= 0 && last >= 0) {
                             kendoTemplate = [kendoTemplate.slice(0, first), "{Begin}", kendoTemplate.slice(first)].join('');
                             kendoTemplate = [kendoTemplate.slice(0, last), "{End}", kendoTemplate.slice(last)].join('');
                         }
                         return kendoTemplate;
                     }
                     return posPrint;
                 }
             ])
    .factory('PrivilegeHelper', [
                 'privileges', 'UserResource', 'posSession', function (privileges, _users, _session) {
                     return {
                         isadmin: function () {
                             return privileges.admin;
                         },
                         refresh: function (callback) {
                              _users.getPrivileges({ userId: _session.user.id, BranchId: _session.branch.id }, function (data) {
                                  privileges.rights = data.Data;
                                  if(typeof(callback)==='function')
                                    callback(data.Data);
                             });
                         },
                         hasAny: function (plist) {
                             if (privileges.admin) {
                                 return true;
                             } else {
                                 for (var i = 0 ; i < plist.length; i++) {
                                     if (this.has(plist[i]))
                                         return true;
                                 }
                                 return false;
                             }
                             
                         },
                         has: function (p) {
                             if (privileges.admin) {
                                 return true;
                             } else {
                                 return !!privileges.rights[p];
                             }
                         },
                         getRights: function () {
                             return privileges.rights;
                         }
                     };
                 }
             ])
    .factory('authHttpResponseInterceptor', [
                 '$q', 'posSession', '$filter', function ($q, _session, $filter) {
                     return {
                         response: function (response) {
                            
                             if (response.status === 401) {
                                 var popupNotification = $("#popupNotification").kendoNotification().data("kendoNotification");
                                 popupNotification.show($filter('translate')('label_SessionTimeOut'), "error")
                                 window.location.href = _session.loginUrl;
                             }
                             if (response.status === 511) {
                                 var popupNotification = $("#popupNotification").kendoNotification().data("kendoNotification");
                                 popupNotification.show($filter('translate')('message_Firewall'), "error")
                             }
                             return response || $q.when(response);
                         },
                         responseError: function (rejection) {
                             if (rejection.status === 401) {
                                 var popupNotification = $("#popupNotification").kendoNotification().data("kendoNotification");
                                 popupNotification.show($filter('translate')('label_SessionTimeOut'), "error")
                                 window.location.href = _session.loginUrl;
                             }
                             if (rejection.status === 511) {
                                 var popupNotification = $("#popupNotification").kendoNotification().data("kendoNotification");
                                 popupNotification.show($filter('translate')('message_Firewall'), "error")
                             }
                             return $q.reject(rejection);
                         }
                     }
                 }
    ]);
;
function execCb(callback) {
    //console.log(arguments);
    if (callback && typeof callback == 'function') {
        if (arguments)
            callback.apply(null, Array.prototype.slice.call(arguments, 1));
        else
            callback();
    }
}
function refresh($scope) {
    if (!$scope || !$scope.$root) return;
    if (!($scope.$$phase) && !($scope.$root.$$phase)) $scope.$apply();
}
function getMessage(err) {
    if (err.data && err.data.ResponseStatus) {
        return (err.data.ResponseStatus.Message);
    }
    else if (err.data && typeof (err.data) == 'string') {
        return (err.data);
    }
    else if (err.message) {
        return err.message;
    }
    else {
        return '';
    }
}
function getDefaultImage(images,issmall) {
    if (images && images.length > 0) {
        var exists = $.grep(images, function (item) {
            return item.IsDefault;
        });
        if (exists && exists.length > 0) return exists[0].ThumbnailUrl;
        else return images[0].ThumbnailUrl;
    } else {
        if (issmall) {
            return '';
        } else {
            return 'https://docs.google.com/uc?id=0B0kuvBxLBrKiX2pWT0RoOV9RcTA&export=view';
        }

    }
}
function getDefaultPartnerImage(images) {
    if (images) {
        return images;
    } else {
        return 'https://docs.google.com/uc?id=0B0kuvBxLBrKiY3ZCWWJNbmJmNXM&export=view';


    }
}
Date.prototype.getUTCDateTime = function() {
    var zf = function(num) {
            return ((num + 100) + '').substr(1);
        };

    return "datetime'" + [
		this.getUTCFullYear(),
		'-',
		zf(this.getUTCMonth() + 1),
		'-',
		zf(this.getUTCDate()),
		'T',
		zf(this.getUTCHours()),
		':',
		zf(this.getUTCMinutes()),
		':',
		zf(this.getUTCSeconds()),
		'Z'
    ].join('') + "'";
};
Date.prototype.getClearUTCDateTime = function () {
    var zf = function (num) {
        return ((num + 100) + '').substr(1);
    };

    return [
		this.getUTCFullYear(),
		'-',
		zf(this.getUTCMonth() + 1),
		'-',
		zf(this.getUTCDate()),
		'T',
		zf(this.getUTCHours()),
		':',
		zf(this.getUTCMinutes()),
		':',
		zf(this.getUTCSeconds()),
		'Z'
    ].join('');
};
Date.prototype.DateAdd = function (intval) {
    var d = new Date(this.getFullYear(), this.getMonth(), this.getDate() + intval);
    d.setHours(this.getHours(), this.getMinutes(), this.getSeconds(), this.getMilliseconds());
    return d; 
};

Date.prototype.MonthAdd = function (change) {
    var d = new Date(this.getFullYear(), this.getMonth() + change, this.getDate());
    if (d.getDate() !== this.getDate() && d.getMonth() !== (this.getMonth() + change)) {
        d.setDate(0);       
    }
    d.setHours(this.getHours(), this.getMinutes(), this.getSeconds(), this.getMilliseconds());
    return d; 
}

var ChuSo = new Array(" không ", " một ", " hai ", " ba ", " bốn ", " năm ", " sáu ", " bảy ", " tám ", " chín ");
var Tien = new Array("", " nghìn", " triệu", " tỷ", " nghìn tỷ", " triệu tỷ");
//1. Hàm đọc số có ba chữ số;
function DocSo3ChuSo(baso) {
    var tram;
    var chuc;
    var donvi;
    var KetQua = "";
    tram = parseInt(baso / 100);
    chuc = parseInt((baso % 100) / 10);
    donvi = baso % 10;
    if (tram == 0 && chuc == 0 && donvi == 0) return "";
    if (tram != 0) {
        KetQua += ChuSo[tram] + " trăm ";
        if ((chuc == 0) && (donvi != 0)) KetQua += " linh ";
    }
    if ((chuc != 0) && (chuc != 1)) {
        KetQua += ChuSo[chuc] + " mươi";
        if ((chuc == 0) && (donvi != 0)) KetQua = KetQua + " linh ";
    }
    if (chuc == 1) KetQua += " mười ";
    switch (donvi) {
        case 1:
            if ((chuc != 0) && (chuc != 1)) {
                KetQua += " mốt ";
            }
            else {
                KetQua += ChuSo[donvi];
            }
            break;
        case 5:
            if (chuc == 0) {
                KetQua += ChuSo[donvi];
            }
            else {
                KetQua += " lăm ";
            }
            break;
        default:
            if (donvi != 0) {
                KetQua += ChuSo[donvi];
            }
            break;
    }
    return KetQua;
}
//2. Hàm đọc số thành chữ (Sử dụng hàm đọc số có ba chữ số)
function DocTienBangChu(SoTien) {
    var lan = 0;
    var i = 0;
    var so = 0;
    var KetQua = "";
    var tmp = "";
    var ViTri = new Array();
    if (SoTien < 0) return "Số tiền âm";
    if (SoTien == 0) return "Không";
    if (SoTien > 0) {
        so = SoTien;
    }
    else {
        so = -SoTien;
    }
    if (SoTien > 8999999999999999) {
        //SoTien = 0;
        return "Số quá lớn!";
    }
    ViTri[5] = Math.floor(so / 1000000000000000);
    if (isNaN(ViTri[5]))
        ViTri[5] = "0";
    so = so - parseFloat(ViTri[5].toString()) * 1000000000000000;
    ViTri[4] = Math.floor(so / 1000000000000);
    if (isNaN(ViTri[4]))
        ViTri[4] = "0";
    so = so - parseFloat(ViTri[4].toString()) * 1000000000000;
    ViTri[3] = Math.floor(so / 1000000000);
    if (isNaN(ViTri[3]))
        ViTri[3] = "0";
    so = so - parseFloat(ViTri[3].toString()) * 1000000000;
    ViTri[2] = parseInt(so / 1000000);
    if (isNaN(ViTri[2]))
        ViTri[2] = "0";
    ViTri[1] = parseInt((so % 1000000) / 1000);
    if (isNaN(ViTri[1]))
        ViTri[1] = "0";
    ViTri[0] = parseInt(so % 1000);
    if (isNaN(ViTri[0]))
        ViTri[0] = "0";
    if (ViTri[5] > 0) {
        lan = 5;
    }
    else if (ViTri[4] > 0) {
        lan = 4;
    }
    else if (ViTri[3] > 0) {
        lan = 3;
    }
    else if (ViTri[2] > 0) {
        lan = 2;
    }
    else if (ViTri[1] > 0) {
        lan = 1;
    }
    else {
        lan = 0;
    }
    for (i = lan; i >= 0; i--) {
        tmp = DocSo3ChuSo(ViTri[i]);
        KetQua += tmp;
        if (ViTri[i] > 0) KetQua += Tien[i];
        if ((i > 0) && (tmp.length > 0)) KetQua += ',';//&& (!string.IsNullOrEmpty(tmp))
    }
    if (KetQua.substring(KetQua.length - 1) == ',') {
        KetQua = KetQua.substring(0, KetQua.length - 1);
    }
    KetQua = KetQua.substring(1, 2).toUpperCase() + KetQua.substring(2);
    return KetQua.replace(/,/g, '');//.substring(0, 1);//.toUpperCase();// + KetQua.substring(1);
}
if (!Array.prototype.filter) {
    Array.prototype.filter = function (fun /*, thisp*/) {
        var len = this.length >>> 0;
        if (typeof fun != "function")
            throw new TypeError();

        var res = [];
        var thisp = arguments[1];
        for (var i = 0; i < len; i++) {
            if (i in this) {
                var val = this[i]; // in case fun mutates this
                if (fun.call(thisp, val, i, this))
                    res.push(val);
            }
        }
        return res;
    };
}

/**
 * Convert a hierarchy from flat to nested representation.
 *
 * @param {array} flat The array with the hierachy flat representation.
 */
function FlatToNestedConvert(flat) {
    this.config = {};
    this.config.id = config.id || 'id';
    this.config.parent = config.parent || 'parentid';
    this.config.children = config.children || 'items';
    this.config.options = config.options || { deleteParent: true };
    var i, len, temp, roots, id, parent, nested, pendingChildOf, flatEl;
    i = 0;
    roots = [];
    temp = {};
    pendingChildOf = {};

    for (i, len = flat.length; i < len; i++) {
        flatEl = flat[i];
        id = flatEl[this.config.id];
        parent = flatEl[this.config.parent];
        temp[id] = flatEl;
        if (parent === undefined || parent === null) {
            // Current object has no parent, so it's a root element.
            roots.push(flatEl);
        } else {
            if (temp[parent] !== undefined) {
                // Parent is already in temp, adding the current object to its children array.
                initPush(this.config.children, temp[parent], flatEl);
            } else {
                // Parent for this object is not yet in temp, adding it to pendingChildOf.
                initPush(parent, pendingChildOf, flatEl);
            }
            if (this.config.options.deleteParent) {
                delete flatEl[this.config.parent];
            }
        }
        if (pendingChildOf[id] !== undefined) {
            // Current object has children pending for it. Adding these to the object.
            multiInitPush(this.config.children, flatEl, pendingChildOf[id]);
        }
    }

    if (roots.length === 1) {
        nested = roots[0];
    } else if (roots.length > 1) {
        nested = {};
        nested[this.config.children] = roots;
    } else {
        nested = {};
    }
    return nested;
};

function initPush(arrayName, obj, toPush) {
    if (obj[arrayName] === undefined) {
        obj[arrayName] = [];
    }
    obj[arrayName].push(toPush);
}

function multiInitPush(arrayName, obj, toPushArray) {
    var len;
    len = toPushArray.length;
    if (obj[arrayName] === undefined) {
        obj[arrayName] = [];
    }
    while (len-- > 0) {
        obj[arrayName].push(toPushArray.shift());
    }
}
function utf8_to_b64(str) {
    try {
        return window.btoa(unescape(encodeURIComponent(str)));
    } catch (e) {
        return str;
    }

}
function b64_to_utf8(str) {
    try {
        return decodeURIComponent(escape(window.atob(str)));
    } catch (e) {
        return str;
    }

}
;
(function () {
    'use strict'
    if (window.localStorage) {
        var config = angular.module('pos.session', []);
        var currentSession = JSON.parse(localStorage['pos_session']);

        if (localStorage['pos_privileges']) {
            var privileges = JSON.parse(localStorage['pos_privileges']);
            config.value('privileges', privileges);
        }
        if (localStorage['pos_settings']) {
            var posSetting = JSON.parse(localStorage['pos_settings']);
            config.value('posSettings', posSetting);
        }
        if (localStorage['pos_printerserver']) {
            printerServer= localStorage['pos_printerserver'];
        } else {
            printerServer = 'localhost';
        }
        currentSession.partialPath = function (name, dir) {
            if (!dir)
                dir = 'vendor';

            return currentSession.partialBase + dir + '/partial/' + name;
        };
        config.value('posSession', currentSession);
    }
})();;
'use strict'
var indexedDBName = "365-IndexedDB-";
var applicationVersion = 3652412;
var server;
function getId() {
    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {
        var r = Math.random() * 16 | 0, v = c == 'x' ? r : (r & 0x3 | 0x8);
        return v.toString(16);
    });
};
var App = angular.module('pos.sell', ['pos.session', 'pos.services', 'pos.dataservices', 'ngCookies', 'kendo.directives', 'pos.filters', 'pascalprecht.translate', 'ngSanitize', 'angularMoment', 'pos.ui.numeric', 'ui.bootstrap.bindHtml', 'ui.bootstrap.position', 'ui.bootstrap.tooltip', 'ui.bootstrap.popover', 'ui.bootstrap.tabs', 'ui.bootstrap.modal', 'ui.bootstrap.collapse', 'ui.bootstrap.accordion', 'ui.bootstrap.typeahead', 'pos.directives', 'pos.enum', 'mj.scrollingTabs', 'rt.debounce', 'txx.diacritics', 'cfp.hotkeys',  'angularLazyImg'])
    .config([
                '$httpProvider',function($httpProvider) {
                    //Http Intercpetor to check auth failures for xhr requests
                    $httpProvider.interceptors.push('authHttpResponseInterceptor');
                }
            ])
    .controller('SellCtrl', [
                    '$rootScope', '$scope', 'posSession', '$http', 'CommonServices', '$filter', '$translate', '$modal', 'posSettings', 'OrderState', 'OrderStateMap', 'ConfirmDialog', 'posPrinterService', 'OrderResource', '$timeout', 'debounce', 'PriceBookResource', 'PartnerResource', 'removeDiacritics', 'hotkeys', '$interval', 'PrivilegeHelper', 'ProductResource', '$cookies', '$q', 'PartnerTypeMap', '$window', function ($rootScope, $scope, _session, $http, common, $filter, $translate, $modal, _posSettings, _OrderState, _OrderStateMap, _ConfirmDialog, _posPrinterService, _OrderResource, $timeout, debounce, _PriceBookResource, _PartnerResource, _removeDiacritics, hotkeys, $interval, _privilege, _ProductResource, $cookies, $q, _PartnerTypeMap, $window) {
                        $scope.session = _session;
                        $scope.DontSetTime = false;
                        $scope.searchType = 1;
                        $scope.numberofonorder = 0;
                        $scope.numberofoffline = 0;
                        $scope.PartnerTypeMap = _PartnerTypeMap;
                        $scope.latestvat = 0;
                        var snd = null;
                        var beep = function () {
                            try {
                                if (!snd) {
                                    snd = new Audio("data:audio/wav;base64,");
                                }
                                snd.play();
                            } catch (e) {
                            }
                        }
                        
                        $interval(function () {
                            if ($rootScope.IsOnline) {
                                $http.get('/api/orders/numberofonorder', { params: {} }).then(function (response) {
                                    if (response && response.data) {
                                        $scope.numberofonorder = response.data;
                                        if ($scope.orderingSounds)
                                            beep();
                                    } else {
                                        $scope.numberofonorder = 0;
                                    }
                                }, function (error) {
                                });
                            }
                            

                        }, 300000);

                        $scope._p = _privilege;
                        
                        
                        $scope.addDescription = function (desc, dataItem) {
                            if (!dataItem.Description) dataItem.Description = '';
                            dataItem.Description = dataItem.Description + (dataItem.Description ? ' ,' : '') + desc;
                        }
                        $('#inputtypehead').focus();
                        // when you bind it to the controller's scope, it will automatically unbind
                        // the hotkey when the scope is destroyed (due to ng-if or something that changes the DOM)
                        hotkeys.add({
                            combo: 'f1',
                            description: $filter('translate')('label_SearchProduct'),
                            allowIn: ['INPUT', 'SELECT', 'TEXTAREA'],
                            callback: function (event) {
                                $('#inputtypehead').focus();
                                event.preventDefault();
                            }
                        });
                        hotkeys.add({
                            combo: 'ctrl+s',
                            description: $filter('translate')('button_Add') + ' ' + $filter('translate')('product'),
                            allowIn: ['INPUT', 'SELECT', 'TEXTAREA'],
                            callback: function (event) {
                                
                                $scope.AddNewProduct();
                                $('#inputtypehead').focus();
                                event.preventDefault();
                            }
                        });
                        hotkeys.add({
                            combo: 'ctrl+f1',
                            description: $filter('translate')('label_SwichBalanceScale'),
                            allowIn: ['INPUT', 'SELECT', 'TEXTAREA'],
                            callback: function (event) {
                                if ($scope.searchType === 3 || $scope.searchType === 4) {
                                    $scope.searchType =1;
                                }
                                else{
                                    $scope.searchType = 4;
                                }
                                $scope.changesearchType($scope.searchType);
                                $('#inputtypehead').focus();
                                event.preventDefault();
                            }
                        });
                        hotkeys.add({
                            combo: 'f2',
                            description: $filter('translate')('label_SearchCustomer'),
                            allowIn: ['INPUT', 'SELECT', 'TEXTAREA'],
                            callback: function (event) {
                                $('#inputtypeheadpartner').focus();
                                event.preventDefault();
                            }
                        });
                        hotkeys.add({
                            combo: 'f3',
                            description: $filter('translate')('keyboardShortcuts_Print'),
                            allowIn: ['INPUT', 'SELECT', 'TEXTAREA'],
                            callback: function (event) {
                                $scope.print();
                                event.preventDefault();
                            }
                        });
                        hotkeys.add({
                            combo: 'f4',
                            description: $filter('translate')('label_Payment'),
                            allowIn: ['INPUT', 'SELECT', 'TEXTAREA'],
                            callback: function (event) {
                                $scope.save();
                                event.preventDefault();
                            }
                        });
                        hotkeys.add({
                            combo: 'f6',
                            description: $filter('translate')('label_Discount'),
                            allowIn: ['INPUT', 'SELECT', 'TEXTAREA'],
                            callback: function (event) {
                                $scope.modaPayment();
                                event.preventDefault();
                            }
                        });
                        hotkeys.add({
                            combo: 'f7',
                            description: $filter('translate')('keyboardShortcuts_AddNewCustomer'),
                            allowIn: ['INPUT', 'SELECT', 'TEXTAREA'],
                            callback: function (event) {
                                $scope.AddPartner(0);
                                event.preventDefault();
                            }
                        });
                        hotkeys.add({
                            combo: 'f8',
                            description: $filter('translate')('keyboardShortcuts_AddNewOrder'),
                            allowIn: ['INPUT', 'SELECT', 'TEXTAREA'],
                            callback: function (event) {
                                $scope.addTab();
                                event.preventDefault();
                            }
                        });
                        hotkeys.add({
                            combo: 'f10',
                            description: $filter('translate')('label_AmountReceived'),
                            allowIn: ['INPUT', 'SELECT', 'TEXTAREA'],
                            callback: function (event) {
                                $('#inputAmountReceived').focus();
                                event.preventDefault();
                            }
                        });
                        hotkeys.add({
                            combo: 'pageup',
                            description: $filter('translate')('label_FocusToQuantity'),
                            allowIn: ['INPUT', 'SELECT', 'TEXTAREA'],
                            callback: function (event) {
                                var listInput = $(".txtQuantity");
                                if (listInput && listInput.length > 0) {
                                    var nextFocus = false;
                                    var i = listInput.length - 1;
                                    while (i >= 0) {
                                        if (nextFocus) {
                                            $(listInput[i]).focus();
                                            break;
                                        }
                                        if ($(listInput[i]).is(':focus') && i !== 0) {
                                            nextFocus = true;
                                        }
                                        i--;
                                    }
                                    if (!nextFocus) {
                                        $(listInput[listInput.length - 1]).focus();
                                    }
                                }
                                event.preventDefault();
                            }
                        });
                        hotkeys.add({
                            combo: 'pagedown',
                            description: $filter('translate')('label_FocusToQuantity'),
                            allowIn: ['INPUT', 'SELECT', 'TEXTAREA'],
                            callback: function (event) {
                                var listInput = $(".txtQuantity");
                                if (listInput && listInput.length > 0) {
                                    var nextFocus = false;
                                    for (var i = 0; i < listInput.length; i++) {
                                        if (nextFocus) {
                                            $(listInput[i]).focus();
                                            break;
                                        }
                                        if ($(listInput[i]).is(':focus') && i < listInput.length - 1) {
                                            nextFocus = true;
                                        }
                                    }
                                    if (!nextFocus) {
                                        $(listInput[0]).focus();
                                    }
                                }

                                event.preventDefault();
                            }
                        });
                        hotkeys.add({
                            combo: 'ctrl+d',
                            description: $filter('translate')('menu_Processingorders'),
                            allowIn: ['INPUT', 'SELECT', 'TEXTAREA'],
                            callback: function (event) {
                                $scope.openOrder();
                                event.preventDefault();
                            }
                        });
                        $scope.togglePanelClass = 'fa fa-chevron-down';
                        $scope.togglePanel = function () {
                            if ($scope.togglePanelClass === 'fa fa-chevron-down') {
                                $scope.togglePanelClass = 'fa fa-chevron-up'
                                $('.productlist .tab-content').hide();
                                var h = $('.selltable').height();
                                if (h) {
                                    $('.selltable').css('min-height', h + 260);
                                    $('.selltable').css('max-height', h + 260);
                                }
                            } else {
                                $scope.togglePanelClass = 'fa fa-chevron-down';
                                $('.productlist .tab-content').show();
                                var h = $('.selltable').height();
                                if (h) {
                                    $('.selltable').css('min-height', h - 260);
                                    $('.selltable').css('max-height', h - 260);
                                }
                            }

                        }
                        $scope.changesearchType = function (type) {
                            $scope.searchType = type;
                            if (window.localStorage)
                                localStorage.setItem('searchType-' + _session.branch.Id, $scope.searchType);
                            if ($scope.searchType === 3) {
                                $scope.posnotification.show($filter('translate')('label_ElectronicScale'), "success");
                            } else if ($scope.searchType === 4) {
                                $scope.posnotification.show($filter('translate')('label_ElectronicScale')+ '(Checksum)', "success");
                            } else if ($scope.searchType === 2) {
                                $scope.posnotification.show($filter('translate')('label_QuickSearch'), "success");
                            } else {
                                $scope.posnotification.show($filter('translate')('label_SmartSearch'), "success");
                            }
                            $('#inputtypehead').focus();
                        }
                        $scope.toggleHelp = function () {
                            hotkeys.toggleCheatSheet();
                        };
                        $scope.changeOrderingSounds = function () {
                            $scope.orderingSounds = !$scope.orderingSounds;
                            if (window.localStorage)
                                localStorage.setItem('OrderingSounds-' + _session.branch.Id, $scope.orderingSounds);

                        }
                        $scope.dropAccountOptions = {
                            dataSource: _session.accounts,
                            dataTextField: "Name",
                            dataValueField: "Id",

                        };
                        $scope.openOrder = function (cd) {
                            var modalInstance = $modal.open({
                                backdrop: true,
                                keyboard: true,
                                modalFade: true,
                                templateUrl: _session.partialPath('open-order.html'),
                                controller: 'ProcessingOrdersCtrl',
                                size: 'lg',
                                resolve: {
                                    sender: function () {
                                        return cd;
                                    }
                                }
                            });

                            modalInstance.result.then(function (result) {
                                var existsId = null;
                                $scope.tabs.some(function __forEachTab(tab) {
                                    if (tab.id === result.Id) {
                                        existsId = tab.paneId;
                                        return true; // exit loop
                                    }
                                })
                                if (existsId)
                                    $scope.posnotification.show($filter('translate')('message_OrderIsBeingProcessed'), "error");
                                else {
                                    //Add Tab
                                    $scope.tabs.some(function __forEachTab(tab) {
                                        if (tab.active) {
                                            tab.active = false;
                                            return true; // exit loop
                                        }
                                    });
                                    _OrderResource.getDetailForEdit({
                                        OrderId: result.Id,
                                    }, function (subdata) {
                                        if (result.PurchaseDate) {
                                            result.PurchaseDate=$filter("parseDate")(result.PurchaseDate)
                                        }
                                        var newId = getId();
                                        var tmpOrder = { OfflineId: newId, SyncStatus: 0, Status: result.Status, Discount: result.Discount, TotalPayment: result.TotalPayment, Total: result.Total, OrderDetails: subdata, SoldById: result.SoldById, ExcessCashType: 0, ExcessCash: result.ExcessCash, Code: result.Code, PartnerId: result.PartnerId, PriceBookId: result.PriceBookId, AccountId: result.AccountId, Description: result.Description, PurchaseDate: result.PurchaseDate, Id: result.Id, VATRates: (result.VAT ? ($scope.settings.VAT ? $scope.settings.VAT : 10) : 0), initializingTotalPayment: false };
                                        if (tmpOrder.TotalPayment !== tmpOrder.Total) {
                                            tmpOrder.initializingTotalPayment = true;
                                        }
                                        
                                        //if (!tmpOrder.PointDiscount)
                                        //    tmpOrder.PointDiscount = 0;
                                        try {
                                            if (typeof tmpOrder.MoreAttributes !== 'undefined' && typeof (tmpOrder.MoreAttributes) !== 'object' && tmpOrder.MoreAttributes)
                                                tmpOrder.MoreAttributes = JSON.parse(tmpOrder.MoreAttributes);
                                        } catch (e) {

                                        }
                                        if (!tmpOrder.Voucher)
                                            tmpOrder.Voucher = 0;
                                        if (!tmpOrder.Discount)
                                            tmpOrder.Discount = 0;
                                        tmpOrder.DiscountValue = tmpOrder.Discount  - tmpOrder.Voucher;
                                        if (result.Partner) {
                                            tmpOrder.Partner = {
                                                Id: result.Partner.Id, Name: result.Partner.Name, Phone: result.Partner.Phone, Address: result.Partner.Address, DOB: result.Partner.DOB, Debt: result.Partner.TotalDebt};
                                        }
                                        server.Orders.add(tmpOrder).then(function (args) {
                                            $scope.tabs.push({ paneId: newId, title: null, active: true, customer: null, id: result.Id });
                                            refresh($scope);
                                        });
                                    }, function (error) {
                                        $scope.posnotification.show(getMessage(error), "error");
                                    });
                                }
                            }, function () {

                            });
                        }
                        $scope.openOffline = function () {
                            var modalInstance = $modal.open({
                                backdrop: true,
                                keyboard: true,
                                modalFade: true,
                                templateUrl: _session.partialPath('open-offline.html'),
                                controller: 'OrderOfflineCtrl',
                                size: 'lg',
                            });

                            modalInstance.result.then(function (result) {
                                var existsId = null;
                                $scope.tabs.some(function __forEachTab(tab) {
                                    if (tab.paneId === result.OfflineId) {
                                        existsId = tab.paneId;
                                        return true; // exit loop
                                    }
                                })
                                if (existsId)
                                    $scope.posnotification.show($filter('translate')('message_OrderIsBeingProcessed'), "error");
                                else {
                                    //Add Tab
                                    $scope.tabs.some(function __forEachTab(tab) {
                                        if (tab.active) {
                                            tab.active = false;
                                            return true; // exit loop
                                        }
                                    });
                                    $scope.tabs.push({ paneId: result.OfflineId, title: null, active: true, customer: null, id: result.Id })
                                    refresh($scope);
                                }
                            }, function () {

                            });
                        }
                        $scope.printLayout = 1;
                        $scope.printAfterSave = true;
                        $scope.dontprintEmptyPrice = false;
                        $scope.copyReceiptPrinting = false;
                        $scope.orderingSounds = false;
                        if (window.localStorage) {
                            var print = localStorage['Print-' + _session.branch.Id];
                            if (print)
                                $scope.printLayout = parseInt(print);
                            var pras = localStorage['PrintAfterSave-' + _session.branch.Id];
                            if (!pras || pras === 'true')
                                $scope.printAfterSave = true;
                            else
                                $scope.printAfterSave = false;

                            var pre = localStorage['PrintEmptyPrice-' + _session.branch.Id];
                            if (!pre && pre === 'true')
                                $scope.dontprintEmptyPrice = true;
                            else
                                $scope.dontprintEmptyPrice = false;
                            var cpr = localStorage['copyReceiptPrinting-' + _session.branch.Id];
                            if (cpr && cpr === 'true')
                                $scope.copyReceiptPrinting = true;
                            else
                                $scope.copyReceiptPrinting = false;
                            var sod = localStorage['OrderingSounds-' + _session.branch.Id];
                            if (sod && sod === 'true')
                                $scope.orderingSounds = true;
                            else
                                $scope.orderingSounds = false;
                            var stype = localStorage['searchType-' + _session.branch.Id];
                            if (!stype)
                                $scope.searchType = 1;
                            else
                                $scope.searchType = parseInt(stype);
                        }


                        $scope.order = { Id: 0, Status: _OrderStateMap.Completed, Discount: 0, TotalPayment: 0, Total: 0, SoldById: _session.user.Id, ExcessCashType: 0, ExcessCash: 0,initializingTotalPayment:false };
                        $scope.tabs = [];
                        $scope.currentPage = 0;
                        $scope.pageRangeCache = [];
                        $scope.pagingProductPanel = function (action) {
                            var startId = 0;
                            var customquery = server.Products.query();
                            var doquery = false;
                            if (action === 'next') {
                                if (!$scope.productsPanel || $scope.productsPanel.length === 12) {
                                    $scope.currentPage++;
                                    startId = $scope.pageRangeCache[$scope.currentPage - 1] ? $scope.pageRangeCache[$scope.currentPage - 1].maxId : 0;
                                    doquery = true;
                                }

                            } else {
                                if ($scope.currentPage > 1) {
                                    $scope.currentPage--;
                                    startId = $scope.pageRangeCache[$scope.currentPage] ? $scope.pageRangeCache[$scope.currentPage].minId : 0;
                                    doquery = true;
                                }

                            }
                            if (doquery) {
                                customquery = customquery.lowerBound(startId, true);

                                if ($scope.filterCategories && $scope.filterCategories.length > 0) {
                                    customquery = customquery.filter(function (p) { return $scope.filterCategories.indexOf(p.CategoryId) >= 0; });
                                }
                                if ($scope.productidsfilter && $scope.productidsfilter.Attributes) {
                                    var filterednames = $scope.productidsfilter.Attributes.filter(function (obj) {
                                        return obj && obj !== 'null';
                                    });
                                    if (filterednames && filterednames.length > 0) {
                                        customquery = customquery.filter(function (p) { return $scope.productidsfilter.ProductIds.indexOf(p.Id) >= 0; });
                                    }

                                }
                                customquery.limit(0, 12).
                                execute().
                                then(function (args) {
                                    if (args && args.length > 0) {
                                        $scope.productsPanel = args.sort(function (a, b) {
                                            return a.Id - b.Id;
                                        });
                                        $scope.pageRangeCache[$scope.currentPage] = {
                                            minId: $scope.productsPanel[0].Id,
                                            maxId: $scope.productsPanel[$scope.productsPanel.length - 1].Id
                                        };
                                        angular.forEach($scope.productsPanel, function (item) {
                                            item.ThumbnailUrl = getDefaultImage(item.ProductImages, true);
                                        });
                                        refresh($scope);
                                    }
                                });
                            }

                        }
                        $scope.filterByAttributes = function () {
                            var modalInstance = $modal.open({
                                backdrop: true,
                                keyboard: true,
                                modalFade: true,
                                templateUrl: _session.partialPath('attribute-filter.html'),
                                controller: 'AttributeFilterlCtrl',
                                resolve: {
                                    sender: function () {
                                        return $scope.productidsfilter ? $scope.productidsfilter.Attributes : [];
                                    }
                                }
                            });

                            modalInstance.result.then(function (result) {
                                if (typeof (result) !== 'undefined') {
                                    $scope.minId = 0;
                                    $scope.maxId = 0;
                                    $scope.currentPage = 0;
                                    $scope.productsPanel = null;
                                    $scope.productidsfilter = result;
                                    $scope.pagingProductPanel('next');
                                }

                            }, function () {
                            });
                        }
                        $scope.isPageLoad = true;
                        $scope.$on('switchtoquichsearch', function (event, args) {
                            $scope.changesearchType(2);
                        });
                        $scope.$on('initData', function (event, args) {
                            $scope.currentPage = 0;
                            $scope.productsPanel = null;
                            $scope.pagingProductPanel('next');
                            try {
                                var searchURL = $window.location.search
                                .split(/[&||?]/)
                                .filter(function (x) { return x.indexOf("=") > -1; })
                                .map(function (x) { return x.split(/=/); })
                                .map(function (x) {
                                    x[1] = x[1].replace(/\+/g, " ");
                                    return x;
                                })
                                .reduce(function (acc, current) {
                                    acc[current[0]] = current[1];
                                    return acc;
                                }, {});
                                if (searchURL.open) {
                                    $scope.openOrder(searchURL.open);
                                }
                            } catch (e) {

                            }
                            //Load orders on local
                            if ($scope.isPageLoad) {
                                $scope.isPageLoad = false;
                                server.Orders.query()
                                .filter('SyncStatus', 0)
                                .execute()
                                .then(function (args) {
                                    if (args && args.length > 0) {
                                        angular.forEach(args, function (item) {
                                            $scope.tabs.push({ paneId: item.OfflineId, title: item.Code, active: false, customer: item.Partner ? item.Partner.Name : null, id: item.Id })
                                        });
                                        $scope.tabs[0].active = true;
                                        refresh($scope);

                                    }
                                    else {
                                        $scope.addTab();
                                    }
                                });

                            }
                            server.Orders.query()
                            .filter('SyncStatus', 2)
                            .execute()
                            .then(function (results) {
                                $scope.numberofoffline = results? results.length:0;
                            });
                            //End 
                            if ($rootScope.IsOnline) {
                                $http.get('/api/categories/flatten').then(function (response) {
                                    if (response.data)
                                        $scope.categories = response.data;
                                });
                                $http.get('/api/orders/numberofonorder', { params: {} }).then(function (response) {
                                    if (response && response.data) {
                                        $scope.numberofonorder = response.data;
                                    } else {
                                        $scope.numberofonorder = 0;
                                    }
                                }, function (error) {
                                });
                            }
                            $rootScope.showLoading = false;
                        });
                        $scope.logout = function () {
                            $http.post('/api/auth/logout').success(function (data, status, headers, config) {
                                window.location.href = _session.loginUrl;
                            }).error(function (data, status, headers, config) {
                            });
                        };
                        $scope.showProductList = function () {
                            $scope.hideFilterProduct = false;
                        }
                        $scope.showProductPopular = function () {
                            $scope.hideFilterProduct = true;
                            _ProductResource.getpopularproducts({ TimeRange: 'month', Top: 12 }, function (subdata) {
                                if (subdata) {
                                    var keys = $.map(subdata, function (mitem) {
                                        return mitem.ProductId;
                                    });
                                    server.Products.query()
                                    .filter(function (p) { return keys.indexOf(p.Id) >= 0; })
                                    .execute()
                                    .then(function (results) {
                                        $scope.PopularProducts = results;
                                        angular.forEach($scope.PopularProducts, function (item) {
                                            item.ThumbnailUrl = getDefaultImage(item.ProductImages, true);
                                            for (var i = 0; i < subdata.length; i++) {
                                                if (subdata[i].ProductId === item.Id) {
                                                    item.SoldQuantity = subdata[i].Quantity;
                                                    break;
                                                }
                                            }
                                        });
                                        refresh($scope);
                                    });


                                }

                            }, function (error) {
                            });
                        }
                        $scope.settings = _posSettings;
                        $scope.currentDate = new Date();
                        $scope.allUsers = [];
                        $scope.OrderStateMap = _OrderStateMap;
                        $scope.OrderState = _OrderState;
                        $scope.statusList = [{ id: $scope.OrderStateMap.Completed, text: $filter('translate')('enum_Completed') }, { id: $scope.OrderStateMap.OnOrder, text: $filter('translate')('enum_OnOrder') }, { id: $scope.OrderStateMap.InTransit, text: $filter('translate')('enum_InTransit') }]
                        for (var key in _session.auditusers) {
                            $scope.allUsers.push({ Id: key, Name: _session.auditusers[key] });
                        }
                        var fn = debounce(100, function () {
                            if ($scope.order.OfflineId) {
                                server.Orders.update($scope.order).then(function (item) {
                                    // item added or updated
                                });
                            }
                        });
                        
                        $scope.$watch("order", function () {
                            for (var i = 0; i < $scope.tabs.length; i++) {
                                if ($scope.tabs[i].paneId === $scope.order.OfflineId) {
                                    $scope.tabs[i].title = $scope.order.Code;
                                    $scope.tabs[i].customer = $scope.order.Partner ? $scope.order.Partner.Name : null;
                                    break;
                                }
                            }
                            $scope.refreshTotal();
                        }, true);
                        
                        $scope.changeVAT = function (vat) {
                            $scope.order.VATRates = vat;
                            $scope.latestvat = vat;
                            $scope.refreshTotal();
                        }
                        var fnPole = debounce(500, function () {
                            var bounds = {
                                    start: "0x0002",
                                    end: "0x000D",
                                };
                            var BaudRate = $scope.settings.PoleDisplayBaudRate;
                            qz.serial.openPort($scope.settings.PoleDisplay, bounds).then(function () {
                                    var properties = {
                                        baudRate: BaudRate,
                                        dataBits: 8,
                                        stopBits: BaudRate===2400?0:1,
                                        parity: 'NONE',
                                        flowControl: 'NONE'
                                    };
                                    qz.serial.sendData($scope.settings.PoleDisplay, '0x0C', properties).then(function () {
                                        if (BaudRate === 2400)
                                            qz.serial.sendData($scope.settings.PoleDisplay, ('        ' + $scope.order.Total), properties);
                                        else {
                                            if (_session.retailer.Id === 9622)
                                                qz.serial.sendData($scope.settings.PoleDisplay, ('LOCALMART\n' + $filter("formatNumber")($scope.order.Total)), properties);
                                            else 
                                                qz.serial.sendData($scope.settings.PoleDisplay, ('POS365.VN\n' + $filter("formatNumber")($scope.order.Total)), properties);
                                        }
                                           
                                    });
                                }).catch(function (error) {
                                    if (error.message.indexOf('already open') > -1) {
                                        var properties = {
                                            baudRate: BaudRate,
                                            dataBits: 8,
                                            stopBits: BaudRate === 2400 ? 0 : 1,
                                            parity: 'NONE',
                                            flowControl: 'NONE'
                                        };
                                        qz.serial.sendData($scope.settings.PoleDisplay, '0x0C', properties).then(function () {
                                            if (BaudRate === 2400)
                                                qz.serial.sendData($scope.settings.PoleDisplay, ('        ' + $scope.order.Total), properties);
                                            else {
                                                if (_session.retailer.Id === 9622)
                                                    qz.serial.sendData($scope.settings.PoleDisplay, ('LOCALMART\n' + $filter("formatNumber")($scope.order.Total)), properties);
                                                else
                                                    qz.serial.sendData($scope.settings.PoleDisplay, ('POS365.VN\n' + $filter("formatNumber")($scope.order.Total)), properties);
                                            }
                                        });

                                    }
                                });
                        });
                        $scope.getVouchers = function (val) {
                            if (!val)
                                return null;

                            return $http.get('/api/autocomplete/voucher', {
                                params: {
                                    Keyword: val,
                                    format: 'json'
                                }
                            }).then(function (response) {
                                return response.data;
                            });
                        };
                        $scope.addVoucher = function (model) {
                            if (typeof $scope.order.MoreAttributes === 'undefined' || !$scope.order.MoreAttributes)
                                $scope.order.MoreAttributes = {};
                            if (!$scope.order.MoreAttributes.Vouchers)
                                $scope.order.MoreAttributes.Vouchers = [];
                            var addnew = true;
                            for (var i = 0; i < $scope.order.MoreAttributes.Vouchers.length; i++) {
                                if ($scope.order.MoreAttributes.Vouchers[i].Id === model.Id) {
                                    addnew = false;
                                    break;
                                }
                            }
                            if (addnew) {
                                $scope.order.MoreAttributes.Vouchers.push(model);
                                $scope.refreshVoucher();
                            }

                        }
                        $scope.addVoucherCode = function (event, model) {
                            if (event.keyCode === 13) {
                                var keyword = model;
                                if (keyword) {
                                    //$scope.searchVoucher.inputtypeheadvoucher.$setViewValue('');
                                    //$scope.searchVoucher.inputtypeheadvoucher.$render();
                                    $http.get('/api/voucher/getbycode', {
                                        params: {
                                            Code: keyword,
                                            format: 'json'
                                        }
                                    }).then(function (response) {
                                        if (response && response.data) {
                                            $scope.addVoucher(response.data);
                                        }
                                    });
                                }

                            }
                        }
                        $scope.refreshVoucher = function () {
                            var totalVoucher = 0;
                            if (typeof $scope.order.MoreAttributes !== 'undefined' && $scope.order.MoreAttributes && $scope.order.MoreAttributes.Vouchers) {
                                angular.forEach($scope.order.MoreAttributes && $scope.order.MoreAttributes.Vouchers, function (it) {
                                    totalVoucher += it.Value;
                                });
                            }
                            $scope.order.Voucher = totalVoucher;
                            $scope.refreshTotal();
                        }
                        $scope.removeVoucher = function (idx) {
                            try {
                                if (typeof $scope.order.MoreAttributes !== 'undefined' && $scope.order.MoreAttributes && $scope.order.MoreAttributes.Vouchers) {
                                    $scope.order.MoreAttributes.Vouchers.splice(idx, 1);
                                    $scope.refreshVoucher();

                                }
                            } catch (e) {
                                console.log(e);
                            }

                        }
                        $scope.refreshTotal = function () {
                            if (!$scope.order.OrderDetails)
                                $scope.order.OrderDetails = [];
                            if (typeof ($scope.order.Discount) === "undefined" || !$scope.order.Discount || $scope.order.Discount < 0)
                                $scope.order.Discount = 0;
                            if (typeof ($scope.order.DiscountValue) === "undefined" || !$scope.order.DiscountValue || $scope.order.DiscountValue < 0)
                                $scope.order.DiscountValue = 0;
                            var pointdc = 0;
                            if (typeof $scope.order.MoreAttributes !== 'undefined' && $scope.order.MoreAttributes && $scope.order.MoreAttributes.PointDiscount)
                                pointdc = $scope.order.MoreAttributes.PointDiscount;
                            if (!$scope.order.Voucher)
                                $scope.order.Voucher = 0;
                            var totalExcludeVATList = $scope.order.OrderDetails.filter(function (item) { return !item.IsPercentageOfTotalOrder });
                            var totalExcludeVAT = ($filter('calTotal')(totalExcludeVATList, $scope.calcTotalBeforeDiscount));
                            var exChangePrice = 0;
                            angular.forEach($scope.order.OrderDetails, function (item) {
                                if (item.IsPercentageOfTotalOrder) {
                                    item.Price = item.BasePrice = (item.PercentageOfTotalOrderValue * totalExcludeVAT) / 100;

                                }
                                //if (item.Price != item.BasePrice && item.BasePrice) {
                                //    exChangePrice += item.Price * item.Quantity;
                                //}
                            });
                            var totalBefore = ($filter('calTotal')($scope.order.OrderDetails, $scope.calcTotalBeforeDiscount));
                            if ($scope.order.DiscountRatio) {
                                var dValue = (totalBefore - exChangePrice) * ($scope.order.DiscountRatio / 100);
                                if (dValue > totalBefore) dValue = totalBefore;
                                $scope.order.DiscountValue = dValue;
                                $scope.order.Discount = $scope.order.DiscountValue + ((_session.pointconfig.PointToValue ? _session.pointconfig.PointToValue : 0) * pointdc) + $scope.order.Voucher;
                                var dView = $scope.order.DiscountRatio + '%';
                                $scope.order.DiscountToView = dView;
                            } else {
                                $scope.order.Discount = $scope.order.DiscountValue + ((_session.pointconfig.PointToValue ? _session.pointconfig.PointToValue : 0) * pointdc) + $scope.order.Voucher;
                                var dView = $scope.order.Discount;
                                $scope.order.DiscountToView = dView;
                            }
                            var totalaftervat = (totalBefore + parseFloat($scope.order.ShippingCost ? $scope.order.ShippingCost : 0) - $scope.order.Discount);
                            $scope.order.VAT = totalaftervat * (($scope.order.VATRates ? $scope.order.VATRates : 0) / 100);
                            $scope.order.Total = (totalBefore + parseFloat($scope.order.ShippingCost ? $scope.order.ShippingCost : 0) - $scope.order.Discount) + $scope.order.VAT;
                            if ($scope.order.Total<0) {
                                $scope.order.Total = 0;
                            }
                            if (!$scope.order.initializingTotalPayment) {

                                $scope.order.TotalPayment = $scope.order.Total;
                            }
                            $scope.order.ExcessCash = ($scope.order.TotalPayment ? $scope.order.TotalPayment : 0) - $scope.order.Total;
                            fn();
                            if (qz && qz.websocket.isActive() && $scope.settings.PoleDisplay && $scope.order.Total) {
                                fnPole();
                            }
                            
                        }
                        $scope.changeOrderStatus = function () {
                            if ($scope.order.Status == _OrderStateMap.Completed) {
                                $scope.copyTotal();
                            } else {
                                $scope.order.initializingTotalPayment = true;
                                $scope.order.TotalPayment = 0;
                            }
                        }
                        $scope.calcExcessCash = function () {
                            $scope.order.ExcessCash = ($scope.order.TotalPayment ? $scope.order.TotalPayment : 0) - $scope.order.Total;
                        }
                        $scope.refreshExcessCash = function () {
                            $scope.order.initializingTotalPayment = true;
                            $scope.order.ExcessCash = ($scope.order.TotalPayment ? $scope.order.TotalPayment : 0) - $scope.order.Total;
                        }
                        $scope.copyTotal = function () {
                            var totalaftervat = ($filter('calTotal')($scope.order.OrderDetails, $scope.calcTotalBeforeDiscount)) + parseFloat($scope.order.ShippingCost ? $scope.order.ShippingCost : 0) - ($scope.order.Discount ? $scope.order.Discount : 0);
                            var vat = totalaftervat * (($scope.order.VATRates ? $scope.order.VATRates : 0) / 100);
                            $scope.order.TotalPayment = totalaftervat + vat;
                            $scope.order.initializingTotalPayment = false;
                            $scope.calcExcessCash();
                        }
                        //Filter by category
                        $scope.FilterByCategory = function () {
                            $scope.minId = 0;
                            $scope.maxId = 0;
                            $scope.currentPage = 0;
                            $scope.productsPanel = null;
                            if ($scope.filterProductPanelByCategory) {
                                $rootScope.showLoading = true;
                                $http.get('/api/categories/' + $scope.filterProductPanelByCategory + '/children').then(function (response) {
                                    $scope.filterCategories = response.data;
                                    $scope.pagingProductPanel('next');
                                    $rootScope.showLoading = false;
                                }, function (error) {
                                    $rootScope.showLoading = false;
                                });
                            } else {
                                $scope.filterCategories = null;
                                $scope.pagingProductPanel('next');
                            }
                        }
                        //End
                        function display(a) {
                            var hours = Math.trunc(a / 60);
                            var minutes = a % 60;
                            return '(' + hours + " giờ" + minutes + " phút)";
                        }
                        $scope.changeCheckin = function () {
                            fnTimer();
                        }
                        var fnGetTimeQuantity = function (minutes, blocktimesetup, isPriceForBlock) {
                            var qty = 0;
                            if (blocktimesetup === 0) blocktimesetup = $scope.settings.BlockOfTimeToUseService;
                            if (isPriceForBlock) {
                                qty = Math.ceil(minutes / blocktimesetup);
                            } else {
                                var block = blocktimesetup / 60;
                                qty = Math.floor(minutes / blocktimesetup) * block;
                                var pqty = minutes % blocktimesetup;

                                if (pqty > 0) {
                                    qty = qty + block;
                                }
                            }
                            return qty;
                        }
                        var fnTimer = function () {

                            if ($scope.order.Id || $scope.saving)
                                return;
                            for (var i = 0; i < $scope.order.OrderDetails.length; i++) {
                                if ($scope.order.OrderDetails[i].IsTimer && !$scope.order.OrderDetails[i].StopTimer) {
                                    $scope.order.OrderDetails[i].TotalTime = { IsCustom: false, Text: '' };
                                    var blocktimesetup = $scope.order.OrderDetails[i].BlockOfTimeToUseService ? $scope.order.OrderDetails[i].BlockOfTimeToUseService : $scope.settings.BlockOfTimeToUseService;
                                    var pconfig = {};
                                    if ($scope.order.OrderDetails[i].PriceConfig) {
                                        pconfig = JSON.parse($scope.order.OrderDetails[i].PriceConfig);
                                        if (pconfig.TimeFrom)
                                            pconfig.TimeFrom = $filter("parseDate")(pconfig.TimeFrom);
                                        if (pconfig.TimeFrom2)
                                            pconfig.TimeFrom2 = $filter("parseDate")(pconfig.TimeFrom2);
                                        if (pconfig.TimeTo)
                                            pconfig.TimeTo = $filter("parseDate")(pconfig.TimeTo);
                                        if (pconfig.TimeTo2)
                                            pconfig.TimeTo2 = $filter("parseDate")(pconfig.TimeTo2);
                                        if (pconfig.CalcPriceToTime)
                                            pconfig.CalcPriceToTime = $filter("parseDate")(pconfig.CalcPriceToTime);
                                    }
                                    var a = moment($scope.order.OrderDetails[i].Checkin);
                                    var copya = a.clone();
                                    var b = moment(new Date());
                                    var diff = b.diff(a, 'minutes');
                                    if (diff === 0) diff = 1;
                                    $scope.order.OrderDetails[i].Description = ($filter('date')($scope.order.OrderDetails[i].Checkin, 'dd/MM HH:mm') + '=>' + $filter('date')(new Date(), 'dd/MM HH:mm') + ' (' + a.preciseDiff(b)) + ') \n';

                                    $scope.order.Description = ($filter('date')($scope.order.OrderDetails[i].Checkin, 'dd/MM HH:mm') + '=>' + $filter('date')(new Date(), 'dd/MM HH:mm') + ' (' + a.preciseDiff(b)) + ') \n';
                                    var customTime = false;
                                    var totalValueTime = 0;
                                    if (pconfig && pconfig.Block && pconfig.Value) {
                                        copya.add(pconfig.Block * blocktimesetup, 'minutes')
                                        diff = diff - (pconfig.Block * blocktimesetup);
                                        if (diff < 0) diff = 0;
                                        totalValueTime = pconfig.Value;

                                        $scope.order.OrderDetails[i].Description += ($filter("stringFormat")($filter('translate')('label_FirstTime'), moment('2000-01-01 00:00:00').preciseDiff(moment('2000-01-01 00:00:00').add(pconfig.Block * blocktimesetup, 'minutes')), $filter("formatNumber")(pconfig.Value))) + '\n';
                                        customTime = true;
                                    }
                                    if (pconfig && pconfig.CalcPriceToTime) {
                                        var tmpTime = moment(pconfig.CalcPriceToTime);
                                        copya.set({
                                            'hour': tmpTime.get('hour'),
                                            'minutes': tmpTime.get('minutes'),
                                        });
                                        copya.add(1, 'day');
                                        diff = b.diff(copya, 'minutes');
                                        if (diff < 0) {
                                            diff = 0;
                                        }
                                        customTime = true;
                                    }
                                    //special time slot
                                    if (pconfig && ((pconfig.TimeFrom && pconfig.TimeTo && pconfig.TimeValue) || (pconfig.TimeFrom2 && pconfig.TimeTo2 && pconfig.TimeValue2))) {
                                        for (var j = 0 ; j <= (Math.abs(a.diff(b, 'days')) + 1) ; j++) {
                                            if (diff > 0 && pconfig.TimeFrom && pconfig.TimeTo && pconfig.TimeValue) {
                                                var a1 = moment(pconfig.TimeFrom);
                                                a1.set({
                                                    'year': a.get('year'),
                                                    'month': a.get('month'),
                                                    'date': a.get('date')
                                                });
                                                var b1 = moment(pconfig.TimeTo);
                                                b1.set({
                                                    'year': a.get('year'),
                                                    'month': a.get('month'),
                                                    'date': a.get('date')
                                                });
                                                a1.add(j, 'day');
                                                b1.add(j, 'day');
                                                if ((a1 >= copya && a1 <= b) || (a1 <= copya && copya <= b1)) {
                                                    var endSlot1 = b1 > b ? b : b1;
                                                    var beginSlot1 = (a1 <= copya && copya <= b1) ? copya : a1;
                                                    var diff1 = endSlot1.diff(beginSlot1, 'minutes');
                                                    if (diff1 === 0) diff1 = 1;
                                                    if (diff1 > 0 && diff >= diff1) {
                                                        if (endSlot1.get('hour') === 23 && endSlot1.get('minutes') === 59) {
                                                            diff1 += 1;
                                                        }
                                                        diff = diff - diff1;
                                                        customTime = true;
                                                        var speValue = 0;
                                                        if (pconfig.Type && pconfig.Type === 'vnd') {
                                                            speValue = Number(pconfig.TimeValue);
                                                        } else {
                                                            speValue = ($scope.order.OrderDetails[i].BasePrice * Number(pconfig.TimeValue)) / 100;
                                                        }
                                                        var value1 = fnGetTimeQuantity(diff1, blocktimesetup, $scope.order.OrderDetails[i].IsPriceForBlock) * ($scope.order.OrderDetails[i].BasePrice + speValue);
                                                        totalValueTime += value1;
                                                        $scope.order.OrderDetails[i].Description += ($filter("stringFormat")('{0}=>{1}[{2} {3}{4}] = {5}', beginSlot1.format('DD/MM HH:mm'), endSlot1.format('HH:mm'), moment('2000-01-01 00:00:00').preciseDiff(moment('2000-01-01 00:00:00').add(diff1, 'minutes')), ((pconfig.TimeValue > 0 ? ' ↑x' : ' ↓x') + $filter("formatNumber")($scope.order.OrderDetails[i].BasePrice + speValue)), (pconfig.Type && pconfig.Type === 'vnd') ? '' : '%', $filter("formatNumber")(value1))) + '\n';
                                                    }
                                                }
                                            }
                                            if (diff > 0 && pconfig.TimeFrom2 && pconfig.TimeTo2 && pconfig.TimeValue2) {
                                                var a1 = moment(pconfig.TimeFrom2);
                                                a1.set({
                                                    'year': a.get('year'),
                                                    'month': a.get('month'),
                                                    'date': a.get('date')
                                                });
                                                var b1 = moment(pconfig.TimeTo2);
                                                b1.set({
                                                    'year': a.get('year'),
                                                    'month': a.get('month'),
                                                    'date': a.get('date')
                                                });
                                                a1.add(j, 'day');
                                                b1.add(j, 'day');
                                                if (a1 >= copya && a1 <= b || (a1 <= copya && copya <= b1)) {
                                                    var endSlot1 = b1 > b ? b : b1;
                                                    var beginSlot1 = (a1 <= copya && copya <= b1) ? copya : a1;
                                                    var diff1 = endSlot1.diff(beginSlot1, 'minutes');
                                                    if (diff1 === 0) diff1 = 1;
                                                    if (diff1 > 0 && diff >= diff1) {
                                                        if (endSlot1.get('hour') === 23 && endSlot1.get('minutes') === 59) {
                                                            diff1 += 1;
                                                        }
                                                        diff = diff - diff1;
                                                        customTime = true;
                                                        var speValue = 0;
                                                        if (pconfig.Type2 && pconfig.Type2 === 'vnd') {
                                                            speValue = Number(pconfig.TimeValue2);
                                                        } else {
                                                            speValue = ($scope.order.OrderDetails[i].BasePrice * Number(pconfig.TimeValue2)) / 100;
                                                        }
                                                        var value1 = fnGetTimeQuantity(diff1, blocktimesetup, $scope.order.OrderDetails[i].IsPriceForBlock) * ($scope.order.OrderDetails[i].BasePrice + speValue);
                                                        totalValueTime += value1;
                                                        $scope.order.OrderDetails[i].Description += ($filter("stringFormat")('{0}=>{1}[{2} {3}{4}] = {5}', beginSlot1.format('DD/MM HH:mm'), endSlot1.format('HH:mm'), moment('2000-01-01 00:00:00').preciseDiff(moment('2000-01-01 00:00:00').add(diff1, 'minutes')), ((pconfig.TimeValue2 > 0 ? ' ↑x' : ' ↓x') + $filter("formatNumber")($scope.order.OrderDetails[i].BasePrice + speValue)), (pconfig.Type2 && pconfig.Type2 === 'vnd') ? '' : '%', $filter("formatNumber")(value1))) + '\n';
                                                    }
                                                }
                                            }
                                        }


                                    }
                                    //End special time slot
                                    if (customTime) {
                                        if (diff > 0) {
                                            totalValueTime += fnGetTimeQuantity(diff, blocktimesetup, $scope.order.OrderDetails[i].IsPriceForBlock) * $scope.order.OrderDetails[i].BasePrice;
                                        }
                                        $scope.order.OrderDetails[i].Price = totalValueTime;
                                        $scope.order.OrderDetails[i].Quantity = 1;
                                        if (diff > 0) {
                                            $scope.order.OrderDetails[i].Description += ($filter("stringFormat")($filter('translate')('label_MoreTime'), (moment('2000-01-01 00:00:00').preciseDiff(moment('2000-01-01 00:00:00').add(diff, 'minutes'))), $filter("formatNumber")(fnGetTimeQuantity(diff, blocktimesetup, $scope.order.OrderDetails[i].IsPriceForBlock) * $scope.order.OrderDetails[i].BasePrice)));
                                        }
                                        $scope.order.OrderDetails[i].TotalTime.IsCustom = true;

                                    } else {
                                        var nqy = fnGetTimeQuantity(diff, blocktimesetup, $scope.order.OrderDetails[i].IsPriceForBlock);
                                        if (!nqy) {
                                            nqy = blocktimesetup / 60;
                                        }
                                        var discount = 0;
                                        if ($scope.order.OrderDetails[i].DiscountRatio) {
                                            discount = ($scope.order.OrderDetails[i].DiscountRatio * $scope.order.OrderDetails[i].BasePrice) / 100;
                                        }
                                        $scope.order.OrderDetails[i].Price = $scope.order.OrderDetails[i].BasePrice - discount;
                                        $scope.order.OrderDetails[i].Quantity = nqy;
                                    }
                                    var totalTime = a.preciseDiff(b);
                                    if (!totalTime) totalTime = '1 ' + $filter('translate')('label_Minute');
                                    $scope.order.OrderDetails[i].TotalTime.Text = a.preciseDiff(b);
                                }
                            }
                        }
                        $scope.ChangeOrder = function (tab) {
                            $scope.currentDate = new Date();
                            server.Orders.get(tab.paneId)
                            .then(function (args) {
                                if (args) {
                                    $scope.order = args;
                                    if (!$scope.order.Id) {
                                        //cal
                                        for (var i = 0; i < $scope.order.OrderDetails.length; i++) {
                                            if ($scope.order.OrderDetails[i].Checkin) {
                                                $scope.order.OrderDetails[i].Checkin = new Date($scope.order.OrderDetails[i].Checkin);
                                            }
                                            if ($scope.order.OrderDetails[i].IsTimer && !$scope.order.OrderDetails[i].StopTimer) {
                                                $scope.order.OrderDetails[i].TotalTime = { IsCustom: false, Text: '' };
                                                var blocktimesetup = $scope.order.OrderDetails[i].BlockOfTimeToUseService ? $scope.order.OrderDetails[i].BlockOfTimeToUseService : $scope.settings.BlockOfTimeToUseService;
                                                var pconfig = {};
                                                if ($scope.order.OrderDetails[i].PriceConfig) {
                                                    pconfig = JSON.parse($scope.order.OrderDetails[i].PriceConfig);
                                                    if (pconfig.TimeFrom)
                                                        pconfig.TimeFrom = $filter("parseDate")(pconfig.TimeFrom);
                                                    if (pconfig.TimeFrom2)
                                                        pconfig.TimeFrom2 = $filter("parseDate")(pconfig.TimeFrom2);
                                                    if (pconfig.TimeTo)
                                                        pconfig.TimeTo = $filter("parseDate")(pconfig.TimeTo);
                                                    if (pconfig.TimeTo2)
                                                        pconfig.TimeTo2 = $filter("parseDate")(pconfig.TimeTo2);
                                                    if (pconfig.CalcPriceToTime)
                                                        pconfig.CalcPriceToTime = $filter("parseDate")(pconfig.CalcPriceToTime);
                                                }
                                                var a = moment($scope.order.OrderDetails[i].Checkin);
                                                var copya = a.clone();
                                                var b = moment(new Date());
                                                var diff = b.diff(a, 'minutes');
                                                if (diff === 0) diff = 1;
                                                $scope.order.OrderDetails[i].Description = ($filter('date')($scope.order.OrderDetails[i].Checkin, 'dd/MM HH:mm') + '=>' + $filter('date')(new Date(), 'dd/MM HH:mm') + ' (' + a.preciseDiff(b)) + ') \n';
                                                $scope.order.Description = ($filter('date')($scope.order.OrderDetails[i].Checkin, 'dd/MM HH:mm') + '=>' + $filter('date')(new Date(), 'dd/MM HH:mm') + ' (' + a.preciseDiff(b)) + ') \n';
                                                var customTime = false;
                                                var totalValueTime = 0;
                                                if (pconfig && pconfig.Block && pconfig.Value) {
                                                    copya.add(pconfig.Block * blocktimesetup, 'minutes')
                                                    diff = diff - (pconfig.Block * blocktimesetup);
                                                    if (diff < 0) diff = 0;
                                                    totalValueTime = pconfig.Value;

                                                    $scope.order.OrderDetails[i].Description += ($filter("stringFormat")($filter('translate')('label_FirstTime'), moment('2000-01-01 00:00:00').preciseDiff(moment('2000-01-01 00:00:00').add(pconfig.Block * blocktimesetup, 'minutes')), $filter("formatNumber")(pconfig.Value))) + '\n';
                                                    customTime = true;
                                                }
                                                if (pconfig && pconfig.CalcPriceToTime) {
                                                    var tmpTime = moment(pconfig.CalcPriceToTime);
                                                    copya.set({
                                                        'hour': tmpTime.get('hour'),
                                                        'minutes': tmpTime.get('minutes'),
                                                    });
                                                    copya.add(1, 'day');
                                                    diff = b.diff(copya, 'minutes');
                                                    if (diff < 0) {
                                                        diff = 0;
                                                    }
                                                    customTime = true;
                                                }
                                                //special time slot
                                                if (pconfig && ((pconfig.TimeFrom && pconfig.TimeTo && pconfig.TimeValue) || (pconfig.TimeFrom2 && pconfig.TimeTo2 && pconfig.TimeValue2))) {
                                                    for (var j = 0 ; j <= (Math.abs(a.diff(b, 'days')) + 1) ; j++) {
                                                        if (diff > 0 && pconfig.TimeFrom && pconfig.TimeTo && pconfig.TimeValue) {
                                                            var a1 = moment(pconfig.TimeFrom);
                                                            a1.set({
                                                                'year': a.get('year'),
                                                                'month': a.get('month'),
                                                                'date': a.get('date')
                                                            });
                                                            var b1 = moment(pconfig.TimeTo);
                                                            b1.set({
                                                                'year': a.get('year'),
                                                                'month': a.get('month'),
                                                                'date': a.get('date')
                                                            });
                                                            a1.add(j, 'day');
                                                            b1.add(j, 'day');
                                                            if ((a1 >= copya && a1 <= b) || (a1 <= copya && copya <= b1)) {
                                                                var endSlot1 = b1 > b ? b : b1;
                                                                var beginSlot1 = (a1 <= copya && copya <= b1) ? copya : a1;
                                                                var diff1 = endSlot1.diff(beginSlot1, 'minutes');
                                                                if (diff1 === 0) diff1 = 1;
                                                                if (diff1 > 0 && diff >= diff1) {
                                                                    if (endSlot1.get('hour') == 23 && endSlot1.get('minutes') == 59) {
                                                                        diff1 += 1;
                                                                    }
                                                                    diff = diff - diff1;
                                                                    customTime = true;
                                                                    var speValue = 0;
                                                                    if (pconfig.Type && pconfig.Type === 'vnd') {
                                                                        speValue = Number(pconfig.TimeValue);
                                                                    } else {
                                                                        speValue = ($scope.order.OrderDetails[i].BasePrice * Number(pconfig.TimeValue)) / 100;
                                                                    }
                                                                    var value1 = fnGetTimeQuantity(diff1, blocktimesetup, $scope.order.OrderDetails[i].IsPriceForBlock) * ($scope.order.OrderDetails[i].BasePrice + speValue);
                                                                    totalValueTime += value1;
                                                                    $scope.order.OrderDetails[i].Description += ($filter("stringFormat")('{0}=>{1}[{2} {3}{4}] = {5}', beginSlot1.format('DD/MM HH:mm'), endSlot1.format('HH:mm'), moment('2000-01-01 00:00:00').preciseDiff(moment('2000-01-01 00:00:00').add(diff1, 'minutes')), ((pconfig.TimeValue > 0 ? ' ↑x' : ' ↓x') + $filter("formatNumber")($scope.order.OrderDetails[i].BasePrice + speValue)), (pconfig.Type && pconfig.Type === 'vnd') ? '' : '%', $filter("formatNumber")(value1))) + '\n';
                                                                }
                                                            }
                                                        }
                                                        if (diff > 0 && pconfig.TimeFrom2 && pconfig.TimeTo2 && pconfig.TimeValue2) {
                                                            var a1 = moment(pconfig.TimeFrom2);
                                                            a1.set({
                                                                'year': a.get('year'),
                                                                'month': a.get('month'),
                                                                'date': a.get('date')
                                                            });
                                                            var b1 = moment(pconfig.TimeTo2);
                                                            b1.set({
                                                                'year': a.get('year'),
                                                                'month': a.get('month'),
                                                                'date': a.get('date')
                                                            });
                                                            a1.add(j, 'day');
                                                            b1.add(j, 'day');
                                                            if (a1 >= copya && a1 <= b || (a1 <= copya && copya <= b1)) {
                                                                var endSlot1 = b1 > b ? b : b1;
                                                                var beginSlot1 = (a1 <= copya && copya <= b1) ? copya : a1;
                                                                var diff1 = endSlot1.diff(beginSlot1, 'minutes');
                                                                if (diff1 === 0) diff1 = 1;
                                                                if (diff1 > 0 && diff >= diff1) {
                                                                    if (endSlot1.get('hour') == 23 && endSlot1.get('minutes') == 59) {
                                                                        diff1 += 1;
                                                                    }
                                                                    diff = diff - diff1;
                                                                    customTime = true;
                                                                    var speValue = 0;
                                                                    if (pconfig.Type2 && pconfig.Type2 === 'vnd') {
                                                                        speValue = Number(pconfig.TimeValue2);
                                                                    } else {
                                                                        speValue = ($scope.order.OrderDetails[i].BasePrice * Number(pconfig.TimeValue2)) / 100;
                                                                    }
                                                                    var value1 = fnGetTimeQuantity(diff1, blocktimesetup, $scope.order.OrderDetails[i].IsPriceForBlock) * ($scope.order.OrderDetails[i].BasePrice + speValue);
                                                                    totalValueTime += value1;
                                                                    $scope.order.OrderDetails[i].Description += ($filter("stringFormat")('{0}=>{1}[{2} {3}{4}] = {5}', beginSlot1.format('DD/MM HH:mm'), endSlot1.format('HH:mm'), moment('2000-01-01 00:00:00').preciseDiff(moment('2000-01-01 00:00:00').add(diff1, 'minutes')), ((pconfig.TimeValue2 > 0 ? ' ↑x' : ' ↓x') + $filter("formatNumber")($scope.order.OrderDetails[i].BasePrice + speValue)), (pconfig.Type2 && pconfig.Type2 === 'vnd') ? '' : '%', $filter("formatNumber")(value1))) + '\n';
                                                                }
                                                            }
                                                        }
                                                    }


                                                }
                                                //End special time slot
                                                if (customTime) {
                                                    if (diff > 0) {
                                                        totalValueTime += fnGetTimeQuantity(diff, blocktimesetup, $scope.order.OrderDetails[i].IsPriceForBlock) * $scope.order.OrderDetails[i].BasePrice;
                                                    }
                                                    $scope.order.OrderDetails[i].Price = totalValueTime;
                                                    $scope.order.OrderDetails[i].Quantity = 1;
                                                    if (diff > 0) {
                                                        $scope.order.OrderDetails[i].Description += ($filter("stringFormat")($filter('translate')('label_MoreTime'), moment('2000-01-01 00:00:00').preciseDiff(moment('2000-01-01 00:00:00').add(diff, 'minutes')), $filter("formatNumber")(fnGetTimeQuantity(diff, blocktimesetup, $scope.order.OrderDetails[i].IsPriceForBlock) * $scope.order.OrderDetails[i].BasePrice)));
                                                    }
                                                    $scope.order.OrderDetails[i].TotalTime.IsCustom = true;
                                                } else {
                                                    var nqy = fnGetTimeQuantity(diff, blocktimesetup, $scope.order.OrderDetails[i].IsPriceForBlock);
                                                    if (!nqy) {
                                                        nqy = blocktimesetup / 60;
                                                    }
                                                    var discount = 0;
                                                    if ($scope.order.OrderDetails[i].DiscountRatio) {
                                                        discount = ($scope.order.OrderDetails[i].DiscountRatio * $scope.order.OrderDetails[i].BasePrice) / 100;
                                                    }
                                                    $scope.order.OrderDetails[i].Price = $scope.order.OrderDetails[i].BasePrice - discount;
                                                    $scope.order.OrderDetails[i].Quantity = nqy;
                                                }
                                                var totalTime = a.preciseDiff(b);
                                                if (!totalTime) totalTime = '1 ' + $filter('translate')('label_Minute');
                                                $scope.order.OrderDetails[i].TotalTime.Text = a.preciseDiff(b);

                                            }
                                        }
                                        //end
                                    }

                                    if (!$scope.order.OrderDetails || $scope.order.OrderDetails.length === 0)
                                        $scope.order.SoldById = _session.user.Id;
                                    refresh($scope);
                                }


                            });
                        }
                        $scope.getDateFormat = function (pDate) {
                            var a = moment(pDate);
                            return a.format('HH:mm DD/MM');
                        }
                        $scope.NotificationHub = function (msgTitle, msgBody, msgDocId) {
                            if ($rootScope.IsOnline)
                                $http.post('/api/notificationhub/sent', { Title: msgTitle, Body: msgBody, DocId: msgDocId }).then(function (response) {

                                });
                        };
                        $interval(fnTimer, 60000);
                        $scope.calc = function (v) {
                            return v.Quantity;
                        };
                        $scope.calcTotalBeforeDiscount = function (v) {
                            return v.Quantity * v.Price;
                        };
                        $scope.addTab = function ($event) {
                            if ($event) {
                                $event.preventDefault();
                                $event.stopPropagation();
                            }
                            $scope.currentDate = new Date();
                            $scope.tabs.some(function __forEachTab(tab) {
                                if (tab.active) {
                                    tab.active = false;
                                    return true; // exit loop
                                }
                            });
                            var newId = getId();
                            var newobj = { OfflineId: newId, SyncStatus: 0, Status: _OrderStateMap.Completed, Discount: 0,DiscountValue: 0, TotalPayment: 0, Total: 0, OrderDetails: [], SoldById: _session.user.Id, ExcessCashType: 0, ExcessCash: 0, VATRates: $scope.latestvat, initializingTotalPayment: false };
                            if (window.localStorage) {
                                var tmpId = localStorage['LatestPriceBook-' + _session.branch.Id];
                                if (tmpId)
                                    newobj.PriceBookId = parseInt(tmpId);
                            }

                            server.Orders.add(newobj).then(function (args) {
                                // item stored
                                $scope.order = newobj;
                                $scope.tabs.push({ paneId: newId, title: null, active: true, customer: null, id: null })
                                refresh($scope);
                            });
                            if (!isMobile())
                                $('#inputtypehead').focus();
                        }
                        $scope.resetTab = function (changeid) {
                            if (changeid) {
                                for (var i = 0; i < $scope.tabs.length; i++) {
                                    if ($scope.tabs[i].paneId === $scope.order.OfflineId) {
                                        var newId = getId();
                                        $scope.tabs[i].paneId = newId;
                                        $scope.order.OfflineId = newId;
                                        break;
                                    }

                                }
                            }
                            $scope.order.PartnerId = null;
                            $scope.order.Partner = null;
                            $scope.order.MoreAttributes = null;
                            $scope.order.Discount = 0;
                            $scope.order.DiscountRatio = 0;
                            $scope.order.DiscountValue = 0;
                            $scope.order.Voucher = 0;
                            $scope.order.TotalPayment = 0;
                            $scope.order.Total = 0;
                            $scope.order.Id = null;
                            $scope.order.Code = null;
                            $scope.order.OrderDetails = [];
                            $scope.tabs[0].id = null;
                            $scope.order.SoldById = _session.user.Id;
                            $scope.order.SyncStatus = 0;
                            $scope.order.Status = _OrderStateMap.Completed;
                            $scope.order.ExcessCashType = 0;
                            $scope.order.ExcessCash = 0;
                            $scope.order.initializingTotalPayment = false;
                            $scope.order.VATRates = $scope.latestvat;
                            $scope.order.AccountId = null;
                            $scope.order.PurchaseDate = null;
                            $scope.order.Description = null;
                            $scope.order.ShippingCost = 0;
                            $scope.order.tmpShippingCost = 0;
                            $scope.order.tmpDeliveryById = null;
                            $scope.order.tmpDeliveryBy = null;
                            $scope.order.tmpLadingCode = '';
                            

                        }
                        $scope.removeTab = function ($index, $event, oId) {
                            $event.preventDefault();
                            $event.stopPropagation();
                            if ($scope.tabs.length > 1) {
                                if ($scope.order.SyncStatus !== 2) {
                                    server.Orders.remove(oId).then(function (key) {
                                        // item removed
                                        $scope.tabs.splice($index, 1);
                                        refresh($scope);
                                    });
                                } else {
                                    $scope.tabs.splice($index, 1);
                                    refresh($scope);
                                }
                               
                            } else {

                                $scope.resetTab();
                            }
                            if (!isMobile())
                                $('#inputtypehead').focus();

                        }
                        $scope.ChangeUnit = function (dataItem) {
                            if (dataItem.LargeUnit && dataItem.Unit) {
                                var ex = 0
                                dataItem.IsLargeUnit = !dataItem.IsLargeUnit;
                                if (dataItem.IsLargeUnit) {
                                    dataItem.Price = dataItem.PriceLargeUnit + ex;
                                    dataItem.BasePrice = dataItem.PriceLargeUnit
                                } else {
                                    dataItem.Price = dataItem.UnitPrice + ex;
                                    dataItem.BasePrice = dataItem.UnitPrice;
                                }
                            }
                        }
                        $scope.changeDiscountRatioOnItemCustom = function (custom, dataItem) {
                            dataItem.DiscountRatio = custom;
                            $scope.changeDiscountRatioOnItem(dataItem);
                        }
                        $scope.changeDiscountRatioOnItem = function (dataItem) {
                            if (dataItem.DiscountRatio && dataItem.DiscountRatio > 100)
                                dataItem.DiscountRatio = 100;
                            dataItem.Price = dataItem.BasePrice - (dataItem.DiscountRatio * dataItem.BasePrice) / 100;
                        }
                        $scope.changeDiscountRatioOnItem2 = function (dataItem) {
                            if (dataItem.DiscountRatio2 && dataItem.DiscountRatio2 > 100)
                                dataItem.DiscountRatio2 = 100;
                            dataItem.DiscountValue2=(dataItem.DiscountRatio2 * dataItem.Price) / 100;
                            dataItem.Price = dataItem.Price - dataItem.DiscountValue2;
                        }
                        $scope.changePoint = function () {
                           
                            $scope.refreshTotal();
                        }
                        $scope.changePriceOnItem = function (dataItem) {
                            if (dataItem.BasePrice) {
                                dataItem.DiscountRatio = ((dataItem.BasePrice - dataItem.Price) / dataItem.BasePrice) * 100;
                            }
                        }
                        $scope.reduceQItem = function (dataItem) {
                            dataItem.Quantity--;
                            if (dataItem.Quantity == 0) {
                                dataItem.Quantity = 1;
                            }
                            if (!isMobile())
                                $('#inputtypehead').focus();
                        }
                        $scope.increasingQItem = function (dataItem) {
                            dataItem.Quantity++;
                            if (dataItem.Quantity == 0) {
                                dataItem.Quantity = 1;
                            }
                            if (!isMobile())
                                $('#inputtypehead').focus();
                        }
                        $scope.returnFocus = function () {
                            $('#inputtypehead').focus();
                        }
                        $scope.changeTotalOnItem = function (dataItem) {
                            if (dataItem.TotalOnItem && dataItem.Price) {
                                dataItem.Quantity = dataItem.TotalOnItem / dataItem.Price;
                            }

                        }
                        $scope.clearLot = function (dataItem) {
                            dataItem.SerialNumbers = null;
                            dataItem.ExpiryDate = null;
                        }
                        $scope.addLotToDataItem = function (md, dataItem) {
                            if (md && md.SerialNumber) {
                                dataItem.SerialNumbers = md.SerialNumber;
                            }
                            if (md && md.ExpiryDate) {

                                dataItem.ExpiryDate = md.ExpiryDate;
                            }
                        }
                        $scope.getLot = function (val, pid) {
                            return $http.get('/api/autocomplete/availableserials', {
                                params: {
                                    Keyword: val,
                                    ProductId: pid,
                                    format: 'json'
                                }
                            }).then(function (response) {
                                return response.data;
                            });
                        };
                       
                       
                        $scope.changePriceBook = function () {
                            if (window.localStorage)
                                localStorage.setItem('LatestPriceBook-' + _session.branch.Id, $scope.order.PriceBookId);
                            var arr = $.map($scope.order.OrderDetails, function (gr) { return gr.ProductId });
                            if ($scope.order.PriceBookId && arr && arr.length > 0) {
                                $rootScope.showLoading = true;
                                _PriceBookResource.getprices({ pricebookId: $scope.order.PriceBookId, ProductIds: arr }, function (data) {
                                    if (!data.PriceList) data.PriceList = [];
                                    $rootScope.showLoading = false;
                                    angular.forEach($scope.order.OrderDetails, function (citem) {
                                        var source = (data.PriceList && data.PriceList.length > 0) ? $filter('filter')(data.PriceList, { ProductId: citem.ProductId }) : [];
                                        if (source && source.length > 0) {
                                            var ratio = 0;
                                            var pr = citem.IsLargeUnit ? source[0].PriceLargeUnit : source[0].Price;
                                            if (citem.BasePrice) {
                                                ratio = ((citem.BasePrice - pr) / citem.BasePrice) * 100;
                                            }
                                            citem.DiscountRatio = ratio;
                                            citem.Price = pr;
                                        } else {
                                            citem.DiscountRatio = 0;
                                            citem.Price = citem.BasePrice;
                                        }
                                    });

                                }, function (error) {
                                    $rootScope.showLoading = false;
                                    $scope.posnotification.show(getMessage(error), "error");
                                });
                            } else {
                                angular.forEach($scope.order.OrderDetails, function (citem) {
                                    citem.DiscountRatio = 0;
                                    citem.Price = citem.BasePrice;

                                });
                            }
                        }
                        $scope.calcQuantity = function (dataItem) {
                            var modalInstance = $modal.open({
                                backdrop: true,
                                keyboard: true,
                                modalFade: true,
                                templateUrl: 'calc-quantity.html',
                                controller: 'CalcQuantityCtrl',
                                size: 'lg',
                                resolve: {
                                    sender: function () {
                                        return dataItem;
                                    }
                                }
                            });

                            modalInstance.result.then(function (result) {
                                dataItem.Quantity = result.Total ? result.Total : 1;
                                dataItem.Description = result.Desc;
                                dataItem.Spreadsheets = result.Spreadsheets;
                                dataItem.Coefficient = result.OtherValue;
                            }, function () {
                            });
                        }
                        $scope.AddNewProduct = function () {
                            var modalInstance = $modal.open({
                                backdrop: true,
                                keyboard: true,
                                modalFade: true,
                                windowClass: 'xx-dialog',
                                templateUrl: _session.partialPath('product-popup.html'),
                                controller: 'ProductPopupCtrl',
                                resolve: {
                                }
                            });

                            modalInstance.result.then(function (result) {
                                if (result) {
                                    if ($rootScope.IsOnline) {
                                        $http.get('/api/categories/flatten').then(function (response) {
                                            if (response.data)
                                                $scope.categories = response.data;
                                        });
                                    }
                                    server.Products.update(result).then(function (args1) {
                                        // item added or updated
                                        $scope.addProductToCart(result);
                                    });
                                 
                                }
                            }, function () {

                            });
                        }
                        $scope.importExcel = function (dataItem) {
                            var modalInstance = $modal.open({
                                backdrop: true,
                                keyboard: true,
                                modalFade: true,
                                templateUrl: _session.partialPath('importexcel-form.html'),
                                controller: 'ImportExcelCtrl',
                                resolve: {
                                }
                            });

                            modalInstance.result.then(function (result) {
                                if (result && result.length) {
                                    $scope.order.Description = '';
                                    angular.forEach(result, function (item) {
                                        server.Products
                                            .query('AllCode')
                                        .only(item.Code)
                                        .distinct()
                                        .execute()
                                        .then(function (args) {
                                            if (args && args.length > 0) {
                                                var islarge=false;
                                                if (result.Unit&& result.Unit.toLowerCase() == args[0].LargeUnit) {
                                                    islarge=true;
                                                }
                                                $scope.addProductToCart(args[0], item.Quantity, item.Description, item.SerialNumbers, null, islarge, true, item.Price);
                                            } else {
                                                $scope.order.Description += (item.Code + '\n');
                                                $scope.posnotification.show($filter('translate')('label_SearchProduct_NotExisting')+ ":"+ item.Code, "error");
                                            }
                                                
                                        });
                                    });
                                }
                            }, function () {

                            });
                        }
                        $scope.viewSerials = function (dataItem) {
                            var modalInstance = $modal.open({
                                backdrop: true,
                                keyboard: false,
                                modalFade: true,
                                size: 'lg',
                                templateUrl: _session.partialPath('enterserials-form.html'),
                                controller: 'SearchSerialCtrl',
                                resolve: {
                                    sender: function () {
                                        return dataItem;
                                    },
                                }
                            });

                            modalInstance.result.then(function (result) {
                            }, function () {
                            });
                        }
                        $scope.dropPriceBookOptions = {
                            dataSource: new kendo.data.DataSource({
                                transport: {
                                    read: {
                                        dataType: "json",
                                        url: "/api/pricebooks/available?format=json&Auto=true",
                                    }
                                },
                            }),
                            dataTextField: "Name",
                            dataValueField: "Id",
                            autoBind: $rootScope.IsOnline
                        };
                        function newSearch(val) {
                            var deferred = $q.defer();
                            var db = server.getIndexedDB();

                                var result = [];

                                var handleResult = function (event) {
                                    var cursor = event.target.result;
                                    if (cursor && result.length<=25) {
                                        var match = cursor.value.Keyword.match(new RegExp(val, "ig"));
                                        if (match && match.length > 0) {
                                            result.push(cursor.value);

                                        }
                                        cursor.continue();
                                    }
                                };

                                var transaction = db.transaction(["Products"], "readonly");
                                var objectStore = transaction.objectStore("Products");
                                objectStore.openCursor().onsuccess = handleResult;

                                transaction.oncomplete = function (event) {
                                    deferred.resolve(result);
                                };
                            return deferred.promise;
                        }
                        $scope.getProducts = function (val) {
                            if (!val)
                                return null;
                            val = _removeDiacritics.replace(val);
                            val = val.replace(/\s+/g, ' ').replace(/\./g, '\\\.');
                            var optimizeFilter = val.split(' ');
                            
                            var twoWords = [];
                            var buildWords = '';
                            var countWords = 0;
                            if (optimizeFilter.length > 2)
                                for (var i = 0; i < optimizeFilter.length; i++) {
                                    buildWords = buildWords + ' ' + optimizeFilter[i];
                                    countWords++;
                                    if (countWords === 2) {
                                        twoWords.push(buildWords.trim());
                                        buildWords = optimizeFilter[i];
                                        countWords = 1;
                                    }
                                }
                            if ($scope.searchType === 2) {
                                return newSearch(val);

                            } else {
                                 return server.Products.query()
                                .filter(function (value) {
                                    var score = 0;
                                    if (optimizeFilter.length > 1) {
                                        var match = value.Keyword.match(new RegExp(val, "gi"));
                                        if (match && match.length > 0)
                                            score = score + 50;
                                    }
                                    for (var i = 0; i < twoWords.length; i++) {
                                        var match = value.Keyword.match(new RegExp(twoWords[i], "gi"));
                                        if (match && match.length > 0)
                                            score = score + 50;
                                    }
                                    for (var i = 0; i < optimizeFilter.length; i++) {
                                        if (optimizeFilter[i]) {
                                            var match = value.Keyword.match(new RegExp(optimizeFilter[i], "gi"));
                                            if (match && match.length > 0)
                                                score = score + 1;
                                        }

                                    }
                                    if (score > 0) {
                                        value.score = score;
                                        return true;
                                    }
                                    else {
                                        return false
                                    }
                                })
                                .execute()
                                .then(function (args) {
                                    if (args && args.length <= 25)
                                        return $filter('orderBy')(args, "score", true);
                                    else
                                        return $filter('orderBy')(args, "score", true).slice(0, 25);
                                });
                            }
                           
                        };
                        $scope.$on("addbySerialNumber", function (evt, data) {
                            server.Products.get(data.ProductId)
                            .then(function (args) {
                                $scope.addProductToCart(args, 1, null, data.SerialNumber, data.ExpiryDate);
                            });
                        });
                        $scope.addProductToCardByCode = function (event, model) {
                            if (event.keyCode === 13) {
                                var keyword = model;
                                if (keyword) {

                                    $scope.searchForm.inputtypehead.$setViewValue('');
                                    $scope.searchForm.inputtypehead.$render();
                                    var qty = 1;
                                    var serial = null;
                                    if ($scope.searchType === 3) {
                                        try {
                                            var tmpQty = keyword.substring($scope.settings.ElectronicWeightScaleCodeLength, keyword.length);
                                            keyword = keyword.substring(0, $scope.settings.ElectronicWeightScaleCodeLength).trim();
                                            qty = parseInt(tmpQty) / 1000;
                                        } catch (escl) {

                                        }

                                    } else if (($scope.searchType === 4 || keyword.indexOf('20') === 0 || keyword.indexOf('23') === 0 || keyword.indexOf('21') === 0) && _session.retailer.Id !== 13557 && _session.retailer.Id !== 19806 && _session.retailer.Id !== 19769) {
                                        try {
                                            if (_session.retailer.Id !== 12098) {
                                                var tmpQty = keyword.substring($scope.settings.ElectronicWeightScaleCodeLength, keyword.length - 1);
                                                if (keyword.indexOf('23') === 0)
                                                    qty = parseInt(tmpQty);
                                                else
                                                    qty = parseInt(tmpQty) / 1000;
                                                keyword = keyword.substring(0, $scope.settings.ElectronicWeightScaleCodeLength).trim();
                                            }  
                                        } catch (escl) {

                                        }
                                    }
                                    else if (_session.retailer.Id === 6622) {
                                        try {
                                            serial = keyword.substring($scope.settings.ElectronicWeightScaleCodeLength, keyword.length);
                                            keyword = keyword.substring(0, $scope.settings.ElectronicWeightScaleCodeLength).trim();
                                        } catch (escl) {

                                        }
                                    }
                                    if (keyword) {
                                        keyword = keyword.toUpperCase();
                                    }
                                    return server.Products
                                    .query('AllCode')
                                    .only(keyword)
                                    .distinct()
                                    .execute()
                                    .then(function (args) {
                                        if (args) {
                                            if (args[0]&&typeof (args[0].LargeUnitCode) !== "undefined" && args[0].LargeUnitCode === keyword) {
                                                $scope.addProductToCart(args[0], qty, null, serial, null, true);
                                            } 
                                            else
                                                $scope.addProductToCart(args[0], qty, null, serial);
                                        }
                                           
                                    });
                                } else {
                                    if ($scope.order.OrderDetails.length) {
                                        var listInput = $(".txtQuantity");
                                        if (listInput && listInput.length > 0) {
                                            $(listInput[0]).focus();

                                        }
                                    }
                                }
                            }
                        }
                        $scope.addProductToCart = function (model, quantity, desc, lot, expdate, isLargeUnit,updatePrice,priceValue) {
                            var tmpT = new Date();
                            if (!quantity) quantity = 1;
                            if (!desc) desc = null;
                            if (!lot) lot = null;
                            if (!expdate) expdate = null;
                            if (!isLargeUnit) isLargeUnit = false;
                            if (model && model.Id > 0) {
                                var price = isLargeUnit ? model.PriceLargeUnit : model.Price;
                                if (updatePrice) {
                                    if (!priceValue) priceValue = 0;
                                    price = priceValue;
                                }
                                var source = ($scope.order.OrderDetails && $scope.order.OrderDetails.length > 0) ? $filter('filter')($scope.order.OrderDetails, { ProductId: model.Id }) : [];
                                if (!model.IsSerialNumberTracking && !model.SplitForSalesOrder && !model.IsTimer && source && source.length > 0) {
                                    if (!model.IsPercentageOfTotalOrder) {
                                        var tmpRow = angular.copy(source[0]);
                                        var idx = $scope.order.OrderDetails.indexOf(source[0]);
                                        if (idx !== -1) {
                                            $scope.order.OrderDetails.splice(idx, 1);
                                            tmpRow.Quantity = tmpRow.Quantity + quantity;
                                            tmpRow.OnHand = model.OnHand;
                                            $scope.order.OrderDetails.unshift(tmpRow)
                                        }
                                        refresh($scope);
                                    }
                                } else {
                                    
                                    if (model.AttributesName && _session.retailer.Id !== 12791) {
                                        desc = desc ? desc : '' + '[' + model.AttributesName + ']';
                                    }
                                    var addtoexistslot = null;

                                    if (model.IsSerialNumberTracking && lot) {
                                        angular.forEach($scope.order.OrderDetails, function (clot) {
                                            if (!addtoexistslot && model.Id === clot.ProductId && !clot.SerialNumbers) {
                                                addtoexistslot = clot;
                                            }
                                            if (model.Id === clot.ProductId && lot === clot.SerialNumbers) {
                                                addtoexistslot = clot;
                                            }
                                        });
                                    }
                                    if (addtoexistslot) {
                                        var tmpRow = angular.copy(addtoexistslot);
                                        var idx = $scope.order.OrderDetails.indexOf(addtoexistslot);
                                        if (idx !== -1) {
                                            $scope.order.OrderDetails.splice(idx, 1);
                                            tmpRow.Quantity = tmpRow.Quantity + quantity;
                                            tmpRow.OnHand = model.OnHand;
                                            tmpRow.SerialNumbers = lot;
                                            tmpRow.ExpiryDate = expdate;
                                            $scope.order.OrderDetails.unshift(tmpRow)
                                        }
                                    }
                                    else {
                                        if ($scope.order.PriceBookId && !model.IsTimer && $rootScope.IsOnline) {
                                            _PriceBookResource.getprice({ pricebookId: $scope.order.PriceBookId, ProductId: model.Id }, function (data) {
                                                var ratio = 0;
                                                var pr = (data && data.Price !== -2412) ? data.Price : model.Price;
                                                if (model.Price) {
                                                    ratio = ((model.Price - pr) / model.Price) * 100;
                                                }
                                                var prLarge = (data && data.PriceLargeUnit !== -2412) ? data.PriceLargeUnit : model.PriceLargeUnit;
                                                $scope.order.OrderDetails.unshift({ ProductId: model.Id, Code: model.Code, Name: model.Name, Quantity: quantity, AttributesName: model.AttributesName, IsSerialNumberTracking: model.IsSerialNumberTracking, SerialNumbers: lot, ExpiryDate: expdate, Price: pr, BasePrice: model.Price, IsPercentageOfTotalOrder: model.IsPercentageOfTotalOrder, Description: desc, OrderQuickNotes: model.OrderQuickNotes, Unit: model.Unit, LargeUnit: model.LargeUnit, PriceLargeUnit: prLarge, IsLargeUnit: isLargeUnit, UnitPrice: model.Price, ConversionValue: model.ConversionValue, PercentageOfTotalOrderValue: model.Price, DiscountRatio: ratio, OnHand: model.OnHand, ProductType: model.ProductType, IsTimer: model.IsTimer, Checkin: tmpT, Coefficient: model.Coefficient, BonusPoint: model.BonusPoint, BonusPointForAssistant: model.BonusPointForAssistant, BonusPointForAssistant2: model.BonusPointForAssistant2, BonusPointForAssistant3: model.BonusPointForAssistant3, PriceConfig: model.PriceConfig, BlockOfTimeToUseService: model.BlockOfTimeToUseService, IsPriceForBlock: model.IsPriceForBlock, Specifications: model.Specifications });
                                                refresh($scope);
                                            }, function (error) {
                                                $scope.order.OrderDetails.unshift({ ProductId: model.Id, Code: model.Code, Name: model.Name, Quantity: quantity, AttributesName: model.AttributesName, IsSerialNumberTracking: model.IsSerialNumberTracking, SerialNumbers: lot, ExpiryDate: expdate, Price: model.Price, BasePrice: model.Price, IsPercentageOfTotalOrder: model.IsPercentageOfTotalOrder, Description: desc, OrderQuickNotes: model.OrderQuickNotes, Unit: model.Unit, LargeUnit: model.LargeUnit, PriceLargeUnit: model.PriceLargeUnit, IsLargeUnit: isLargeUnit, UnitPrice: model.Price, ConversionValue: model.ConversionValue, PercentageOfTotalOrderValue: model.Price, DiscountRatio: 0, OnHand: model.OnHand, ProductType: model.ProductType, IsTimer: model.IsTimer, Checkin: tmpT, Coefficient: model.Coefficient, BonusPoint: model.BonusPoint, BonusPointForAssistant: model.BonusPointForAssistant, BonusPointForAssistant2: model.BonusPointForAssistant2, BonusPointForAssistant3: model.BonusPointForAssistant3, PriceConfig: model.PriceConfig, BlockOfTimeToUseService: model.BlockOfTimeToUseService, IsPriceForBlock: model.IsPriceForBlock, Specifications: model.Specifications });
                                                $scope.posnotification.show(getMessage(error), "error");
                                                refresh($scope);
                                            });
                                        }
                                        else
                                            $scope.order.OrderDetails.unshift({ ProductId: model.Id, Code: model.Code, Name: model.Name, Quantity: quantity, AttributesName: model.AttributesName, IsSerialNumberTracking: model.IsSerialNumberTracking, SerialNumbers: lot, ExpiryDate: expdate, Price: price, BasePrice: model.Price, IsPercentageOfTotalOrder: model.IsPercentageOfTotalOrder, Description: desc, OrderQuickNotes: model.OrderQuickNotes, Unit: model.Unit, LargeUnit: model.LargeUnit, PriceLargeUnit: model.PriceLargeUnit, IsLargeUnit: isLargeUnit, UnitPrice: model.Price, ConversionValue: model.ConversionValue, PercentageOfTotalOrderValue: model.Price, DiscountRatio: 0, OnHand: model.OnHand, ProductType: model.ProductType, IsTimer: model.IsTimer, Checkin: tmpT, Coefficient: model.Coefficient, BonusPoint: model.BonusPoint, BonusPointForAssistant: model.BonusPointForAssistant, BonusPointForAssistant2: model.BonusPointForAssistant2, BonusPointForAssistant3: model.BonusPointForAssistant3, PriceConfig: model.PriceConfig, BlockOfTimeToUseService: model.BlockOfTimeToUseService, IsPriceForBlock: model.IsPriceForBlock, Specifications: model.Specifications });
                                    }
                                    if (model.IsTimer) {
                                        fnTimer();
                                    }
                                    refresh($scope);
                                }
                               
                            } else
                                $scope.posnotification.show($filter('translate')('label_SearchProduct_NotExisting'), "error");
                            if (!isMobile())
                                $('#inputtypehead').focus();
                        }
                        $scope.changeDiscountRatio = function (custom) {
                            if (typeof (custom) !== "undefined" && custom != null) {
                                $scope.order.DiscountRatio = custom;
                                $scope.order.DiscountValue = 0;
                            }
                            $scope.refreshTotal();
                        }
                        $scope.modaPayment = function () {
                            $scope.modalInstancePayment = $modal.open({
                                backdrop: true,
                                keyboard: true,
                                modalFade: true,
                                templateUrl: 'modaPayment.html',
                                scope: $scope
                            });

                        }
                        $scope.modaPaymentcancel = function () {
                            $scope.modalInstancePayment.dismiss();//$scope.modalInstance.close() also works I think
                            if (!isMobile())
                                $('#inputtypehead').focus();
                        };
                        $scope.changeDiscount = function () {
                            $scope.order.DiscountRatio = 0;
                            $scope.refreshTotal();
                        }

                        $scope.removeItem = function (item) {
                            var index = $.inArray(item, $scope.order.OrderDetails)
                            $scope.order.OrderDetails.splice(index, 1);
                            if (!isMobile())
                                $('#inputtypehead').focus();
                        }
                        //Search Shippingpartner
                        $scope.removeShippingPartner = function () {
                            $scope.order.tmpDeliveryById = null;
                            $scope.order.tmpDeliveryBy = null;
                        }
                        $scope.getShippingPartners = function (val) {
                            return $http.get('/api/autocomplete/partners', {
                                params: {
                                    Keyword: val,
                                    format: 'json',
                                    Type: $scope.PartnerTypeMap.ShippingPartner,
                                }
                            }).then(function (response) {
                                return response.data;
                            });
                        };
                        $scope.addShippingPartnerToCardByCode = function (event, model) {
                            if (event.keyCode === 13) {
                                var keyword = model;
                                $scope.inputForm.inputtypeheadShippingpartner.$setViewValue('');
                                $scope.inputForm.inputtypeheadShippingpartner.$render();
                                $http.get('/api/partners/getbycode', {
                                    params: {
                                        Code: keyword,
                                        Type: $scope.PartnerTypeMap.ShippingPartner,
                                        format: 'json'
                                    }
                                }).then(function (response) {
                                    return $scope.addShippingPartnerToCart(response.data);
                                });

                            }

                        }
                        $scope.addShippingPartnerToCart = function (model) {
                            if (model && model.Id > 0) {
                                $scope.order.tmpDeliveryById = model.Id;
                                $scope.order.tmpDeliveryBy = model;

                            } else
                                $scope.posnotification.show($filter('translate')('label_SearchPartner_NotExisting'), "error");
                        }
                        $scope.AddShippingPartner = function (partnerId) {
                            var modalInstance = $modal.open({
                                backdrop: true,
                                keyboard: true,
                                modalFade: true,
                                templateUrl: _session.partialPath('partner-popup.html'),
                                controller: 'ShippingDialogCtrl',
                                resolve: {
                                    senderId: function () {
                                        return partnerId;
                                    }
                                }
                            });
                            modalInstance.result.then(function (result) {
                                if (result) {
                                    $scope.order.tmpDeliveryById = result.Id;
                                    $scope.order.tmpDeliveryBy = result;
                                } else {
                                    $scope.order.tmpDeliveryById = null;
                                    $scope.order.tmpDeliveryBy = null;
                                }
                            }, function () {

                            });

                        }
                        //End Search Partner
                        //Search Partner
                        $scope.removePartner = function () {
                            $scope.order.PartnerId = null;
                            $scope.order.Partner = null;
                            $scope.order.Discount = 0;
                            $scope.order.DiscountRatio = 0;
                            if (typeof $scope.order.MoreAttributes === 'undefined' || !$scope.order.MoreAttributes)
                                $scope.order.MoreAttributes = {};
                            $scope.order.MoreAttributes.OldDebt = 0;
                            $scope.order.MoreAttributes.PointDiscount = 0;

                            $scope.refreshTotal();
                        }
                        $scope.getPartners = function (val) {
                            if (!val)
                                return null;
                            val = val.replace(/\s+/g, ' ');
                            val = _removeDiacritics.replace(val);

                            var deferred = $q.defer();
                            var db = server.getIndexedDB();

                            var result = [];

                            var handleResult = function (event) {
                                var cursor = event.target.result;
                                if (cursor && result.length <= 10) {
                                    var match = cursor.value.Keyword.match(new RegExp(val, "ig"));
                                    if (match && match.length > 0) {
                                        result.push(cursor.value);

                                    }
                                    cursor.continue();
                                }
                            };

                            var transaction = db.transaction(["Customers"], "readonly");
                            var objectStore = transaction.objectStore("Customers");
                            objectStore.openCursor().onsuccess = handleResult;

                            transaction.oncomplete = function (event) {
                                deferred.resolve(result);
                            };
                            return deferred.promise;
                           // return server.Customers.query()
                           //.filter(function (value) {

                           //    var score = 0;
                           //    var optimizeFilter = val.split(' ');
                           //    if (optimizeFilter.length > 1) {
                           //        var match = value.Keyword.match(new RegExp(val, "ig"));
                           //        if (match && match.length > 0)
                           //            score = score + 50;
                           //    }

                           //    for (var i = 0; i < optimizeFilter.length; i++) {
                           //        if (optimizeFilter[i]) {
                           //            var match = value.Keyword.match(new RegExp(optimizeFilter[i], "ig"));
                           //            if (match && match.length > 0)
                           //                score = score + match.length;
                           //        }

                           //    }
                           //    if (score > 0) {
                           //        value.score = score;
                           //        return true;
                           //    }
                           //    else {
                           //        return false
                           //    }
                           //})
                           //.execute()
                           //.then(function (args) {
                           //    if (args && args.length <= 8)
                           //        return $filter('orderBy')(args, "score", true);
                           //    else
                           //        return $filter('orderBy')(args, "score", true).slice(0, 8);
                           //});
                        };
                        $scope.addPartnerToCardByCode = function (event, model) {
                            if (event.keyCode === 13) {
                                var keyword = model;
                                $scope.inputForm.inputtypeheadpartner.$setViewValue('');
                                $scope.inputForm.inputtypeheadpartner.$render();
                                return server.Customers
                                .query('Code')
                                .only(keyword)
                                .distinct()
                                .execute()
                                .then(function (args) {
                                    if (args)
                                        $scope.addPartnerToCart(args[0]);
                                });
                            }
                        }
                        $scope.reCheckDebt = function (model) {
                            server.Customers.update(model).then(function (args1) {
                                $scope.order.PartnerId = model.Id;
                                $scope.order.Partner = model;
                                if (typeof $scope.order.MoreAttributes === 'undefined' || !$scope.order.MoreAttributes)
                                    $scope.order.MoreAttributes = {};
                                $scope.order.MoreAttributes.OldDebt = model.Debt;
                                if (_session.retailer.Id === 14720) {
                                    if (typeof $scope.order.MoreAttributes === 'undefined' || !$scope.order.MoreAttributes)
                                        $scope.order.MoreAttributes = {};
                                    $scope.order.MoreAttributes.OldDebt = model.TotalDebt;
                                }
                                refresh($scope);
                                if (model.PartnerGroupMembers && model.PartnerGroupMembers.length > 0) {

                                    var arr = $.map(model.PartnerGroupMembers, function (gr) { return gr.GroupId });
                                    server.PartnerGroup.query()
                                     .filter(function (person) { return arr.indexOf(person.Id) >= 0; })
                                     .execute()
                                     .then(function (result) {
                                         var cDiscountRatio = 0;
                                         var cDiscount = 0;
                                         angular.forEach(result, function (dItem) {
                                             if (dItem.DiscountRatio && dItem.DiscountRatio > cDiscountRatio) {
                                                 cDiscountRatio = dItem.DiscountRatio;
                                             }
                                             if (dItem.Discount && dItem.Discount > cDiscount) {
                                                 cDiscount = dItem.Discount;
                                             }

                                         });
                                         if (cDiscountRatio > 0) {
                                             $scope.order.DiscountRatio = cDiscountRatio;
                                         } else {
                                             $scope.order.DiscountRatio = 0;
                                             if (cDiscount > 0) {
                                                 $scope.order.Discount = cDiscount;
                                             } else {
                                                 $scope.order.Discount = 0;
                                             }
                                         }
                                         $scope.refreshTotal();
                                     });
                                    if ($scope.dropPriceBookOptions.dataSource._data && $scope.dropPriceBookOptions.dataSource._data.length > 0) {
                                        var stopCheck = false;
                                        angular.forEach(model.PartnerGroupMembers, function (checkpr) {
                                            if (!stopCheck)
                                                for (var i = 0; i < $scope.dropPriceBookOptions.dataSource._data.length; i++) {
                                                    if (typeof ($scope.dropPriceBookOptions.dataSource._data[i].LimitCustomerGroups) !== "undefined" && $scope.dropPriceBookOptions.dataSource._data[i].LimitCustomerGroups.length > 0)
                                                        var existsPr = $scope.dropPriceBookOptions.dataSource._data[i].LimitCustomerGroups.split(',');
                                                    if ($.inArray(checkpr.GroupId, existsPr)) {
                                                        $scope.order.PriceBookId = $scope.dropPriceBookOptions.dataSource._data[i].Id;
                                                        $scope.changePriceBook();
                                                        stopCheck = true;
                                                        break;
                                                    }
                                                }
                                        })
                                    }

                                } else
                                    $scope.order.Discount = 0;
                               
                            }, function (error) {
                                $rootScope.showLoading = false;
                            });
                        }
                        $scope.addPartnerToCart = function (model) {
                            if (model && model.Id > 0) {
                                if ($rootScope.IsOnline) {
                                    $rootScope.showLoading = true;
                                    $http.get('/api/partners/sync/' + model.Id, {
                                        params: {}
                                    }).then(function (response) {
                                        $rootScope.showLoading = false;
                                        if (response.data && response.data.Id) {

                                            response.data.Keyword = _removeDiacritics.replace(response.data.Code + ' ' + (response.data.Phone ? response.data.Phone : '') + ' ' + response.data.Name);
                                            model = response.data;
                                            $scope.reCheckDebt(model);
                                        }
                                    }, function (error) {
                                        $scope.reCheckDebt(model);
                                        
                                        $rootScope.showLoading = false;
                                    });
                                } else {
                                    $scope.reCheckDebt(model);
                                }
                                
                                
                            } else
                                $scope.posnotification.show($filter('translate')('label_SearchPartner_NotExisting'), "error");
                        }
                        $scope.AddPartner = function (partnerId) {
                            var modalInstance = $modal.open({
                                backdrop: true,
                                keyboard: true,
                                modalFade: true,
                                templateUrl: _session.partialPath('partner-popup.html'),
                                controller: 'PartnerUpdateCtrl',
                                resolve: {
                                    senderId: function () {
                                        return partnerId;
                                    }
                                }
                            });

                            modalInstance.result.then(function (result) {
                                if (result) {
                                    $scope.order.PartnerId = result.Id;
                                    $scope.order.Partner = result;
                                    if (typeof $scope.order.MoreAttributes === 'undefined' || !$scope.order.MoreAttributes)
                                        $scope.order.MoreAttributes = {};
                                    $scope.order.MoreAttributes.OldDebt = result.Debt;
                                    if (_session.retailer.Id === 14720) {
                                        if (typeof $scope.order.MoreAttributes === 'undefined' || !$scope.order.MoreAttributes)
                                            $scope.order.MoreAttributes = {};
                                        $scope.order.MoreAttributes.OldDebt = result.TotalDebt;
                                    }

                                } else {
                                    $scope.order.PartnerId = null;
                                    $scope.order.Partner = null;
                                    if (typeof $scope.order.MoreAttributes === 'undefined' || !$scope.order.MoreAttributes)
                                        $scope.order.MoreAttributes = {};
                                    $scope.order.MoreAttributes.OldDebt = 0;
                                }
                            }, function () {

                            });

                        }
                        
                        $scope.ChangePrintType = function (size) {
                            $scope.printLayout = size;
                            if (window.localStorage)
                                localStorage.setItem('Print-' + _session.branch.Id, $scope.printLayout);
                            $scope.posnotification.show($filter("stringFormat")($filter('translate')('label_LargePrintLayout_Change'), ($scope.printLayout === 1 ? $filter('translate')('label_SmallPrintLayout') : $filter('translate')('label_LargePrintLayout'))), "success");
                        }
                        $scope.PrintAfterPay = function () {
                            $scope.printAfterSave = !$scope.printAfterSave;
                            if (window.localStorage)
                                localStorage.setItem('PrintAfterSave-' + _session.branch.Id, $scope.printAfterSave);

                        }
                        $scope.DontPrintEmptyPrice = function () {
                            $scope.dontprintEmptyPrice = !$scope.dontprintEmptyPrice;
                            if (window.localStorage)
                                localStorage.setItem('PrintEmptyPrice-' + _session.branch.Id, $scope.dontprintEmptyPrice);

                        }
                        $scope.CopyReceiptPrinting = function () {
                            $scope.copyReceiptPrinting = !$scope.copyReceiptPrinting;
                            if (window.localStorage)
                                localStorage.setItem('copyReceiptPrinting-' + _session.branch.Id, $scope.copyReceiptPrinting);

                        }
                        $scope.print = function () {
                            if (!$scope.settings.AllowPrintPreview) {
                                $scope.posnotification.show($filter('translate')('message_AccessDenied'), "error");
                                return;
                            }
                            if ($scope.order.Id) {
                                return;
                            }
                            if (($scope.order.PartnerId || ($scope.order.Partner && $scope.order.Partner.Name)) && $scope.order.ExcessCash && $scope.order.ExcessCash < 0) {
                                $scope.order.ExcessCashType = 1;
                            }
                            var myDest = {};
                            angular.copy($scope.order, myDest);
                            if (myDest.PartnerId) {
                                if (myDest.ExcessCashType) {
                                    if (_session.retailer.Id === 14720) {
                                        myDest.Partner.OldDebt = myDest.Partner.TotalDebt;
                                        myDest.Partner.Debt = myDest.Partner.TotalDebt - myDest.ExcessCash;
                                    } else {
                                        myDest.Partner.OldDebt = myDest.Partner.Debt;
                                        myDest.Partner.Debt = myDest.Partner.Debt - myDest.ExcessCash;
                                    }
                                    
                                } else {
                                    myDest.Partner.OldDebt = myDest.Partner.Debt;
                                }

                            }
                            if (typeof myDest.MoreAttributes !== 'undefined' && myDest.MoreAttributes) {
                                myDest.MoreAttributes = JSON.stringify(myDest.MoreAttributes);
                            }
                            _print(myDest);
                        }
                        var _print = function (myDest) {
                            if ($scope.dontprintEmptyPrice) {
                                var tmpDetails = myDest.OrderDetails.filter(function (item) {
                                    return item.Price > 0;
                                });
                                myDest.OrderDetails = tmpDetails;
                            }
                            myDest.OrderDetails = myDest.OrderDetails.reverse();
                            var tmpTotalPayment = myDest.TotalPayment;
                            myDest.AmountReceived = tmpTotalPayment;
                            if (myDest.ExcessCashType === 0) {
                                myDest.TotalPayment = tmpTotalPayment - myDest.ExcessCash;
                            }
                            
                            if (!myDest.PurchaseDate)
                                myDest.PurchaseDate = new Date();
                            var template = '';
                            if (myDest.Status == $scope.OrderStateMap.Completed) {
                                if ($scope.printLayout === 1)
                                    template = localStorage['SmallPrintLayout-' + _session.branch.Id];
                                else
                                    template = localStorage['LargePrintLayout-' + _session.branch.Id];
                            } else {
                                template = localStorage['OnOrderLayout-' + _session.branch.Id];
                            }
                            if (template) {
                                if (myDest.Partner && myDest.Partner.Id) {
                                    var pointdc = 0;
                                    if (typeof myDest.MoreAttributes !== 'undefined' && myDest.MoreAttributes && myDest.MoreAttributes.PointDiscount)
                                        pointdc = myDest.MoreAttributes.PointDiscount;
                                    var cv=(_session.pointconfig.ValueToPoint ? _session.pointconfig.ValueToPoint : 0);
                                    if (cv!==0) {
                                        myDest.Partner.NewPoint = myDest.Partner.Point - pointdc + (myDest.Total / cv);
                                        }else {
                                        myDest.Partner.NewPoint = myDest.Partner.Point - pointdc;
                                    }
                                    
                                }
                                myDest.SoldBy = { Name: _session.auditusers[$scope.order.SoldById] };
                                myDest.CurrentRetailer = _session.retailer;
                                myDest.CurrentBranch = _session.branch;
                                if (!myDest.Code) {
                                    myDest.Code = '';
                                }
                                if ((qz && qz.websocket.isActive()) && ($scope.settings.ReceiptPrinterName)) {
                                    var config = qz.configs.create($scope.settings.ReceiptPrinterName, { density: ($scope.printLayout === 1 ? $scope.settings.PRP80DPI : $scope.settings.A4DPI), copies: ($scope.copyReceiptPrinting ? 2 : 1) });
                                    var data = [
                                    {
                                        type: 'html',
                                        format: 'plain',
                                        data: _posPrinterService.parsingTemplates(template, $scope.printLayout, myDest)
                                    }
                                    ];
                                    qz.print(config, data).then(function () {
                                    }).catch(function (e) {

                                    });
                                    if (_session.retailer.Id === 8481) {
                                        var config2 = qz.configs.create('IN BCB', { density: ($scope.printLayout === 1 ? $scope.settings.PRP80DPI : $scope.settings.A4DPI), copies: ($scope.copyReceiptPrinting ? 2 : 1) });
                                        qz.print(config2, data).then(function () {
                                        }).catch(function (e) {

                                        });
                                    }
                                    if (!isMobile())
                                        $('#inputtypehead').focus();
                                } else {
                                    if (_session.retailer.Id === 15975) {
                                        if (typeof Android !== "undefined" && Android !== null) {
                                            var tmpLayout = _posPrinterService.parsingTemplates(template, $scope.printLayout, myDest);
                                            Android.print(tmpLayout);

                                        } else {
                                            _posPrinterService.printHtml(template, $scope.printLayout, myDest, "www.pos365.vn");
                                            if (!isMobile())
                                                $('#inputtypehead').focus();
                                        }
                                    } else {
                                        _posPrinterService.printHtml(template, $scope.printLayout, myDest, "www.pos365.vn");
                                        if (!isMobile())
                                            $('#inputtypehead').focus();
                                    }
                                    
                                }
                            }
                        }
                        function randomString(len, an) {
                            an = an && an.toLowerCase();
                            var str = "", i = 0, min = an == "a" ? 10 : 0, max = an == "n" ? 10 : 62;
                            for (; i++ < len;) {
                                var r = Math.random() * (max - min) + min << 0;
                                str += String.fromCharCode(r += r > 9 ? r < 36 ? 55 : 61 : 48);
                            }
                            return str;
                        }
                        var _savetolocal = function (myDest) {
                            if (myDest.AccountId && myDest.AccountId == 978) {
                                $rootScope.showLoading = false;
                                $scope.posnotification.show($filter('translate')('message_QRCodeOnline'), "error");
                                return;
                            }
                            var dontupdateonhand = false;
                            if (myDest.SyncStatus === 2) {
                                dontupdateonhand = true;
                            }
                            if (!$scope.order.PurchaseDate) {
                                $scope.order.PurchaseDate = new Date();
                            }
                            myDest.SyncStatus = 2;
                            if (!myDest.Code) {
                                myDest.Code = 'OFFLINE' + randomString(8, "N");
                            }
                            if ($scope.printAfterSave) {
                                var myDestpr = {};
                                angular.copy(myDest, myDestpr);
                                _print(myDestpr);
                            }
                            for (var i = 0; i < $scope.tabs.length; i++) {
                                if ($scope.tabs[i].paneId === myDest.OfflineId) {
                                    $scope.tabs.splice(i, 1);
                                    refresh($scope);
                                    if ($scope.tabs.length > 0)
                                        $scope.tabs[0].active = true;
                                    else
                                        $scope.addTab();
                                    break;
                                }
                            }
                            server.Orders.remove(myDest.OfflineId).then(function (key) {
                                myDest.OfflineId = getId();
                                server.Orders.update(myDest).then(function (args1) {
                                    server.Orders.query()
                                    .filter('SyncStatus', 2)
                                    .execute()
                                    .then(function (results) {
                                        $scope.numberofoffline = results ? results.length : 0;
                                    });
                                    
                                    if (myDest.Status === $scope.OrderStateMap.Completed && !dontupdateonhand)
                                        angular.forEach(myDest.OrderDetails, function (reduceOnhand) {
                                            if (reduceOnhand.ProductType && reduceOnhand.ProductType === 1) {

                                                var source = ($scope.productsPanel && $scope.productsPanel.length > 0) ? $filter('filter')($scope.productsPanel, { Id: reduceOnhand.ProductId }) : [];
                                                if (source && source.length > 0) {
                                                    source[0].OnHand = source[0].OnHand - reduceOnhand.Quantity;
                                                }
                                                server.Products.get(reduceOnhand.ProductId)
                                                    .then(function (args) {
                                                        // do something with the results
                                                        if (args) {
                                                            args.OnHand = args.OnHand - reduceOnhand.Quantity;
                                                            server.Products.update(args).then(function (args1) {
                                                                // item added or updated
                                                            });
                                                        }
                                                    });
                                            }
                                        });
                                    if (myDest.PartnerId) {
                                        server.Customers.get(myDest.PartnerId)
                                                    .then(function (args) {
                                                        // do something with the results
                                                        if (args) {
                                                            var tmpTotalPayment = myDest.TotalPayment;

                                                            if (myDest.ExcessCashType === 0) {
                                                                tmpTotalPayment = tmpTotalPayment - myDest.ExcessCash;
                                                            }
                                                            args.Debt = data.Debt + myDest.Total - tmpTotalPayment;
                                                            server.Customers.update(args).then(function (args1) {
                                                                // item added or updated
                                                            });
                                                        }
                                                    });

                                    }
                                    $rootScope.showLoading = false;
                                    $scope.posnotification.show($filter('translate')('message_SaveSuccess'), "success");
                                    refresh($scope);
                                });
                            });
                            
                            
                        }
                        $scope.QrCodeCheck = function (myDest) {
                            var modalInstance = $modal.open({
                                backdrop: true,
                                keyboard: false,
                                modalFade: true,
                                templateUrl: _session.partialPath('open-qrcode.html'),
                                controller: 'ProcessingQrCodeCtrl',
                                resolve: {
                                    sender: function () {
                                        return myDest;
                                    }
                                }
                            });

                            modalInstance.result.then(function (result) {

                            }, function () {

                            });

                        }
                        $scope.$on('rePrint', function (event, args) {
                            _print(args);
                        });
                        var _saveorder = function (myDest) {
                            if ($scope.modalInstancePayment) {
                                $scope.modalInstancePayment.dismiss();
                            }
                            if (myDest.AccountId && myDest.AccountId == 978 && (!$scope.settings.QrCodeEnable || !$scope.settings.MerchantCode || !$scope.settings.MerchantName)) {
                                $rootScope.showLoading = false;
                                $scope.posnotification.show($filter('translate')('message_QRCodeConfig'), "error");
                                return;
                            }
                            if ($rootScope.IsOnline) {
                                _OrderResource.save({
                                    Order: myDest,
                                    ExcessCashType: myDest.ExcessCashType,
                                    DontSetTime: $scope.DontSetTime,
                                    DeliveryBy: $scope.order.tmpDeliveryById,
                                    ShippingCost: $scope.order.tmpShippingCost,
                                    LadingCode: $scope.order.tmpLadingCode,
                                    QrCodeEnable: $scope.settings.QrCodeEnable,
                                    MerchantName: $scope.settings.MerchantName,
                                    MerchantCode: $scope.settings.MerchantCode
                                }, function (data) {
                                    
                                    myDest.Code = data.Code;
                                    myDest.QRCode = data.QRCode;
                                    myDest.OnlineId = data.Id;
                                    if ($scope.printAfterSave) {
                                        var myDestpr = {};
                                        angular.copy(myDest, myDestpr);
                                        _print(myDestpr);
                                    } else {
                                        if (!isMobile())
                                            $('#inputtypehead').focus();
                                    }
                                    if (!myDest.Id) {
                                        var msgNotify = _session.auditusers[$scope.order.SoldById] +' '+ $filter('translate')('message_Activities_Order')+' '+$filter('formatNumber')(myDest.Total);
                                        $scope.NotificationHub(myDest.Code, msgNotify, myDest.OnlineId);
                                    }
                                    
                                    //remove current Tab
                                    if (myDest.Id || $scope.order.SyncStatus === 2) {
                                        for (var i = 0; i < $scope.tabs.length; i++) {
                                            if ($scope.tabs[i].paneId === myDest.OfflineId) {
                                                server.Orders.remove(myDest.OfflineId).then(function (args) {
                                                });
                                                $scope.tabs.splice(i, 1);
                                                refresh($scope);
                                                if ($scope.tabs.length > 0)
                                                    $scope.tabs[0].active = true;
                                                else
                                                    $scope.addTab();
                                                break;
                                            }

                                        }
                                    } else {
                                        $scope.resetTab();
                                    }
                                    
                                    $rootScope.showLoading = false;
                                    $scope.posnotification.show($filter('translate')('message_SaveSuccess'), "success");
                                    refresh($scope);
                                    
                                    //}
                                    //if (myDest.Status === $scope.OrderStateMap.Completed && myDest.SyncStatus !== 2 && !myDest.Id)
                                    //    angular.forEach(myDest.OrderDetails, function (reduceOnhand) {
                                    //        if (reduceOnhand.ProductType && reduceOnhand.ProductType === 1) {
                                               
                                    //            var source = ($scope.productsPanel && $scope.productsPanel.length > 0) ? $filter('filter')($scope.productsPanel, { Id: reduceOnhand.ProductId }) : [];
                                    //            if (source && source.length > 0) {
                                    //                source[0].OnHand = source[0].OnHand - reduceOnhand.Quantity;
                                    //            }
                                    //            server.Products.get(reduceOnhand.ProductId)
                                    //                    .then(function (args) {
                                    //                        // do something with the results
                                    //                        if (args) {
                                    //                            args.OnHand = args.OnHand - reduceOnhand.Quantity;
                                    //                            server.Products.update(args).then(function (args1) {
                                    //                                // item added or updated
                                    //                            });
                                    //                        }
                                    //                    });
                                    //        }
                                    //    });
                                    
                                    //if (myDest.SyncStatus === 2) {
                                    //    server.Orders.query()
                                    //                                .filter('SyncStatus', 2)
                                    //                                .execute()
                                    //                                .then(function (results) {
                                    //                                    $scope.numberofoffline = results ? results.length : 0;
                                    //                                });
                                    //}
                                    if (!myDest.Id && myDest.AccountId && myDest.AccountId == 978 && $scope.settings.QrCodeEnable && $scope.settings.MerchantCode && $scope.settings.MerchantName) {
                                        $scope.QrCodeCheck(myDest);
                                    }
                                }, function (error) {
                                    $scope.order.PartnerId = myDest.PartnerId;
                                    $rootScope.showLoading = false;
                                    if (error.status === -1) {
                                        _savetolocal(myDest);
                                        if (!isMobile())
                                            $('#inputtypehead').focus();
                                    } else {
                                        
                                        $scope.posnotification.show(getMessage(error), "error");
                                    }
                                    
                                });
                                try {
                                    ga('set', {
                                        page: '/Sell',
                                        title: $filter('translate')('menu_Sell')
                                    });
                                    ga('send', 'pageview');
                                } catch (err) {
                                }
                            } else {
                                _savetolocal(myDest);
                            }
                            
                        }
                        $scope.save = function () {
                            //if (!$scope.inputForm.$valid) {
                            //    $scope.posnotification.show($filter('translate')('message_ValidateSummary'), "error");
                            //    return;
                            //}

                            if ($scope.order.OrderDetails.length === 0) {
                                $scope.posnotification.show($filter('translate')('message_ValidateCartEmpty'), "error");
                                return;
                            }
                            if (!$rootScope.showLoading) {
                                $rootScope.showLoading = true;
                                if (($scope.order.PartnerId || ($scope.order.Partner && $scope.order.Partner.Name)) && $scope.order.ExcessCash && $scope.order.ExcessCash < 0) {
                                    $scope.order.ExcessCashType = 1;
                                }
                                var myDest = {};
                                angular.copy($scope.order, myDest);
                                if (!myDest.PurchaseDate) {
                                    $scope.DontSetTime = true;
                                    myDest.PurchaseDate = new Date();
                                }
                                if (typeof myDest.MoreAttributes !== 'undefined' && myDest.MoreAttributes) {
                                    var tmpConvert = JSON.stringify(myDest.MoreAttributes);
                                    myDest.MoreAttributes = tmpConvert; 
                                }
                                _saveorder(myDest);
                            }


                        }
                        $scope.openNotebook = function () {
                            var modalInstance = $modal.open({
                                backdrop: true,
                                keyboard: true,
                                modalFade: true,
                                templateUrl: _session.partialPath('open-notebook.html'),
                                controller: 'NotebookCtrl',
                                size: 'lg',
                            });

                            modalInstance.result.then(function (result) {
                                angular.forEach(result, function (item) {
                                    server.Products.get(item.ProductId)
                                        .then(function (args) {
                                            $scope.addProductToCart(args, item.Quantity, item.Description, null, null, false, true, item.Price);
                                    });
                                });

                            }, function () {

                            });
                        }
                        $scope.makeReturn = function () {
                            var modalInstance = $modal.open({
                                backdrop: true,
                                keyboard: true,
                                modalFade: true,
                                templateUrl: _session.partialPath('return-form.html'),
                                controller: 'UpdateReturnCtrl',
                                size: 'lg',
                                resolve: {
                                    sender: function () {
                                        return null;
                                    }
                                }
                            });

                            modalInstance.result.then(function (result) {
                                if (result) {
                                    _posPrinterService.getTemplate(5, function (template) {
                                        result.ReceivedBy = { Name: _session.auditusers[_session.user.Id] };
                                        result.CurrentRetailer = _session.retailer;
                                        result.CurrentBranch = _session.branch;
                                        _posPrinterService.printHtml(template.Content, 5, result, "www.pos365.vn");
                                    })
                                }
                            }, function () {

                            });
                        }
                        $scope.checkPrice = function () {
                                var modalInstance = $modal.open({
                                    backdrop: true,
                                    keyboard: true,
                                    modalFade: true,
                                    templateUrl: "checkprice.html",
                                    controller: 'CheckPriceCtrl',
                                    windowClass: 'full',
                                });
                                modalInstance.result.then(function (result) {
                                }, function () {
                                });

                        }

                    }
    ])
    .controller('CheckPriceCtrl', [
                                  '$rootScope', '$scope', '$translate', '$filter', 'posSession', '$modalInstance', 'removeDiacritics', 'debounce', 'ProductTypeMap', 'PrivilegeHelper', function ($rootScope, $scope, $translate, $filter, _session, $modalInstance, _removeDiacritics, debounce, _ProductTypeMap,_privilege) {
                                      $scope.cancel = function () {
                                          $modalInstance.dismiss('cancel');
                                      };
                                      $scope._p = _privilege;
                                      $scope.ProductTypeMap = _ProductTypeMap;
                                      $scope.productkey = "";
                                      $scope.calcData = new kendo.data.ObservableArray([]);
                                      var fn = debounce(300, function () {
                                          var val = _removeDiacritics.replace($scope.productkey);
                                          val = val.replace(/\s+/g, ' ');
                                          server.Products.query()
                                         .filter(function (value) {
                                             if (!val) {
                                                 return true;
                                             }
                                             var score = 0;
                                             var optimizeFilter = val.split(' ');
                                             if (optimizeFilter.length > 1) {
                                                 var match = value.Keyword.match(new RegExp(val, "ig"));
                                                 if (match && match.length > 0)
                                                     score = score + 50;
                                             }
                                             for (var i = 0; i < optimizeFilter.length; i++) {
                                                 if (optimizeFilter[i]) {
                                                     var match = value.Keyword.match(new RegExp(optimizeFilter[i], "ig"));
                                                     if (match && match.length > 0)
                                                         score = score + match.length;
                                                     if (value.AttributesName) {
                                                         var matchatt = value.AttributesName.match(new RegExp(optimizeFilter[i], "ig"));
                                                         if (matchatt && matchatt.length > 0)
                                                             score = score + matchatt.length;
                                                     }

                                                 }

                                             }
                                             if (score > 0) {
                                                 value.score = score;
                                                 return true;
                                             }
                                             else {
                                                 return false
                                             }
                                         })
                                         .execute()
                                         .then(function (args) {
                                             $scope.calcData.splice(0, $scope.calcData.length);
                                             if (args && args.length <= 50)
                                                 $scope.calcData.push.apply($scope.calcData, $filter('orderBy')(args, "score", true));
                                             else
                                                 $scope.calcData.push.apply($scope.calcData, $filter('orderBy')(args, "score", true).slice(0, 50));
                                         });
                                      });
                                      fn();
                                      
                                      $scope.getPriceList = function () {
                                          fn();
                                      }
                                      $scope.mainGridCheckPriceOptions = {
                                          dataSource: {
                                              data: $scope.calcData,
                                              schema: {
                                                  model: {
                                                      fields: {
                                                          Code: { type: "string" },
                                                          Name: { type: "string" },
                                                          AttributesName: { type: "string" },
                                                          Unit: { type: "string" },
                                                      }
                                                  },
                                              },

                                          },

                                          sortable: false,
                                          resizable: true,
                                          reorderable: false,
                                          columnMenu: false,
                                          detailExpand: $rootScope.kendoDetailExpand,
                                          columns: [{
                                              field: "Code",
                                              title: $filter('translate')('label_Product_Code'),
                                              width: "140px"
                                          }
                                          ,
                                          {
                                              field: "Name",
                                              title: $filter('translate')('label_Product_Name'),
                                              template: "{{dataItem.Name}}",
                                          }, {
                                              field: "OnHand",
                                              title: $filter('translate')('label_Product_OnHand'),
                                              attributes: { "class": "text-right hassum", },
                                              template: "{{dataItem.ProductType==ProductTypeMap.Standard?(dataItem.OnHand|formatNumber):'---'}}<span class='gridDescSize' ng-show='dataItem.OnHand!=dataItem.TotalOnHand&&dataItem.ProductType==ProductTypeMap.Standard'></span><br><span class='gridDesc themecolor' ng-show='dataItem.LargeUnit&&dataItem.ConversionValue&&dataItem.ConversionValue!==1&&dataItem.ProductType==ProductTypeMap.Standard'>{{(dataItem.OnHand/dataItem.ConversionValue)|formatNumber}}<span ng-show='dataItem.OnHand!=dataItem.TotalOnHand'></span></span>",
                                              width: "90px"
                                          },
                                          {
                                              field: "AttributesName",
                                              title: $filter('translate')('label_Product_Attributes'),
                                              template: "<span class='gridDesc' style='color:red'>{{dataItem.AttributesName?dataItem.AttributesName:''}}</span>",
                                          },
                                          {
                                              field: "Unit",
                                              title: $filter('translate')('label_Product_Unit'),
                                              attributes: { "class": "text-right", },
                                              template: "{{dataItem.Unit?dataItem.Unit:''}}<br /><span class='gridDesc themecolor'>{{dataItem.LargeUnit?dataItem.LargeUnit:''}}</span>",
                                              width: "70px"
                                          },
                                          {
                                              field: "Price",
                                              title: $filter('translate')('label_Price'),

                                              template: "<strong style='color:red;'>{{dataItem.Price|formatNumber}}</strong><br />{{((dataItem.Price!=dataItem.PriceLargeUnit)&&dataItem.LargeUnit)?(dataItem.PriceLargeUnit|formatNumber):''}}</span>",
                                              attributes: { "class": "text-right", },
                                              width: "120px",
                                          }
                                          
                                          ],
                                      };
                                      $scope.globalInventoryGridOptions = function (dataItem) {
                                          return {
                                              dataSource: {
                                                  type: "odata",
                                                  transport: {
                                                      read: {
                                                          url: "/api/products/onhandbybranchs?format=json",
                                                          dataType: "json",
                                                      }
                                                  },
                                                  schema: {
                                                      data: function (data) {
                                                          return data.results;
                                                      },
                                                      total: function (data) {
                                                          return data.__count;
                                                      },
                                                  },
                                                  error: function (e) {
                                                      $rootScope.KendoTransportError(e);
                                                  },
                                                  serverPaging: true,
                                                  serverSorting: true,
                                                  serverFiltering: true,
                                                  pageSize: 10,
                                                  filter: {
                                                      logic: "and",
                                                      filters: [{ field: "ProductId", operator: "eq", value: dataItem.Id }]
                                                  }
                                              },
                                              scrollable: false,
                                              sortable: false,
                                              pageable: true,
                                              filterable: true,
                                              columns: [
                                                  { field: "Id", title: $filter('translate')('label_Branch_Name'), width: "150px", template: "{{($root.branchs|filter:{Id:dataItem.BranchId})?($root.branchs|filter:{Id:dataItem.BranchId})[0].Name:'---'}}" },
                                                  { field: "OnHand", title: $filter('translate')('label_Product_OnHand'), filterable: false, attributes: { "class": "text-right", }, width: "40px", template: "{{dataItem.OnHand|formatNumber}}" },

                                              ]
                                          };
                                      };
                                  }
    ])
    .controller('CalcQuantityCtrl', [
                                  '$rootScope', '$scope', '$translate', '$filter', 'posSession', '$modalInstance', 'sender', function ($rootScope, $scope, $translate, $filter, _session, $modalInstance, _sender) {
                                      $scope.unit = (_sender.IsLargeUnit && _sender.LargeUnit)?_sender.LargeUnit: _sender.Unit;
                                      if (window.localStorage) {
                                          $scope.nameofvalue1 = localStorage['nameofvalue1'];
                                          if (!$scope.nameofvalue1)
                                              $scope.nameofvalue1 = 'm';
                                          $scope.nameofvalue2 = localStorage['nameofvalue2'];
                                          if (!$scope.nameofvalue2)
                                              $scope.nameofvalue2 = 't';
                                          if (!$scope.nameofvalue3)
                                              $scope.nameofvalue3 = '';
                                          if (!_sender.Coefficient)
                                              $scope.otherValue = 1;
                                          else
                                              $scope.otherValue = _sender.Coefficient;
                                          $scope.changeValue1 = function () {
                                              $scope.refreshDesc();
                                              if (window.localStorage)
                                                  localStorage.setItem('nameofvalue1', $scope.nameofvalue1);
                                          }
                                          $scope.changeValue2 = function () {
                                              $scope.refreshDesc();
                                              if (window.localStorage)
                                                  localStorage.setItem('nameofvalue2', $scope.nameofvalue2);
                                          }
                                          $scope.changeValue3 = function () {
                                              $scope.refreshDesc();
                                              if (window.localStorage)
                                                  localStorage.setItem('nameofvalue3', $scope.nameofvalue3);
                                          }
                                          $scope.changeOtherValue = function () {
                                              $scope.refreshDesc();
                                          }
                                      }

                                      $scope.calcData = new kendo.data.ObservableArray([
                                          { No: 1, value1: null, value2: null, value3: null }
                                          , { No: 2, value1: null, value2: null, value3: null }
                                          , { No: 3, value1: null, value2: null, value3: null }
                                          , { No: 4, value1: null, value2: null, value3: null }
                                          , { No: 5, value1: null, value2: null, value3: null }
                                          , { No: 6, value1: null, value2: null, value3: null }
                                          , { No: 7, value1: null, value2: null, value3: null }
                                          , { No: 8, value1: null, value2: null, value3: null }
                                          , { No: 9, value1: null, value2: null, value3: null }
                                          , { No: 10, value1: null, value2: null, value3: null }
                                          , { No: 11, value1: null, value2: null, value3: null }
                                          , { No: 12, value1: null, value2: null, value3: null }
                                          , { No: 13, value1: null, value2: null, value3: null }
                                          , { No: 14, value1: null, value2: null, value3: null }
                                          , { No: 15, value1: null, value2: null, value3: null }
                                          , { No: 16, value1: null, value2: null, value3: null }
                                          , { No: 17, value1: null, value2: null, value3: null }
                                          , { No: 18, value1: null, value2: null, value3: null }
                                          , { No: 19, value1: null, value2: null, value3: null }
                                          , { No: 20, value1: null, value2: null, value3: null }
                                          , { No: 21, value1: null, value2: null, value3: null }
                                          , { No: 22, value1: null, value2: null, value3: null }
                                          , { No: 23, value1: null, value2: null, value3: null }
                                          , { No: 24, value1: null, value2: null, value3: null }
                                      ]);
                                      if (_sender.Spreadsheets) {
                                          var tmpArr = JSON.parse(_sender.Spreadsheets);
                                          if (tmpArr && tmpArr.length>0) {
                                              angular.forEach($scope.calcData, function (item) {
                                                  var source = (tmpArr && tmpArr.length > 0) ? $filter('filter')(tmpArr, { No: item.No }) : [];
                                                  if (source && source.length > 0) {
                                                      item.value1 = source[0].value1;
                                                      item.value2 = source[0].value2;
                                                      item.value3 = source[0].value3;
                                                  }
                                              });
                                          }
                                      }
                                      $scope.cancel = function () {
                                          $modalInstance.dismiss('cancel');
                                      };
                                      $scope.mainGridSpreadsheetsOptions = {
                                          dataSource: {
                                              data: $scope.calcData,
                                              schema: {
                                                  model: {
                                                      fields: {
                                                          value1:{ type: "number" },
                                                          value2: { type: "number" },
                                                      }
                                                  }
                                              },
                                              pageSize: 10
                                          },
                                          pageable: {
                                              input: false,
                                              numeric: true
                                          },
                                          sortable: false,
                                          resizable: true,
                                          reorderable: false,
                                          columnMenu: false,
                                          columns: [
                                              {
                                                  title: '#',
                                                  field: "No",
                                                  width:50
                                              }
                                              ,
                                              {
                                                  field: "value1",
                                                  title: $filter('translate')('label_Value') + ' 1',
                                                  template: '<div style="width: 100%;" class="input-group"><input  type="text" class="text-right form-control" ng-model="dataItem.value1" select-on-focus ui-numeric="{vMin:0}"></div>',
                                              }
                                              ,
                                              {
                                                  field: "value2",
                                                  title: $filter('translate')('label_Value') + ' 2' ,
                                                  template: '<div style="width: 100%;" class="input-group"><input  type="text" class="text-right form-control" ng-model="dataItem.value2" select-on-focus ui-numeric="{vMin:0}"></div>',
                                              }
                                                ,
                                              {
                                                  field: "value3",
                                                  title: $filter('translate')('label_Value') + ' 3',
                                                  template: '<div style="width: 100%;" class="input-group"><input  type="text" class="text-right form-control" ng-model="dataItem.value3" select-on-focus ui-numeric="{vMin:0}"></div>',
                                              }
                                          ],
                                      };
                                     
                                      $scope.refreshDesc = function () {
                                          $scope.descValue = '';
                                          $scope.totalValue = 0;
                                          angular.forEach($scope.calcData, function (item) {
                                              var subtotal = 0;
                                              var subdesc='';
                                              if (item.value1) {
                                                  if (subtotal === 0) subtotal = 1;
                                                  subtotal = subtotal * item.value1;
                                                  subdesc = subdesc + (subdesc ? ' × ' : '') + $filter('formatNumber')(item.value1) + (($scope.nameofvalue1 ? $scope.nameofvalue1 : ''));
                                              }
                                              if (item.value2) {
                                                  if (subtotal === 0) subtotal = 1;
                                                  subtotal = subtotal * item.value2;
                                                  subdesc = subdesc + (subdesc ? ' × ' : '') + $filter('formatNumber')(item.value2) + (($scope.nameofvalue2 ? $scope.nameofvalue2 : ''));
                                              }
                                              if (item.value3) {
                                                  if (subtotal === 0) subtotal = 1;
                                                  subtotal = subtotal * item.value3;
                                                  subdesc = subdesc + (subdesc ? ' × ' : '') + $filter('formatNumber')(item.value3) + (($scope.nameofvalue3 ? $scope.nameofvalue3 : ''));
                                              }
                                              if (subtotal&&$scope.otherValue && $scope.otherValue != 1) {
                                                  subtotal = subtotal * $scope.otherValue;
                                                  subdesc = subdesc + (subdesc ? ' × ' : '') + $filter('formatNumber')($scope.otherValue);
                                              }

                                              if (!subtotal) {
                                                  subdesc = '';
                                              } else {
                                                  subdesc +=  ', \n';
                                              }
                                              $scope.totalValue += subtotal;
                                              $scope.descValue += subdesc;
                                          });
                                      }
                                      $scope.$watch("calcData", function () {
                                          $scope.refreshDesc();

                                      }, true);
                                      $scope.save = function () {
                                          var tmps = [];
                                          angular.forEach($scope.calcData, function (item) {
                                              tmps.push({ No: item.No, value1: item.value1, value2: item.value2, value3: item.value3 });
                                          });
                                          var returnObj = { Total: $scope.totalValue, Desc: $scope.descValue, Spreadsheets: JSON.stringify(tmps), OtherValue:$scope.otherValue };
                                          if (!$scope.totalValue || $scope.totalValue === 1) {
                                              returnObj.Spreadsheets = null;
                                          }
                                          $modalInstance.close(returnObj);
                                      }
                                  }
    ])
    .controller('ImportExcelCtrl', [
        '$rootScope', '$scope', '$translate', '$filter', 'posSession', '$modalInstance', function ($rootScope, $scope, $translate, $filter, _session, $modalInstance) {
            $scope.templateurl = "https://docs.google.com/uc?id=0B0kuvBxLBrKiUjhSUDU1eEtZcTQ&export=view";
            $scope.cancel = function () {
                $modalInstance.dismiss('cancel');
            };
            $scope.fileExcel = null;
            $scope.setFile = function (element) {
                if (element.files && element.files.length) {
                    $scope.fileExcel = element.files[0];
                } else {
                    $scope.fileExcel = null;
                }
            }
            $scope.uploadExcel = function () {
                //$rootScope.showLoading = true;
               
                var model = new FormData();
                model.append("file", $scope.fileExcel);
                $.ajax({// and other parameter is set here 
                    url: '/Upload/ExcelToJson',
                    type: "POST",
                    data: model,
                    dataType: "json",
                    cache: false,
                    contentType: false,
                    processData: false

                }).always(function (result) {
                    $modalInstance.close(result);
                });
            }
        }
    ])
    .controller('NotebookCtrl', [
                                  '$rootScope', '$scope', '$translate', '$filter', 'kendofilter', 'posSession', '$modalInstance', 'NotebookResource', function ($rootScope, $scope, $translate, $filter, _filter, _session, $modalInstance, _NotebookResource) {
                                      $scope.mainGridNotebookOptions = {
                                          dataSource: {
                                              type: "odata",
                                              transport: {
                                                  read: {
                                                      url: "/api/notebooks?format=json",
                                                      dataType: "json",
                                                  }
                                              },
                                              schema: {
                                                  data: function (data) {
                                                      return data.results;
                                                  },
                                                  total: function (data) {
                                                      return data.__count;
                                                  },
                                                  model: {
                                                      fields: {
                                                          Description: { type: "string" },
                                                      }
                                                  },
                                              },
                                              pageSize: 10,
                                              serverPaging: true,
                                              serverSorting: true,
                                              serverFiltering: true,
                                              error: function (e) {
                                                  // handle error
                                                  $rootScope.KendoTransportError(e);
                                              }
                                          },
                                          sortable: true,
                                          resizable: true,
                                          reorderable: true,
                                          columnMenu: false,
                                          pageable: {
                                              pageSizes: [10, 20, 30],
                                          },
                                          dataBound: function (e) {
                                              if (this.dataSource._total === 1)
                                                  this.expandRow(this.tbody.find("tr.k-master-row").first());
                                          },
                                          detailExpand: $rootScope.kendoDetailExpand,
                                          columns: [{
                                              field: "Name",
                                              title: $filter('translate')('label_Notebook_Name'),
                                              width: "200px"
                                          },
                                          {
                                              field: "Description",
                                              title: $filter('translate')('label_Description'),
                                          }
                                          ,
                                           {
                                               field: "Id",
                                               title: ' ',
                                               template: '<a href="javascript:void(0)" ng-click="openItem(dataItem,$event)"> <span style="font-size: 18px;" class="fa fa-pencil-square-o"></span></a>',
                                               attributes: { "class": "text-center", },
                                               width: "36px"
                                           }
                                          ],
                                      };
                                      $scope.detailGridOptions = function (dataItem) {
                                          return {
                                              dataSource: {
                                                  type: "odata",
                                                  transport: {
                                                      read: {
                                                          url: "/api/notebooks/detail?format=json&Includes=Product&NotebookId=" + dataItem.Id,
                                                          dataType: "json",
                                                      }
                                                  },
                                                  schema: {
                                                      data: function (data) {
                                                          return data.results;
                                                      },
                                                      total: function (data) {
                                                          return data.__count;
                                                      },
                                                      model: {
                                                          fields: {
                                                              Description: { type: "string" },
                                                          }
                                                      },
                                                  },
                                                  error: function (e) {
                                                      // handle error
                                                      $rootScope.KendoTransportError(e);
                                                  },
                                                  serverPaging: true,
                                                  serverSorting: true,
                                                  serverFiltering: true,
                                                  pageSize: 10,
                                                  filter: {
                                                      logic: "and",
                                                      filters: [{ field: "NotebookId", operator: "eq", value: dataItem.Id }]
                                                  }
                                              },
                                              scrollable: false,
                                              sortable: false,
                                              pageable: true,
                                              filterable: true,
                                              columns: [
                                           {
                                               field: "Product.Code",
                                               title: $filter('translate')('label_Product_Code'),
                                               width: "150px"
                                           }
                                           ,
                                           {
                                               field: "Product.Name",
                                               title: $filter('translate')('label_Product_Name'),
                                               template: "#:Product.Name #<br /><span class='gridDesc'>#: Description?Description:'' #</span>",
                                               filterable: false
                                           },
                                           {
                                               field: "Price",
                                               title: $filter('translate')('label_Price'),
                                               attributes: { "class": "text-right", },
                                               template: '{{dataItem.Price|formatNumber}}',
                                               width: "90px",
                                               filterable: false
                                           },
                                           {
                                               field: "Quantity",
                                               title: $filter('translate')('label_Quantity'),
                                               attributes: { "class": "text-right", },
                                               template: '{{dataItem.Quantity|formatNumber}}',
                                               width: "90px",
                                               filterable: false
                                           }
                                              ]
                                          };
                                      };
                                      $scope.filterByNotebookName = function () {

                                          var condition = [], filter = [];
                                          if ($scope.filter.notebook) {
                                              condition.push(_filter.newCondition("Name", $scope.filter.notebook, "contains"));
                                              filter = _filter.append(filter, condition, "or");
                                              _filter.addfilter($scope.mainGridNotebookOptions.dataSource, filter);
                                          } else {
                                              _filter.remove($scope.mainGridNotebookOptions.dataSource, "Name");

                                          }
                                          if ($scope.mainGridNotebook.dataSource.page() !== 1) {
                                              $scope.mainGridNotebook.dataSource.page(1);
                                          }
                                      }
                                      $scope.cancel = function () {
                                          $modalInstance.dismiss('cancel');
                                      };
                                      $scope.openItem = function (data, $event) {
                                          $event.preventDefault();
                                          $event.stopPropagation();
                                          $rootScope.showLoading = true;
                                          _NotebookResource.getDetailForEdit({
                                              NotebookId: data.Id,
                                          }, function (subdata) {
                                              $rootScope.showLoading = false;
                                              $modalInstance.close(subdata);
                                          }, function (error) {
                                              $rootScope.showLoading = false;
                                              $scope.posnotification.show(getMessage(error), "error");
                                          });
                                         
                                      }
                                  }
    ])
    .controller('AttributeFilterlCtrl', ['$rootScope', '$scope', '$translate', '$filter', 'posSession', '$modalInstance', '$http', 'ProductResource', 'sender', function ($rootScope, $scope, $translate, $filter, _session, $modalInstance, $http, _ProductResource, _sender) {
        $scope.modeltitle = $filter('translate')('label_Filter_Attributes');
        $scope.attributes = [];
        if (_sender)
            $scope.attributes = _sender;
        $scope.attributeskeys = [];
        $scope.attributesvalues = [];
        _ProductResource.getAttributes({}, function (data) {
            angular.forEach(data, function (value, key) {
                if ($.inArray(value.Name, $scope.attributeskeys) <= -1) {
                    $scope.attributeskeys.push(value.Name);
                    var source =(data&&data.length>0)? $filter('filter')(data, { Name: value.Name }):[];
                    $scope.attributesvalues[value.Name] = source;
                }
            });
        }, function (error) {
            $scope.posnotification.show(getMessage(error), "error");
        });
        $scope.cancel = function () {
            $modalInstance.close();
        };
        $scope.filter = function () {
            var filterednames = $scope.attributes.filter(function (obj) {
                return obj && obj!=='null';
            });
            if (filterednames && filterednames.length>0) {
                $rootScope.showLoading = true;
                $http.get('/api/products/getidsbyattributes', { params: { Attributes: JSON.stringify(filterednames) } }).then(function (response) {
                    
                    $rootScope.showLoading = false;
                    $modalInstance.close({ ProductIds: response.data, Attributes: $scope.attributes });
                }, function (error) {
                    $rootScope.showLoading = false;
                });
            } else {
                $modalInstance.close(null);
            }

        }

    }])
    .controller('SearchSerialCtrl', ['$rootScope', '$scope', '$translate', '$filter', 'kendofilter', 'posSession', '$modalInstance', '$http', 'sender', function ($rootScope, $scope, $translate, $filter,_filter, _session, $modalInstance, $http, sender) {

    $scope.modeltitle = $filter('translate')('label_ListOfSerials');

    $scope.serialGridOptions = {
        dataSource: {
            type: "odata",
            transport: {
                read: {
                    url: "/api/products/serials?format=json",
                    dataType: "json",
                }
            },
            schema: {
                data: function (data) {
                    return data.results;
                },
                total: function (data) {
                    return data.__count;
                },
            },
            error: function (e) {
                $rootScope.KendoTransportError(e);
            },
            serverPaging: true,
            serverSorting: true,
            serverFiltering: true,
            pageSize: 8,
            filter:initFilter(),
        },
        sortable: true,
        resizable: false,
        reorderable: false,
        columnMenu: false,
        filterable: true,
        pageable: {
            pageSizes: [8, 20, 30],
        },
        columns: [
            { field: "SerialNumber", title: $filter('translate')('label_Product_SerialNumbers'), width: "150px" },
                                       {
                                           field: "ExpiryDate",
                                           title: $filter('translate')('label_ExpirationDate'),
                                           template: "{{dataItem.ExpiryDate?(dataItem.ExpiryDate|parseDate|date:'dd/MM/yyyy'):''}}",
                                       },
                                       {
                                           field: "ExpireIn",
                                           title: $filter('translate')('label_ExpireIn'),
                                           template: "{{dataItem.ExpireIn!==241286?(dataItem.ExpireIn|formatNumber):'---'}}",
                                       },
             {
                 field: "Quantity",
                 title: $filter('translate')('label_Product_OnHand'),
                 width: "100px",
                 attributes: {
                     "class": "text-center",
                 }
             },
                                                       {
                                                           field: "SerialNumber",
                                                           title: ' ',
                                                           template: '<a href="javascript:void(0)" ng-click="addbySerialNumber(dataItem)"> <span style="font-size: 18px;" class="fa fa-cart-plus"></span></a>',
                                                           attributes: { "class": "text-center", },
                                                           width: "36px",
                                                           filterable: false
                                                       }


        ]
    };
    $scope.addbySerialNumber = function (dataItem) {
        $rootScope.$broadcast("addbySerialNumber", { ProductId: dataItem.ProductId, SerialNumber: dataItem.SerialNumber, ExpiryDate: dataItem.ExpiryDate });
        $modalInstance.close(null);
    }
    function initFilter() {
        var filter = [];
            filter = _filter.append(filter, [_filter.newCondition('ProductId', sender.ProductId, 'eq')], 'and');
            filter = _filter.append(filter, [_filter.newCondition('BranchId', $rootScope.currentbranch.Id, 'eq')], 'and');
        return filter;
    }
    $scope.filterbyonhand = function () {
        var condition = [], filter = [];
        if ($scope.filter.onhand) {
            condition.push(_filter.newCondition("Quantity", 0, "gt"));
            filter = _filter.append(filter, condition, "or");
            _filter.addfilter($scope.serialGridOptions.dataSource, filter);
        } else {
            _filter.remove($scope.serialGridOptions.dataSource, "Quantity");

        }
        if ($scope.serialGrid.dataSource.page() !== 1) {
            $scope.serialGrid.dataSource.page(1);
        }
    }
    $scope.cancel = function () {
        $modalInstance.close(null);
    };

}])
    .run([
             '$rootScope', '$location', 'PrivilegeHelper', '$filter', '$translate', 'posSession', '$interval', '$timeout', '$q', '$http', '$cookies', '$modal', 'posPrinterService', 'removeDiacritics', 'amMoment',
             function ($rootScope, $location, _privilege, $filter, $translate, _session, $interval, $timeout, $q, $http, $cookies, $modal, _posPrinterService, _removeDiacritics, amMoment) {
                 $rootScope.IsOnline = true;
                 $rootScope.KendoTransportError = function (e) {
                     var popupNotification = $("#popupNotification").kendoNotification().data("kendoNotification");
                     if (e.xhr.status === 401) {
                         popupNotification.show($filter('translate')('label_SessionTimeOut'), "error")
                         window.location.href = _session.loginUrl;
                     }
                     else if (e.xhr.status === 511) {
                         popupNotification.show($filter('translate')('message_Firewall'), "error")
                     }
                     else
                         popupNotification.show(getMessage({ data: e.xhr.responseJSON }), "error")

                 };
                 $rootScope.kendoDetailExpand = function (e) {

                     var expandedRow = $(e.sender.wrapper).data('expandedRow');
                     // Only one open at a time
                     if (expandedRow && expandedRow[0] !== e.masterRow[0]) {
                         var grid = $(e.sender.wrapper).data('kendoGrid');
                         grid.collapseRow(expandedRow);
                     }
                     $(e.sender.wrapper).data('expandedRow', e.masterRow);
                 };
                 $rootScope.branchs = _session.branchs;
                 $rootScope.currentbranch = _session.branch;
                 $rootScope.currentuser = _session.user;

                 var langKey = $cookies.get('culture');
                 if (langKey) {
                     if (!(langKey === 'vi-VN' || langKey === 'en-US' || langKey === 'zh-CN'))
                         langKey = 'vi-VN';
                 } else
                     langKey = 'vi-VN';
                 $translate.use(langKey);
                 kendo.culture("en-US");
                 amMoment.changeLocale(langKey);
                 var ping = function () {
                     $interval(function () {
                         $http.get('/api/ping', { params: {} }).then(function (response) {
                             $rootScope.IsOnline = true;
                         }, function (error) {
                             if (error.code !== 401) {
                                 $rootScope.IsOnline = false;
                             }
                             
                         });

                     }, 10000);
                 }
                 //Sync Data
                 var initialViewer = function () {
                     refresh($rootScope);
                     server.Products.count().then(function (args) {
                         if (args > 0) {
                             $rootScope.totalPage = Math.round(args / 12);
                             $rootScope.$broadcast('initData', null);
                             if (args>10000) {
                                 $rootScope.$broadcast('switchtoquichsearch', null);
                             }
                             ping();
                         }   
                         else {
                             $rootScope.showLoading = false;
                             refresh($rootScope);
                             var emptyInstance = $modal.open({
                                 backdrop: true,
                                 keyboard: false,
                                 modalFade: true,
                                 templateUrl: 'empty-form.html',
                                 controller: '',
                             });

                             emptyInstance.result.then(function (result) {
                             }, function () {
                             });
                         }
                     });
                 }
                 var checkOnline = function (latestSync) {
                     var syncDate = '';
                     $q.all([$http.get('/api/offline/sync', { params: { LatestSync: latestSync } }), $http.get('/api/partners/sync', { params: { LatestSync: latestSync } }), $http.get('/api/groups/sync', { params: { LatestSync: latestSync } }), $http.get('/api/products/sync', { params: { LatestSync: latestSync } })]).then(function (returnData) {
                         var offlineData = [], partnerData = [], groupData = [], productData = [];
                         if (returnData[0] && returnData[0].data && returnData[0].data.Data)
                             offlineData = returnData[0].data.Data;
                         if (returnData[1] && returnData[1].data && returnData[1].data.Data) {
                             partnerData = returnData[1].data.Data;
                             for (var i = 0; i < partnerData.length; i++) {
                                 partnerData[i].Keyword = _removeDiacritics.replace(partnerData[i].Code + ' ' + (partnerData[i].Phone ? partnerData[i].Phone : '') + ' ' + (partnerData[i].Address ? partnerData[i].Address : '') + ' ' + partnerData[i].Name);
                             }

                         }
                         if (returnData[2] && returnData[2].data && returnData[2].data.Data) {
                             groupData = returnData[2].data.Data;
                         }
                         if (returnData[3] && returnData[3].data) {
                             productData = returnData[3].data.Data;
                             syncDate = returnData[3].data.LatestSync;
                             for (var i = 0; i < productData.length; i++) {
                                 if (!productData[i].AllCode) {
                                     productData[i].AllCode = [];
                                 }
                                 productData[i].Code = productData[i].Code.toUpperCase();
                                 productData[i].AllCode.push(productData[i].Code);
                                 if (productData[i].LargeUnitCode) {
                                     productData[i].LargeUnitCode = productData[i].LargeUnitCode.toUpperCase();
                                     productData[i].AllCode.push(productData[i].LargeUnitCode);
                                 }
                                 if (productData[i].Code2) {
                                     productData[i].Code2 = productData[i].Code2.toUpperCase();
                                     productData[i].AllCode.push(productData[i].Code2);
                                 }
                                 if (productData[i].Code3) {
                                     productData[i].Code3 = productData[i].Code3.toUpperCase();
                                     productData[i].AllCode.push(productData[i].Code3);
                                 }
                                 if (productData[i].Code4) {
                                     productData[i].Code4 = productData[i].Code4.toUpperCase();
                                     productData[i].AllCode.push(productData[i].Code4);
                                 }
                                 if (productData[i].Code5) {
                                     productData[i].Code5 = productData[i].Code5.toUpperCase();
                                     productData[i].AllCode.push(productData[i].Code5)
                                 }
                                 productData[i].Keyword = _removeDiacritics.replace(productData[i].Code + ' ' + productData[i].Name + (productData[i].LargeUnitCode || '') + (productData[i].Code2 || '') + (productData[i].Code3 || '') + (productData[i].Code4 || '') + (productData[i].Code5 || ''));

                             }
                         }
                         if (latestSync) {
                             angular.forEach(offlineData, function (item) {
                                 try {
                                     if (item.ObjectType !== 'Category') {
                                         server.remove(item.ObjectType, item.ObjectId).then(function (args) {
                                             // item removed
                                         });
                                     }

                                 }
                                 catch (errt) {
                                 }
                             })
                         }
                         $timeout(function () {
                             $q.all([server.Products.update(productData), server.Customers.update(partnerData), server.PartnerGroup.update(groupData)]).then(function (args) {
                                 if (window.localStorage)
                                     localStorage.setItem('LatestSync-' + _session.branch.Id, syncDate);
                                 initialViewer();
                             }, function (args) {
                                 initialViewer();
                             });

                         }, 1000);
                     }, function (args) {
                         initialViewer();
                     });
                 }
                 var sync = function () {
                     $http.get('/api/ping', { params: {} }).then(function (resping) {
                         $rootScope.showLoading = true;
                         _posPrinterService.getTemplate(1, function (template) {
                             if (window.localStorage)
                                 localStorage.setItem('SmallPrintLayout-' + _session.branch.Id, template.Content);
                         })
                         _posPrinterService.getTemplate(2, function (template) {
                             if (window.localStorage)
                                 localStorage.setItem('LargePrintLayout-' + _session.branch.Id, template.Content);
                         })
                         _posPrinterService.getTemplate(8, function (template) {
                             if (window.localStorage)
                                 localStorage.setItem('OnOrderLayout-' + _session.branch.Id, template.Content);
                         })
                         console.log('Sync process is  running at ' + (new Date()));
                         var latestSync = '';
                         if (window.localStorage)
                             latestSync = localStorage['LatestSync-' + _session.branch.Id];
                         if (!latestSync) {
                             latestSync = '';
                         }
                         if (latestSync && _session.retailer.LatestClearData) {
                             var latestSyncDate = new Date(latestSync);
                             var latestClearDataDate = new Date(_session.retailer.LatestClearData);
                             if (latestSyncDate < latestClearDataDate) {
                                 latestSync = '';
                             }
                         }
                         if (!swapcache) {
                             if (latestSync === '') {
                                 $q.all([server.Products.clear(), server.Orders.clear(), server.Customers.clear(), server.PartnerGroup.clear()]).then(function (args) {
                                     checkOnline(latestSync);
                                 }, function (args) {
                                     initialViewer();
                                 });
                             } else {
                                 checkOnline(latestSync);
                             }
                         } else {
                             initialViewer();
                         }

                     }, function (errorping) {
                         if (errorping.status === 403) {
                             window.location.href = "/#/AccessDenied";
                         } else {
                             $rootScope.IsOnline = false;
                             initialViewer();
                         }
                        
                     });
                 }
                 
                 if (_session && _session.branch && _session.branch.Id && _session.user && _session.user.Id) {
                     db.open({
                         server: indexedDBName + _session.branch.Id,
                         version: applicationVersion,
                         schema: {
                             Products: {
                                 key: { keyPath: 'Id', autoIncrement: false },
                                 // Optionally add indexes
                                 indexes: {
                                     AllCode: { multiEntry: true, unique: false },
                                 }
                             },
                             Orders: {
                                 key: { keyPath: 'OfflineId', autoIncrement: false },
                             },
                             Customers: {
                                 key: { keyPath: 'Id', autoIncrement: false },
                                 // Optionally add indexes
                                 indexes: {
                                     Code: { unique: false },
                                 }
                             },
                             PartnerGroup: {
                                 key: { keyPath: 'Id', autoIncrement: false },
                             }
                         }
                     }).then(function (s) {
                         server = s;
                         sync();

                     });
                 } else {
                     window.location.href = "/#/AccessDenied";
                 }
                 
             }
         ]);;
App.controller('OrderOfflineCtrl', [
                                  '$rootScope', '$scope', '$translate', '$filter', 'posSession', '$modalInstance', 'OrderResource', 'PrivilegeHelper', function ($rootScope, $scope, $translate, $filter, _session, $modalInstance, _OrderResource, _privilege) {
                                      $scope._p = _privilege;
                                      $scope.cancel = function () {
                                          $modalInstance.dismiss('cancel');
                                      };
                                      $scope.calcData = new kendo.data.ObservableArray([]);
                                      var fnloaddata = function () {
                                          server.Orders.query()
                                        .filter('SyncStatus', 2)
                                        .execute()
                                        .then(function (results) {
                                            $scope.calcData.splice(0, $scope.calcData.length);
                                            $scope.calcData.push.apply($scope.calcData, results);
                                        });
                                      }
                                      fnloaddata();
                                      $scope.openItem = function (data) {
                                          if (!$scope._p.isadmin()) {
                                              $scope.posnotification.show($filter('translate')('message_AccessDenied'), "error");
                                              return;
                                          }
                                          $modalInstance.close(data);
                                      }
                                      $scope.removeItem = function (data) {
                                          if (!$scope._p.isadmin()) {
                                              $scope.posnotification.show($filter('translate')('message_AccessDenied'), "error");
                                              return;
                                          }
                                          server.Orders.remove(data.OfflineId).then(function (key) {
                                              fnloaddata();
                                          });
                                      }
                                      $scope.mainGridOfflineOptions = {
                                          dataSource: {
                                              data: $scope.calcData,
                                              schema: {
                                                  model: {
                                                      fields: {
                                                          Code: { type: "string" },
                                                          Name: { type: "string" },
                                                          AttributesName: { type: "string" },
                                                          Unit: { type: "string" },
                                                      }
                                                  },
                                              },

                                          },

                                          sortable: false,
                                          resizable: true,
                                          reorderable: false,
                                          columnMenu: false,
                                          columns: [
                                              {
                                                  field: "Id",
                                                  title: ' ',
                                                  template: '<a href="javascript:void(0)" ng-click="removeItem(dataItem)"> <span style="font-size: 24px;" class="fa fa-remove"></span></a>',
                                                  attributes: { "class": "text-center", },
                                                  width: "36px"
                                              },
                                              {
                                                  field: "Code",
                                                  title: $filter('translate')('label_DocumentCode'),
                                                  width: "150px",
                                                  template: "{{dataItem.Code}}<br><span style='color:red;' ng-show='dataItem.TryToSync&&dataItem.TryToSync>=3'>{{'label_Sync_Error'|translate}}</span>"
                                              },
                                          {
                                              field: "Partner.Name",
                                              title: $filter('translate')('customer'),
                                              template: "{{dataItem.Partner?dataItem.Partner.Name:('label_Guest'|translate)}}"
                                          },
                                          {
                                              field: "PurchaseDate",
                                              title: $filter('translate')('label_Order_Date'),
                                              width: "100px",
                                              template: "{{dataItem.PurchaseDate|parseDate|date:'dd/MM/yyyy HH:mm'}}"
                                          },
                                          {
                                              field: "Total",
                                              title: $filter('translate')('label_Total'),
                                              attributes: { "class": "text-right hassum", },
                                              template: '{{dataItem.Total|formatNumber}}',
                                              width: "100px",
                                          },
                                          {
                                              field: "TotalPayment",
                                              title: $filter('translate')('label_TotalPayment'),
                                              attributes: { "class": "text-right hassum", },
                                              template: '{{dataItem.TotalPayment|formatNumber}}',
                                              width: "130px",
                                          },
                                          {
                                              field: "OfflineId",
                                              title: ' ',
                                              template: '<a href="javascript:void(0)" ng-click="openItem(dataItem)"> <span style="font-size: 20px;" class="fa fa-pencil-square-o"></span></a>',
                                              attributes: { "class": "text-center", },
                                              width: "36px"
                                          }
                                          ],
                                      };
                                      function getSession() {
                                          return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {
                                              var r = Math.random() * 16 | 0, v = c == 'x' ? r : (r & 0x3 | 0x8);
                                              return v.toString(16);
                                          });
                                      };
                                      $scope.syncoffline = function (session) {
                                          if (!session)
                                            session = getSession();
                                          if ($rootScope.IsOnline) {
                                              $rootScope.showLoading = true;
                                              server.Orders.query()
                                                  .filter(function (od) { return (od.SyncStatus == 2 && (!od.SyncSession || od.SyncSession != session)) })
                                                  .execute()
                                                  .then(function (results) {

                                                      if (results && results.length > 0) {
                                                          var myDest = results[0];
                                                          _OrderResource.save({
                                                              Order: myDest,
                                                              ExcessCashType: myDest.ExcessCashType,
                                                          }, function (data) {
                                                              server.Orders.remove(myDest.OfflineId).then(function (args) {
                                                                  $scope.posnotification.show($filter("stringFormat")($filter('translate')('label_Sync_Success'), myDest.Code), "success");
                                                                  fnloaddata();
                                                                  $scope.syncoffline(session);
                                                              });


                                                          }, function (error) {
                                                              if (!myDest.TryToSync) {
                                                                  myDest.TryToSync = 1;
                                                              } else {
                                                                  myDest.TryToSync = myDest.TryToSync + 1;
                                                              }
                                                              myDest.SyncSession = session;
                                                              server.Orders.update(myDest).then(function (args1) {
                                                                  fnloaddata();

                                                                  $scope.syncoffline(session);
                                                              });
                                                              $scope.posnotification.show(getMessage(error), "error");

                                                          });
                                                      } else {
                                                          $scope.posnotification.show($filter("stringFormat")($filter('translate')('label_Sync_Success'), ''), "success");
                                                          $rootScope.showLoading = false;
                                                          refresh($scope);
                                                      }
                                                  });
                                          } else {
                                              $scope.posnotification.show("Vui lòng kiểm tra lại kết nối internet", "error");
                                          }
                                          
                                      }
                                  }
]).controller('ProcessingQrCodeCtrl', [
    '$rootScope', '$scope', '$translate', '$filter', 'posSession', '$modalInstance', '$http', 'PrivilegeHelper', 'sender', '$interval', function ($rootScope, $scope, $translate, $filter, _session, $modalInstance, $http, _privilege, sender, $interval) {
        $scope._p = _privilege;
        $scope.imageData = showQRCode(sender.QRCode);
        $scope.dropAccountOptions = {
            dataSource: _session.accounts,
            dataTextField: "Name",
            dataValueField: "Id",

        };
        $scope.newAccountId = 978;
        var interval = $interval(function () {
            $http.get('/api/orders/' + sender.OnlineId + '/paymentstatus', {
                params: {}
            }).then(function (response) {
                if (response.data) {
                    $scope.posnotification.show($filter('translate')('message_SaveSuccess'), "success");
                    $scope.cancel();
                }
            });

        }, 10000);
        $scope.cancel = function () {
            $interval.cancel(interval);
            $modalInstance.dismiss('cancel');

        };
        
        $scope.changeMethod = function () {
            console.log($scope.newAccountId);
            if ($scope.newAccountId===978) {
                $scope.posnotification.show($filter('translate')('message_ValidateSummary'), "error");
                return;
            }
            $rootScope.showLoading = true;
            $http.post('/api/orders/' + sender.OnlineId + '/changepayment', { AccountId: $scope.newAccountId, Id: sender.OnlineId }).then(function (response) {
                $rootScope.showLoading = false;
                $scope.posnotification.show($filter('translate')('message_SaveSuccess'), "success");
                $scope.cancel();
            }, function (error) {
                $rootScope.showLoading = false;
                $scope.posnotification.show(getMessage(error), "error");
                $scope.cancel();
            });
        }

        $scope.rePrint = function () {
            $rootScope.$broadcast('rePrint', sender);
        }
    }
]);;
App.controller('UpdateReturnCtrl', [
                                  '$rootScope', '$scope', '$translate', '$filter', 'kendofilter', 'posSession', '$modalInstance', '$http', 'PartnerTypeMap', 'ReturnResource', 'DocumentState', 'DocumentStateMap', 'posSettings', '$modal', 'OrderResource', 'sender', function ($rootScope, $scope, $translate, $filter, _filter, _session, $modalInstance, $http, _PartnerTypeMap, _ReturnResource, _DocumentState, _DocumentStateMap, _posSettings, $modal, _OrderResource, _sender) {
                                      $scope.DocumentState = _DocumentState;
                                      $scope.DocumentStateMap = _DocumentStateMap;
                                      $scope.PartnerTypeMap = _PartnerTypeMap;
                                      $scope.settings = _posSettings;
                                      $scope.return = { ReturnDate: new Date(), Discount: 0, DiscountRatio: 0, TotalPayment: 0 };

                                      $scope.dropAccountOptions = {
                                          dataSource: _session.accounts,
                                          dataTextField: "Name",
                                          dataValueField: "Id",

                                      };
                                      $scope.gridReturnItems = new kendo.data.ObservableArray([]);
                                      if (_sender) {

                                          _ReturnResource.getDetailForEdit({
                                              ReturnId: _sender.Id
                                          }, function (subdata) {
                                              $scope.return.ReturnDate = $filter("parseDate")(_sender.ReturnDate);
                                              $scope.return.Id = _sender.Id;
                                              $scope.return.PartnerId = _sender.PartnerId;
                                              $scope.return.Partner = _sender.Partner;
                                              $scope.return.Discount = _sender.Discount?_sender.Discount:0;
                                              $scope.return.TotalPayment = _sender.TotalPayment?_sender.TotalPayment:0;
                                              $scope.return.Code = _sender.Code;
                                              angular.forEach(subdata, function (aitem) {
                                                  $scope.gridReturnItems.unshift({ ProductId: aitem.ProductId, Code: aitem.Code, Name: aitem.Name, Quantity: aitem.Quantity, AttributesName: aitem.AttributesName, IsSerialNumberTracking: aitem.IsSerialNumberTracking, SerialNumbers: aitem.SerialNumbers, Price: aitem.Price, LargeUnit: aitem.LargeUnit, Unit: aitem.Unit, ConversionValue: aitem.ConversionValue, IsPercentageOfTotalOrder: aitem.IsPercentageOfTotalOrder, PriceLargeUnit: aitem.PriceLargeUnit, IsLargeUnit: aitem.IsLargeUnit, UnitPrice: aitem.UnitPrice, PercentageOfTotalOrderValue: aitem.Price, ProductType: aitem.ProductType, ExpiryDate: aitem.ExpiryDate });
                                              });
                                          }, function (error) {
                                              $rootScope.showLoading = false;
                                              $scope.posnotification.show(getMessage(error), "error");
                                          });
                                      }
                                      $scope.$watch("gridReturnItems", function () {

                                          if (!$scope.return.Id) {
                                              $scope.copyReturnTotal();
                                          }

                                      }, true);
                                      $scope.copyReturnTotal = function () {
                                          $scope.return.TotalPayment = ($filter('calTotal')($scope.gridReturnItems, $scope.calcReturnTotalBeforeDiscount)) - $scope.return.Discount;
                                      }
                                      $scope.removeReturnItem = function (item) {
                                          var index = $.inArray(item, $scope.gridReturnItems)
                                          $scope.gridReturnItems.splice(index, 1);
                                      }
                                      $scope.ChangeReturnUnit = function (dataItem) {
                                          if (dataItem.LargeUnit && dataItem.Unit) {
                                              dataItem.IsLargeUnit = !dataItem.IsLargeUnit;
                                              if (dataItem.IsLargeUnit) {
                                                  dataItem.Price = dataItem.PriceLargeUnit;
                                              } else {
                                                  dataItem.Price = dataItem.UnitPrice;
                                     
                                              }
                                          }

                                      }
                                      $scope.changeReturnDiscountRatioOnItem = function (dataItem) {
                                          if (dataItem.DiscountRatio && dataItem.DiscountRatio > 100)
                                              dataItem.DiscountRatio = 100;
                                          dataItem.Price = dataItem.Price - (dataItem.DiscountRatio * dataItem.Price) / 100;
                                      }
                                      $scope.calcReturnTotalBeforeDiscount = function (v) {
                                          return v.Quantity * v.Price;
                                      };
                                      $scope.calcReturn = function (v) { return v.Quantity; };
                                      
                                      $scope.changeReturnDiscountRatio = function () {
                                          if ($scope.return.DiscountRatio && $scope.return.DiscountRatio > 100)
                                              $scope.return.DiscountRatio = 100;
                                          var totalBefore = ($filter('calTotal')($scope.gridReturnItems, $scope.calcReturnTotalBeforeDiscount));
                                          if ($scope.return.DiscountRatio) {
                                              var dValue = totalBefore * ($scope.return.DiscountRatio / 100);
                                              if (dValue > totalBefore) dValue = totalBefore;
                                              $scope.return.Discount = dValue;
                                          }
                                          if (!$scope.return.Id) {
                                              $scope.copyReturnTotal();
                                          }
                                      }
                                      $scope.changeReturnDiscount = function () {
                                          $scope.return.DiscountRatio = 0;
                                          if (!$scope.return.Id) {
                                              $scope.copyReturnTotal();
                                          }
                                      }
                                      $scope.changeReturnPriceOnItem = function (dataItem) {
                                          dataItem.DiscountRatio = 0;

                                      }
                                      $scope.reduceReturnQItem = function (dataItem) {
                                          dataItem.Quantity--;
                                          if (dataItem.Quantity == 0) {
                                              dataItem.Quantity = 1;
                                          }
                                      }
                                      $scope.increasingReturnQItem = function (dataItem) {
                                          dataItem.Quantity++;
                                          if (dataItem.Quantity == 0) {
                                              dataItem.Quantity = 1;
                                          }
                                      }
                                      $scope.addReturnLotToDataItem = function (md, dataItem) {
                                          if (md && md.SerialNumber) {
                                              dataItem.SerialNumbers = md.SerialNumber;
                                          }
                                          if (md && md.ExpiryDate) {

                                              dataItem.ExpiryDate = md.ExpiryDate;
                                          }
                                      }
                                      $scope.getReturnLot = function (val, pid) {
                                          return $http.get('/api/autocomplete/availableserials', {
                                              params: {
                                                  Keyword: val,
                                                  ProductId: pid,
                                                  format: 'json'
                                              }
                                          }).then(function (response) {
                                              return response.data;
                                          });
                                      };
                                      $scope.mainGridReturnOptions = {
                                          dataSource: {
                                              data: $scope.gridReturnItems,
                                              schema: {
                                                  model: {
                                                      fields: {
                                                          AttributesName: { type: "string" },
                                                          Description: { type: "string" }
                                                      }
                                                  }
                                              },
                                              pageSize: 5
                                          },
                                          sortable: true,
                                          resizable: true,
                                          reorderable: true,
                                          columnMenu: false,
                                          pageable: {
                                              pageSizes: [5],
                                          },
                                          columns: [
                                              {
                                                  field: "Code",
                                                  title: $filter('translate')('label_Product_Code'),
                                                  width: "150px",
                                                  template: '{{dataItem.Code}}<br /><span ng-click="ChangeReturnUnit(dataItem)" class="label {{dataItem.IsLargeUnit?\'badge\':\'label-danger\'}}" style="cursor:pointer;font-size:9px" ng-show="dataItem.Unit">{{(dataItem.Unit&&dataItem.LargeUnit)?((dataItem.IsLargeUnit?(dataItem.Quantity*dataItem.ConversionValue):dataItem.Quantity)|formatNumber):""}} {{dataItem.Unit}}</span> <span ng-click="ChangeReturnUnit(dataItem)" class="label {{dataItem.IsLargeUnit?\'label-danger\':\'badge\'}}" style="cursor:pointer;font-size:9px" ng-show="dataItem.LargeUnit">{{(dataItem.Unit&&dataItem.LargeUnit)?((dataItem.IsLargeUnit?dataItem.Quantity:(dataItem.Quantity*(1/(dataItem.ConversionValue?dataItem.ConversionValue:1))))|formatNumber):""}} {{dataItem.LargeUnit}}</span>',
                                              },
                                          {
                                              field: "Name",
                                              title: $filter('translate')('label_Product_Name'),
                                              template: '{{dataItem.Name}} <span ng-show="dataItem.ReturnHistory" class="label label-info">{{"return"|translate}} [{{dataItem.ReturnHistory|formatNumber}}]</span><br /><span style="white-space: pre;" class="gridNote fa fa-edit"  popover-template="\'popoverReturnDescription.html\'"   popover-append-to-body="true" popover-placement="right" popover-trigger="\'outsideClick\'"> {{dataItem.Description?dataItem.Description:("label_Description"|translate)}}</span>'
                                          },
                                    {
                                        field: "Price",
                                        title: $filter('translate')('label_PriceForAll'),
                                        template: '<div class="input-group"><input type="text" class="text-right form-control" ng-model="dataItem.Price" select-on-focus ui-numeric="{vMin:0}" popover-template="\'popoverReturnDiscountRatioOnItem.html\'"  popover-append-to-body="true"  popover-trigger="\'outsideClick\'" popover-placement="bottom" ng-change=changeReturnPriceOnItem(dataItem)></div>',
                                        attributes: { "class": "text-center", },
                                        width: "100px"
                                    },
                                    {
                                        field: "Quantity",
                                        title: $filter('translate')('label_Qty'),
                                        template: '<div class="input-group"><span class="input-group-addon themecolor" ng-click="reduceReturnQItem(dataItem)"><i class="fa fa-minus"></i></span><input   type="text" class="text-right form-control txtQuantity" ng-model="dataItem.Quantity" ng-disabled="dataItem.IsPercentageOfTotalOrder" select-on-focus ui-numeric="{vMin:0}"><span class="input-group-addon themecolor" ng-click="increasingReturnQItem(dataItem)"><i class="fa fa-plus"></i></span></div><span style="font-size: 8px;cursor:pointer;" class="label label-info" ng-show="dataItem.IsSerialNumberTracking"  popover-template="\'popoverReturnLot.html\'"   popover-append-to-body="true" popover-placement="right" popover-trigger="\'outsideClick\'"> {{dataItem.SerialNumbers?dataItem.SerialNumbers:("label_ClickToEnterSerials"|translate)}}</span>',
                                        attributes: { "class": "text-center sellinput", },
                                        width: "150px"
                                    },
                                    {
                                        field: "Price",
                                        title: $filter('translate')('label_TotalLineItem'),
                                        attributes: { "class": "text-right", },
                                        template: '{{(dataItem.Price*dataItem.Quantity)|formatNumber}}',
                                        width: "90px",
                                    }, {
                                        field: "Id",
                                        title: ' ',
                                        template: '<a href="javascript:void(0)" ng-click="removeReturnItem(dataItem)"> <span style="font-size: 24px;" class="fa fa-remove"></span></a>',
                                        attributes: { "class": "text-center", },
                                        width: "36px"
                                    }
                                          ],
                                      };
                                      //Search Partner
                                      $scope.removeReturnPartner = function () {
                                          $scope.return.PartnerId = null;
                                          $scope.return.Partner = null;
                                      }
                                      $scope.getReturnPartners = function (val) {
                                          return $http.get('/api/autocomplete/partners', {
                                              params: {
                                                  Keyword: val,
                                                  format: 'json',
                                                  Type: $scope.PartnerTypeMap.Customer,
                                              }
                                          }).then(function (response) {
                                              return response.data;
                                          });
                                      };
                                      $scope.addReturnPartnerToCardByCode = function (event, model) {
                                          if (event.keyCode === 13) {
                                              var keyword = model;
                                              $scope.searchReturnPartnerForm.inputtypeheadreturnpartner.$setViewValue('');
                                              $scope.searchReturnPartnerForm.inputtypeheadreturnpartner.$render();
                                              $http.get('/api/partners/getbycode', {
                                                  params: {
                                                      Code: keyword,
                                                      Type: $scope.PartnerTypeMap.Customer,
                                                      format: 'json'
                                                  }
                                              }).then(function (response) {
                                                  return $scope.addReturnPartnerToCart(response.data);
                                              });

                                          }

                                      }
                                      $scope.addReturnPartnerToCart = function (model) {
                                          if (model && model.Id > 0) {
                                              $scope.return.PartnerId = model.Id;
                                              $scope.return.Partner = model;

                                          } else
                                              $scope.posnotification.show($filter('translate')('label_SearchPartner_NotExisting'), "error");
                                      }
                                      //End Search Partner
                                      $scope.getReturnProducts = function (val) {
                                          return $http.get('/api/autocomplete/products', {
                                              params: {
                                                  Keyword: val,
                                                  format: 'json',
                                                  IncludeInventory: false,
                                                  ExcludeSerial: false,
                                                  ExcludeComposite: false,
                                                  ExcludeService: false
                                              }
                                          }).then(function (response) {
                                              return response.data;
                                          });
                                      };
                                      $scope.addReturnProductToCartByCode = function (event, model) {
                                          if (event.keyCode === 13) {
                                              var keyword = model;
                                              $scope.searchReturnForm.inputtypeheadreturn.$setViewValue('');
                                              $scope.searchReturnForm.inputtypeheadreturn.$render();
                                              $http.get('/api/products/getbycode', {
                                                  params: {
                                                      Code: keyword,
                                                      IncludeInventory: false,
                                                      ExcludeComposite: false,
                                                      ExcludeService: false,
                                                      format: 'json'
                                                  }
                                              }).then(function (response) {
                                                  return $scope.addReturnProductToCart(response.data);
                                              });

                                          }

                                      }
                                      $scope.ReturnByOrder = function () {
                                          var modalInstance = $modal.open({
                                              backdrop: true,
                                              keyboard: true,
                                              modalFade: true,
                                              templateUrl: _session.partialPath('open-order.html'),
                                              controller: 'ProcessingOrdersCtrl',
                                              size: 'lg',
                                              resolve: {
                                                  sender: function () {
                                                      return null;
                                                  }
                                              }
                                          });

                                          modalInstance.result.then(function (result) {
                                              if (result && result.Id) {
                                                  $scope.return = { ReturnDate: new Date(), Discount: 0, DiscountRatio: 0, TotalPayment: 0 };
                                                  $scope.return.PartnerId = result.PartnerId;
                                                  $scope.return.OrderId = result.Id;
                                                  if (result.Partner) {
                                                      $scope.return.Partner = result.Partner;
                                                  }
                                                  $scope.return.Discount = result.Discount ? result.Discount : 0;
                                                  _OrderResource.getDetailForEdit({
                                                      OrderId: result.Id,
                                                  }, function (subdata) {
                                                      $scope.gridReturnItems.splice(0, $scope.gridReturnItems.length);
                                                      $http.get('/api/returns/totalreturnbyorder', {
                                                          params: {
                                                              OrderId: result.Id,
                                                          }
                                                      }).then(function (response) {
                                                          angular.forEach(subdata, function (aitem) {
                                                              var source = (response.data && response.data.length > 0) ? $filter('filter')(response.data, { ProductId: aitem.ProductId }) : [];
                                                              var returnHistory = source && source.length?source[0].Quantiry:0;
                                                              $scope.gridReturnItems.unshift({ ProductId: aitem.ProductId, Code: aitem.Code, Name: aitem.Name, Quantity: aitem.Quantity, AttributesName: aitem.AttributesName, IsSerialNumberTracking: aitem.IsSerialNumberTracking, SerialNumbers: aitem.SerialNumbers, Price: aitem.Price, LargeUnit: aitem.LargeUnit, Unit: aitem.Unit, ConversionValue: aitem.ConversionValue, IsPercentageOfTotalOrder: aitem.IsPercentageOfTotalOrder, PriceLargeUnit: aitem.PriceLargeUnit, IsLargeUnit: aitem.IsLargeUnit, UnitPrice: aitem.UnitPrice, PercentageOfTotalOrderValue: aitem.Price, ProductType: aitem.ProductType, ExpiryDate: aitem.ExpiryDate, ReturnHistory: returnHistory, BaseQuantity: aitem.Quantity });
                                                          });
                                                      });
                                                      
                                                  }, function (error) {
                                                      $scope.posnotification.show(getMessage(error), "error");
                                                  });
                                              }
                                          }, function () {

                                          });
                                      }
                                      $scope.cancel = function () {
                                          $modalInstance.dismiss('cancel')
                                      };
                                      $scope.addReturnProductToCart = function (model) {
                                          
                                          if (model && model.Id > 0) {
          

                                              $scope.gridReturnItems.unshift({ ProductId: model.Id, Code: model.Code, Name: model.Name, Quantity: 1, AttributesName: model.AttributesName, IsSerialNumberTracking: model.IsSerialNumberTracking, SerialNumbers: null, Price: model.Price, LargeUnit: model.LargeUnit, Unit: model.Unit, ConversionValue: model.ConversionValue, IsPercentageOfTotalOrder: model.IsPercentageOfTotalOrder, PriceLargeUnit: model.PriceLargeUnit, IsLargeUnit: false, UnitPrice: model.Price, PercentageOfTotalOrderValue: model.Price, ProductType: model.ProductType });

                                          } else
                                              $scope.posnotification.show($filter('translate')('label_SearchProduct_NotExisting'), "error");
                                      }
                                      $scope.save = function () {
                                          if (!$scope.return.ReturnDate) {
                                              $scope.posnotification.show($filter('translate')('message_ValidateSummary'), "error");
                                              return;
                                          }
                                          if ($scope.gridReturnItems.length === 0) {
                                              $scope.posnotification.show($filter('translate')('message_ValidateCartEmpty'), "error");
                                              return;
                                          }
                                          var optimizeDetails = [];
                                          var keepGoing = true;
                                          angular.forEach($scope.gridReturnItems, function (item) {
                                              if (item.Quantity > (item.BaseQuantity - item.ReturnHistory)) {
                                                  $scope.posnotification.show($filter('stringFormat')($filter('translate')('message_DataInvalid'), item.Name), "error");
                                                  keepGoing =false;
                                              }
                                              if (item.Quantity !== null && item.Quantity > 0) {
                                                  optimizeDetails.unshift({ ProductId: item.ProductId, Quantity: item.Quantity, Description: item.Description, SerialNumbers: item.SerialNumbers, Price: item.Price, IsLargeUnit: item.IsLargeUnit, ConversionValue: item.ConversionValue, ExpiryDate: item.ExpiryDate });
                                              }
                                          });
                                          if (!keepGoing) {
                                              return;
                                          }
                                          if (optimizeDetails === null || optimizeDetails.length === 0) {
                                              $scope.posnotification.show($filter('translate')('message_ValidateCartEmpty'), "error");
                                              return;
                                          }
                                          $scope.return.Status = $scope.DocumentStateMap.Completed;
                                          var myDest = {};
                                          angular.copy($scope.return, myDest);
                                          myDest.ReturnDetails = $scope.gridReturnItems;
                                          $scope.return.ReturnDetails = optimizeDetails;
                                          $rootScope.showLoading = true;
                                          $scope.return.Total = ($filter('calTotal')(optimizeDetails, $scope.calcReturnTotalBeforeDiscount)) - $scope.return.Discount;
                                          _ReturnResource.save({
                                              Return: $scope.return,
                                          }, function (data) {
                                              $rootScope.showLoading = false;

                                              $scope.posnotification.show($filter('translate')('message_SaveSuccess'), "success");
                                              $modalInstance.close(myDest);


                                          }, function (error) {
                                              $rootScope.showLoading = false;
                                              $scope.posnotification.show(getMessage(error), "error");
                                          });
                                              


                                      };
                                  }
                   ]);
;
App.controller('ProcessingOrdersCtrl', [
                                  '$rootScope', '$scope', '$translate', '$filter', 'kendofilter', 'posSession', '$modalInstance', 'OrderStateMap', 'OrderState', '$http', 'sender', function ($rootScope, $scope, $translate, $filter, _filter, _session, $modalInstance, _OrderStateMap, _OrderState, $http, sender) {
                                      $scope.OrderState = _OrderState;
                                      $scope.OrderStateMap = _OrderStateMap;
                                      $scope.slist = [{ id: 0, text: $filter('translate')('label_All') }, { id: $scope.OrderStateMap.OnOrder, text: $filter('translate')($scope.OrderState[$scope.OrderStateMap.OnOrder]) }, { id: $scope.OrderStateMap.Completed, text: $filter('translate')($scope.OrderState[$scope.OrderStateMap.Completed]) }];

                                      $scope.filter = { ostatus: 0 };
                                      if (sender) {
                                          $scope.filter.keyword = sender;
                                      }
                                      var saveType = localStorage['filterbyOrderType-' + _session.branch.Id];
                                      if (saveType)
                                          $scope.filter.ostatus = parseInt(saveType);
                                      function initFilter() {
                                          var filter = [];
                                          if ($scope.filter.keyword) {
                                              filter = _filter.append(filter, [_filter.newCondition('Code', $scope.filter.keyword, 'eq')], 'and');
                                          }
                                          if ($scope.filter.ostatus) {
                                              filter = _filter.append(filter, [_filter.newCondition('Status', $scope.filter.ostatus, 'eq')], 'and');
                                          }
                                          filter = _filter.append(filter, [_filter.newCondition('BranchId', parseInt(_session.branch.Id), 'eq')], 'and');
                                          return filter;


                                      }
                                      var additionalParam = function () {

                                          var param = {};
                                          param.ProductCode = $scope.filter.productcode;
                                          return param;
                                      };
                                      $scope.mainGridOrderOptions = {
                                          dataSource: {
                                              type: "odata",
                                              transport: {
                                                  read: {
                                                      url: "/api/orders?format=json&Includes=Partner&Includes=Room&ExcludeVoid=true",
                                                      dataType: "json",
                                                      data: additionalParam
                                                  }
                                              },
                                              schema: {
                                                  data: function (data) {
                                                      return data.results;
                                                  },
                                                  total: function (data) {
                                                      return data.__count;
                                                  },
                                                  model: {
                                                      fields: {
                                                          Code: { type: "string" },
                                                          Description: { type: "string" },
                                                      }
                                                  },
                                              },
                                              pageSize: 8,
                                              serverPaging: true,
                                              serverSorting: true,
                                              serverFiltering: true,
                                              filter: initFilter(),
                                              error: function (e) {
                                                  // handle error
                                                  $rootScope.KendoTransportError(e);
                                              }
                                          },
                                          sortable: true,
                                          resizable: true,
                                          reorderable: true,
                                          columnMenu: false,
                                          pageable: {
                                              pageSizes: [8, 20, 30],
                                          },
                                          columns: [{
                                              field: "Code",
                                              title: $filter('translate')('label_DocumentCode'),
                                              width: "150px",
                                              template: '<a href="javascript:void(0)" ng-click="openItem(dataItem)">{{dataItem.Code}}</a><br /><span class="gridDesc">{{dataItem.Room?(dataItem.Room.Name+"["+dataItem.Pos+"]"):""}}</span>'
                                          },
                                          {
                                              field: "Partner.Name",
                                              title: $filter('translate')('customer'),
                                              template: "{{dataItem.Partner?dataItem.Partner.Name:('label_Guest'|translate)}}"
                                          },
                                          {
                                              field: "Description",
                                              title: $filter('translate')('label_Description'),
                                              hidden: true,
                                          },
                                          {
                                              field: "CreatedDate",
                                              title: $filter('translate')('label_CreatedDate'),
                                              width: "100px",
                                              template: "{{dataItem.CreatedDate|parseDate|date:'dd/MM/yyyy HH:mm'}}",
                                              hidden: true,
                                          },
                                          {
                                              field: "PurchaseDate",
                                              title: $filter('translate')('label_Order_Date'),
                                              width: "100px",
                                              template: "{{dataItem.PurchaseDate|parseDate|date:'dd/MM/yyyy HH:mm'}}"
                                          },
                                          {
                                              field: "Total",
                                              title: $filter('translate')('label_Total'),
                                              attributes: { "class": "text-right hassum", },
                                              template: '{{dataItem.Total|formatNumber}}',
                                              width: "100px",
                                          },
                                          {
                                              field: "TotalPayment",
                                              title: $filter('translate')('label_TotalPayment'),
                                              attributes: { "class": "text-right hassum", },
                                              template: '{{dataItem.TotalPayment|formatNumber}}',
                                              width: "130px",
                                          },
                                          {
                                              field: "Status",
                                              title: $filter('translate')('label_Status'),
                                              width: "110px",
                                              template: '<span class="label {{dataItem.Status === OrderStateMap.Void?\'label-danger\':(dataItem.Status === OrderStateMap.Completed?\'label-primary\':\'label-info\')}}">{{OrderState[dataItem.Status]|translate}}</span>'
                                          },
                                          {
                                              field: "Id",
                                              title: ' ',
                                              template: '<a href="javascript:void(0)" ng-click="openItem(dataItem)"> <span style="font-size: 20px;" class="fa fa-pencil-square-o"></span></a>',
                                              attributes: { "class": "text-center", },
                                              width: "36px"
                                          }
                                          ,
                                          {
                                              field: "SoldById",
                                              title: $filter('translate')('label_SoldBy'),
                                              template: "{{auditusers[dataItem.SoldById]}}",
                                              hidden: true,
                                          },
                                          {
                                              field: "CreatedBy",
                                              title: $filter('translate')('label_CreatedBy'),
                                              template: "{{auditusers[dataItem.CreatedBy]}}",
                                              hidden: true,
                                          },
                                          {
                                              field: "ModifiedDate",
                                              title: $filter('translate')('label_ModifiedDate'),
                                              template: "{{dataItem.ModifiedDate?(dataItem.ModifiedDate|parseDate|date:'dd/MM/yyyy HH:mm'):''}}",
                                              hidden: true,
                                          },
                                          {
                                              field: "ModifiedBy",
                                              title: $filter('translate')('label_ModifiedBy'),
                                              template: "{{auditusers[dataItem.ModifiedBy]}}",
                                              hidden: true,
                                          },
                                          ],
                                      };
                                      //Filter by Partner
                                      $scope.removeFilterPartner = function () {
                                          $scope.CurrentFilterPartner = null;
                                          $scope.filterByPartner();
                                      }
                                      $scope.getFilterPartners = function (val) {
                                          return $http.get('/api/autocomplete/partners', {
                                              params: {
                                                  Keyword: val,
                                                  format: 'json',
                                                  Type: 1,
                                              }
                                          }).then(function (response) {
                                              return response.data;
                                          });
                                      };
                                      $scope.addFilterPartnerByCode = function (event, model) {
                                          if (event.keyCode === 13) {
                                              var keyword = model;
                                              $scope.formFilterPartner.inputtypeheadfilterpartner.$setViewValue('');
                                              $scope.formFilterPartner.inputtypeheadfilterpartner.$render();
                                              $http.get('/api/partners/getbycode', {
                                                  params: {
                                                      Code: keyword,
                                                      Type: 1,
                                                      format: 'json'
                                                  }
                                              }).then(function (response) {
                                                  return $scope.addFilterPartner(response.data);
                                              });

                                          }

                                      }
                                      $scope.addFilterPartner = function (model) {
                                          if (model && model.Id > 0) {
                                              $scope.CurrentFilterPartner = model;
                                              $scope.filterByPartner();
                                          } else
                                              $scope.posnotification.show($filter('translate')('label_SearchPartner_NotExisting'), "error");
                                      }
                                      $scope.filterByPartner = function () {
                                          var condition = [], filter = [];
                                          if ($scope.CurrentFilterPartner && $scope.CurrentFilterPartner.Id) {
                                              condition.push(_filter.newCondition("PartnerId", parseInt($scope.CurrentFilterPartner.Id), "eq"));
                                              filter = _filter.append(filter, condition, "or");
                                              _filter.addfilter($scope.mainGridOrder.dataSource, filter);
                                          } else {
                                              _filter.remove($scope.mainGridOrder.dataSource, "PartnerId");

                                          }
                                          $rootScope.kendoRefreshGrid($scope.mainGridOrder, true);
                                      };
                                      $scope.filterByOrderCode = function () {

                                          var condition = [], filter = [];
                                          if ($scope.filter.keyword) {
                                              condition.push(_filter.newCondition("Code", $scope.filter.keyword, "contains"));
                                              filter = _filter.append(filter, condition, "or");
                                              _filter.addfilter($scope.mainGridOrder.dataSource, filter);
                                          } else {
                                              _filter.remove($scope.mainGridOrder.dataSource, "Code");

                                          }
                                          if ($scope.mainGridOrder.dataSource.page() !== 1) {
                                              $scope.mainGridOrder.dataSource.page(1);
                                          }
                                      }
                                      $scope.filterbyOrderType = function () {
                                          var condition = [], filter = [];
                                          if ($scope.filter.ostatus) {
                                              condition.push(_filter.newCondition("Status", $scope.filter.ostatus, "eq"));
                                              filter = _filter.append(filter, condition, "or");
                                              _filter.addfilter($scope.mainGridOrder.dataSource, filter);
                                          } else {
                                              _filter.remove($scope.mainGridOrder.dataSource, "Status");

                                          }
                                          if ($scope.mainGridOrder.dataSource.page() !== 1) {
                                              $scope.mainGridOrder.dataSource.page(1);
                                          }
                                          if (window.localStorage)
                                              localStorage.setItem('filterbyOrderType-' + _session.branch.Id, $scope.filter.ostatus);
                                      }
                                      $scope.filterByProductCode = function () {
                                          var dorefresh = false;
                                          if ($scope.mainGridOrder.dataSource.page() !== 1) {
                                              $scope.mainGridOrder.dataSource.page(1);
                                              dorefresh = true;
                                          }

                                          if (!dorefresh) {
                                              $scope.mainGridOrder.dataSource.read();
                                          }
                                      }
                                      $scope.cancel = function () {
                                          $modalInstance.dismiss('cancel');
                                      };
                                      $scope.openItem = function (data) {
                                          $modalInstance.close(data);
                                      }
                                  }
]);
;
var ExtraCache = { Status: false, Data: new kendo.data.ObservableArray([]) };
App.controller('ExtraCtrl', [
                                  '$rootScope', '$scope', '$translate', '$filter', 'posSession', '$modalInstance', 'sender', function ($rootScope, $scope, $translate, $filter, _session, $modalInstance, _sender) {
                                      var sendArr = [];
                                      if (_sender.Topping) {
                                          sendArr = JSON.parse(_sender.Topping);
                                      }
                                      
                                      if (server) {
                                          if (ExtraCache.Status) {
                                              angular.forEach(ExtraCache.Data, function (sitem) {
    
                                                              var eQty = 0;
                                                              var source = (sendArr && sendArr.length > 0) ? $filter('filter')(sendArr, { ExtraId: sitem.ExtraId }) : [];
                                                              if (source && source.length) {
                                                                  eQty = source[0].QuantityExtra;
                                                              }
                                                  sitem.QuantityExtra = eQty;

                                              });
                                          } else {
                                              server.Extra.query()
                                                  .all()
                                                  .execute()
                                                  .then(function (args) {
                                                      angular.forEach(args, function (sitem) {
                                                          server.Products.get(sitem.ExtraId)
                                                              .then(function (productargs) {
                                                                  if (productargs) {
                                                                      var eQty = 0;
                                                                      var source = (sendArr && sendArr.length > 0) ? $filter('filter')(sendArr, { ExtraId: sitem.ExtraId }) : [];
                                                                      if (source && source.length) {
                                                                          eQty = source[0].QuantityExtra;
                                                                      }
                                                                      ExtraCache.Data.push({ ExtraId: sitem.ExtraId, Code: productargs.Code, Name: productargs.Name, Price: sitem.Price, QuantityExtra: eQty, Quantity: sitem.Quantity });
                                                                  }
                                                              });
                                                      });
                                                      ExtraCache.Status = true;
                                                  });
                                          }
                                          
                                      } else
                                              $scope.posnotification.show(getMessage(error), "error");

                                     
                                      $scope.reduceQItem = function (dataItem) {
                                          if (dataItem.QuantityExtra == 0) {
                                              return;
                                          }
                                          dataItem.QuantityExtra--;
                                      }
                                      $scope.increasingQItem = function (dataItem) {
                                          dataItem.QuantityExtra++;
                                      }
                                      $scope.calcTotalExtra = function (v) {
                                          return v.QuantityExtra * v.Price;
                                      };
                                      $scope.mainGridExtraOptions = {
                                          dataSource: {
                                              data: ExtraCache.Data,
                                              pageSize: 100,
                                          },
                                          pageable: {
                                              input: false,
                                              numeric: true
                                          },
                                          //filterable: {
                                          //    mode: "row"
                                          //},
                                          sortable: false,
                                          resizable: true,
                                          reorderable: false,
                                          columnMenu: false,
                                          columns: [
                                              {
                                                  field: "Name", title: $filter('translate')('label_Product_Name'),
                                                  filterable: false,
                                                  width: "200px",
                                                  //filterable: {
                                                  //    cell: {
                                                  //        operator: "contains",
                                                  //        showOperators: false
                                                  //    }
                                                  //}
                                              },
                                     {
                                         field: "Quantity",
                                         title: $filter('translate')('label_Qty'),
                                         template: '<div class="input-group"><span style="color:red" class="input-group-addon themecolor" ng-click="reduceQItem(dataItem)"><i class="fa fa-minus"></i></span><input type="text" class="text-right form-control txtQuantity" ng-model="dataItem.QuantityExtra" ng-change="directChangeQty(dataItem)" select-on-focus ui-numeric="{vMin:0}"><span class="input-group-addon themecolor" ng-click="increasingQItem(dataItem)" style="color:red"><i class="fa fa-plus"></i></span></div>',
                                         attributes: { "class": "text-center sellinput", },
                                         width: "110px",
                                         filterable: false
                                     },
                                     {
                                         field: "Price",
                                         title: $filter('translate')('label_PriceForAll'),
                                         template: '<div class="input-group" style="width:100%"><input   type="text" class="text-right form-control" ng-model="dataItem.Price" select-on-focus ui-numeric="{vMin:0}"></div>',
                                         attributes: { "class": "text-center", },
                                         filterable: false
                                     },
                                    {
                                        field: "Price",
                                        title: $filter('translate')('label_TotalLineItem'),
                                        attributes: { "class": "text-right", },
                                        template: '{{(dataItem.Price*dataItem.QuantityExtra)|formatNumber}}',
                                        filterable: false
                                    }
                                          ]
                                      };
                                      $scope.cancel = function () {
                                          $modalInstance.dismiss('cancel');
                                      };

                                      $scope.save = function () {
                                          var tmps = [];
                                          var descValue = '';
                                          angular.forEach(ExtraCache.Data, function (item) {
                                              if (item.QuantityExtra>0) {
                                                  tmps.push({ ExtraId: item.ExtraId, QuantityExtra: item.QuantityExtra, Price: item.Price, Quantity: item.Quantity });
                                                  descValue += (' -'+item.Name + ' x' + item.QuantityExtra + '=' + ($filter('formatNumber')(item.QuantityExtra * item.Price)) + '\n');
                                              }

                                          });
                                          var returnObj = { Total: ($filter('calTotal')(ExtraCache.Data, $scope.calcTotalExtra)), Desc: descValue, Extra: JSON.stringify(tmps) };
                                          $modalInstance.close(returnObj);
                                      }

                                  }
]);
;
App.controller('PartnerUpdateCtrl', [
    '$rootScope', '$scope', '$translate', '$filter', 'posSession', '$modalInstance', 'senderId', 'PartnerResource', 'PartnerTypeMap', '$timeout', 'removeDiacritics', '$http', function ($rootScope, $scope, $translate, $filter, _session, $modalInstance, _senderId, _PartnerResource, _PartnerTypeMap, $timeout, _removeDiacritics, $http) {
                                      $scope.allUsers = [];
                                      for (var key in _session.auditusers) {
                                          $scope.allUsers.push({ Id: key, Name: _session.auditusers[key] });
                                      }
                                      $rootScope.provincies = [{ text: 'HA NOI', value: 'HA NOI' }, { text: 'HO CHI MINH', value: 'HO CHI MINH' }, { text: 'AN GIANG', value: 'AN GIANG' }, { text: 'BA RIA-VUNG TAU', value: 'BA RIA-VUNG TAU' }, { text: 'BAC GIANG', value: 'BAC GIANG' }, { text: 'BAC KAN', value: 'BAC KAN' }, { text: 'BAC LIEU', value: 'BAC LIEU' }, { text: 'BAC NINH', value: 'BAC NINH' }, { text: 'BEN TRE', value: 'BEN TRE' }, { text: 'BINH DUONG', value: 'BINH DUONG' }, { text: 'BINH DINH', value: 'BINH DINH' }, { text: 'BINH PHUOC', value: 'BINH PHUOC' }, { text: 'BINH THUAN', value: 'BINH THUAN' }, { text: 'CA MAU', value: 'CA MAU' }, { text: 'CAO BANG', value: 'CAO BANG' }, { text: 'CAN THO', value: 'CAN THO' }, { text: 'DA NANG', value: 'DA NANG' }, { text: 'DAK LAK', value: 'DAK LAK' }, { text: 'DAK NONG', value: 'DAK NONG' }, { text: 'DIEN BIEN', value: 'DIEN BIEN' }, { text: 'DONG NAI', value: 'DONG NAI' }, { text: 'DONG THAP', value: 'DONG THAP' }, { text: 'GIA LAI', value: 'GIA LAI' }, { text: 'HA GIANG', value: 'HA GIANG' }, { text: 'HA NAM', value: 'HA NAM' }, { text: 'HA TAY', value: 'HA TAY' }, { text: 'HA TINH', value: 'HA TINH' }, { text: 'HAI DUONG', value: 'HAI DUONG' }, { text: 'HAIPHONG', value: 'HAIPHONG' }, { text: 'HAU GIANG', value: 'HAU GIANG' }, { text: 'HOA BINH', value: 'HOA BINH' }, { text: 'HUNG YEN', value: 'HUNG YEN' }, { text: 'KHANH HOA', value: 'KHANH HOA' }, { text: 'KIEN GIANG', value: 'KIEN GIANG' }, { text: 'KON TUM', value: 'KON TUM' }, { text: 'LAI CHAU', value: 'LAI CHAU' }, { text: 'LANG SON', value: 'LANG SON' }, { text: 'LAO CAI', value: 'LAO CAI' }, { text: 'LAM DONG', value: 'LAM DONG' }, { text: 'LONG AN', value: 'LONG AN' }, { text: 'NAM DINH', value: 'NAM DINH' }, { text: 'NGHE AN', value: 'NGHE AN' }, { text: 'NINH BINH', value: 'NINH BINH' }, { text: 'NINH THUAN', value: 'NINH THUAN' }, { text: 'PHU THO', value: 'PHU THO' }, { text: 'PHU YEN', value: 'PHU YEN' }, { text: 'QUANG BINH', value: 'QUANG BINH' }, { text: 'QUANG NAM', value: 'QUANG NAM' }, { text: 'QUANG NGAI', value: 'QUANG NGAI' }, { text: 'QUANG NINH', value: 'QUANG NINH' }, { text: 'QUANG TRI', value: 'QUANG TRI' }, { text: 'SOC TRANG', value: 'SOC TRANG' }, { text: 'SON LA', value: 'SON LA' }, { text: 'TAY NINH', value: 'TAY NINH' }, { text: 'THAI BINH', value: 'THAI BINH' }, { text: 'THAI NGUYEN', value: 'THAI NGUYEN' }, { text: 'THANH HOA', value: 'THANH HOA' }, { text: 'THUA THIEN HUE', value: 'THUA THIEN HUE' }, { text: 'TIEN GIANG', value: 'TIEN GIANG' }, { text: 'TRA VINH', value: 'TRA VINH' }, { text: 'TUYEN QUANG', value: 'TUYEN QUANG' }, { text: 'VINH LONG', value: 'VINH LONG' }, { text: 'VINH PHUC', value: 'VINH PHUC' }, { text: 'YEN BAI', value: 'YEN BAI' }];
                                      $scope.groupSource = new kendo.data.ObservableArray([]);
                                      server.PartnerGroup.query()
                                        .all()
                                        .execute()
                                        .then(function (gr) {
                                            $scope.groupSource.push.apply($scope.groupSource, gr);
                                        });
                                      $scope.selectPartnerGroupOptions = {
                                          dataTextField: "Name",
                                          dataValueField: "Id",
                                          valuePrimitive: true,
                                          dataSource: $scope.groupSource
                                      };
                                      $scope.partnercode = $filter('translate')('label_Customer_Code');
                                      $scope.modeltitle = ((_senderId && _senderId > 0) ? $filter('translate')('button_Update') : $filter('translate')('button_Add')) + ' ' + $filter('translate')('customer');
                                      $scope.ComparePoint = 0;
                                      $scope.partner = { Id: _senderId, Type: _PartnerTypeMap.Customer, PartnerGroupMembers: [], selectedPartnerGroups: [], Point:0 };
                                      $scope.bl = { Debt: 0, CompareDebt: 0 };
                                      if (_senderId && _senderId > 0) {
                                          _PartnerResource.get({
                                              partnerId: _senderId, Includes: 'PartnerGroupMembers'
                                          }, function (data) {
                                              $scope.partner = data;
                                              $scope.ComparePoint = $scope.partner.Point;
                                              //Get Debt
                                              _PartnerResource.getCurrentDebt({
                                                  partnerId: $scope.partner.Id
                                              }, function (subdata) {
                                                  $scope.bl.Debt = subdata.Debt;
                                                  $scope.bl.CompareDebt = subdata.Debt;
                                              }, function (error) {
                                                  $scope.posnotification.show(getMessage(error), "error");
                                              });
                                              if (data.PartnerGroupMembers)
                                                  angular.forEach(data.PartnerGroupMembers, function (mem, idx) {
                                                      if (!$scope.partner.selectedPartnerGroups)
                                                          $scope.partner.selectedPartnerGroups = [];
                                                      $scope.partner.selectedPartnerGroups.push(mem.GroupId);
                                                  })
                                              if (typeof ($scope.partner.DOB) !== "undefined" && $scope.partner.DOB)
                                                  $scope.partner.DOB = $filter('parseDate')(data.DOB);
                                          }, function (error) {
                                              $scope.posnotification.show(getMessage(error), "error");
                                          });
                                      }
                                      $scope.setFile = function (element) {

                                          if (element.files && element.files.length) {
                                              

                                              $http.get('/api/google/tocken?format=json').then(function (tocken) {
                                                  if (tocken.data && tocken.data.Tocken) {
                                                      $rootScope.showLoading = true;
                                                      var fileMetadata = {
                                                          'name': _session.retailer.Code + '-' + ((new Date()).getTime()) + '-' + element.files[0].name,
                                                          'parents': ["0B0kuvBxLBrKiflFvTW5EUkRkZEg1UEZpSXZaVGIwTjFFeGlJSV9vTG5kbm9NUW5sQ2tiSGc"],
                                                      };
                                                      window.pUploaderForGoogleDrive({
                                                          file: element.files[0],
                                                          token: tocken.data.Tocken,
                                                          metadata: fileMetadata
                                                      }).then(function (gresponse) {

                                                          $rootScope.showLoading = false;

                                                          var imgUrl = 'https://docs.google.com/uc?id=' + gresponse.id + '&export=view';
                                                          $scope.partner.Image = imgUrl;
                                                          refresh($scope);
                                                      }).catch(function (gerror) {
                                                          // handle error
                                                          $rootScope.showLoading = false;
                                                          refresh($scope);
                                                          console.log(gerror);
                                                      });




                                                  }

                                              });
                                          }

                                      }

                                      $scope.save = function () {
                                          if (!$scope.partner.Name) {
                                              $scope.posnotification.show($filter('translate')('message_ValidateSummary'), "error");
                                              return;
                                          }
                                          $scope.partner.PartnerGroupMembers = [];
                                          if ($scope.partner.selectedPartnerGroups && $scope.partner.selectedPartnerGroups.length > 0)
                                              for (var i = 0; i < $scope.partner.selectedPartnerGroups.length; i++) {
                                                  $scope.partner.PartnerGroupMembers.push({ GroupId: $scope.partner.selectedPartnerGroups[i] })
                                              }

                                              $rootScope.showLoading = true;
                                              _PartnerResource.save({
                                                  Partner: $scope.partner,
                                                  Debt: $scope.bl.Debt,
                                                  CompareDebt: $scope.bl.CompareDebt,
                                                  ComparePoint: $scope.ComparePoint,
                                              }, function (data) {
                                                  $rootScope.showLoading = false;
                                                  $scope.posnotification.show($filter('translate')('message_SaveSuccess'), "success");
                                                  var objLocal = { Id: data.Id, Code: data.Code, Name: data.Name, Phone: data.Phone, Address: data.Address, Description: data.Description, DOB: data.DOB, Email: data.Email, Gender: data.Gender, Debt: data.Debt, PartnerGroupMembers: $scope.partner.PartnerGroupMembers, TaxCode: data.TaxCode }
                                                  objLocal.Keyword = _removeDiacritics.replace(objLocal.Code + ' ' + (objLocal.Phone ? objLocal.Phone : '') + ' ' + objLocal.Name)
                                                  server.Customers.update(objLocal).then(function (item) {
                                                      $modalInstance.close(objLocal);
                                                  });



                                              }, function (error) {
                                                  $rootScope.showLoading = false;
                                                  $scope.posnotification.show(getMessage(error), "error");
                                              });

                                      };
                                      $scope.backwardButton = function () {
                                          $modalInstance.dismiss('cancel');
                                      };
                                  }
]).controller('ShippingDialogCtrl', [
    '$rootScope', '$scope', '$translate', '$filter', 'posSession', '$modalInstance', 'senderId', 'PartnerResource', 'PartnerTypeMap', '$timeout', 'removeDiacritics', '$http', function ($rootScope, $scope, $translate, $filter, _session, $modalInstance, _senderId, _PartnerResource, _PartnerTypeMap, $timeout, _removeDiacritics, $http) {
                                      $scope.allUsers = [];
                                      $scope.selectPartnerGroupOptions = {
                                          dataTextField: "Name",
                                          dataValueField: "Id",
                                          valuePrimitive: true,
                                          dataSource: {
                                              transport: {
                                                  read: {
                                                      url: "/api/groups?Type=" + _PartnerTypeMap.ShippingPartner,
                                                      dataType: "json"
                                                  }
                                              },
                                          }
                                      };
                                      $scope.partnercode = $filter('translate')('label_ShippingPartner_Code');
                                      $scope.modeltitle = ((_senderId && _senderId > 0) ? $filter('translate')('button_Update') : $filter('translate')('button_Add')) + ' ' + $filter('translate')('menu_ShippingPartners');
                                      $scope.partner = { Id: _senderId, Type: _PartnerTypeMap.ShippingPartner, PartnerGroupMembers: [], selectedPartnerGroups: [] };
                                      $scope.bl = { Debt: 0, CompareDebt: 0 };
                                      if (_senderId && _senderId > 0) {
                                          _PartnerResource.get({
                                              partnerId: _senderId, Includes: 'PartnerGroupMembers'
                                          }, function (data) {
                                              $scope.partner = data;
                                              //Get Debt
                                              _PartnerResource.getCurrentDebt({
                                                  partnerId: $scope.partner.Id
                                              }, function (subdata) {
                                                  $scope.bl.Debt = subdata.Debt;
                                                  $scope.bl.CompareDebt = subdata.Debt;
                                              }, function (error) {
                                                  $scope.posnotification.show(getMessage(error), "error");
                                              });
                                              if (data.PartnerGroupMembers)
                                                  angular.forEach(data.PartnerGroupMembers, function (mem, idx) {
                                                      if (!$scope.partner.selectedPartnerGroups)
                                                          $scope.partner.selectedPartnerGroups = [];
                                                      $scope.partner.selectedPartnerGroups.push(mem.GroupId);
                                                  })
                                              if (typeof ($scope.partner.DOB) !== "undefined" && $scope.partner.DOB)
                                                  $scope.partner.DOB = $filter('parseDate')(data.DOB);
                                          }, function (error) {
                                              $scope.posnotification.show(getMessage(error), "error");
                                          });
                                      }
                                      $scope.setFile = function (element) {

                                          if (element.files && element.files.length) {
                                              

                                              $http.get('/api/google/tocken?format=json').then(function (tocken) {
                                                  if (tocken.data && tocken.data.Tocken) {
                                                      $rootScope.showLoading = true;
                                                      var fileMetadata = {
                                                          'name': _session.retailer.Code + '-' + ((new Date()).getTime()) + '-' + element.files[0].name,
                                                          'parents': ["0B0kuvBxLBrKiflFvTW5EUkRkZEg1UEZpSXZaVGIwTjFFeGlJSV9vTG5kbm9NUW5sQ2tiSGc"],
                                                      };
                                                      window.pUploaderForGoogleDrive({
                                                          file: element.files[0],
                                                          token: tocken.data.Tocken,
                                                          metadata: fileMetadata
                                                      }).then(function (gresponse) {

                                                          $rootScope.showLoading = false;

                                                          var imgUrl = 'https://docs.google.com/uc?id=' + gresponse.id + '&export=view';
                                                          $scope.partner.Image = imgUrl;
                                                          refresh($scope);
                                                      }).catch(function (gerror) {
                                                          // handle error
                                                          $rootScope.showLoading = false;
                                                          refresh($scope);
                                                          console.log(gerror);
                                                      });




                                                  }

                                              });
                                          }

                                      }

                                      $scope.save = function () {
                                          if (!$scope.partner.Name) {
                                              $scope.posnotification.show($filter('translate')('message_ValidateSummary'), "error");
                                              return;
                                          }
                                          $scope.partner.PartnerGroupMembers = [];
                                          if ($scope.partner.selectedPartnerGroups && $scope.partner.selectedPartnerGroups.length > 0)
                                              for (var i = 0; i < $scope.partner.selectedPartnerGroups.length; i++) {
                                                  $scope.partner.PartnerGroupMembers.push({ GroupId: $scope.partner.selectedPartnerGroups[i] })
                                              }

                                          $rootScope.showLoading = true;
                                          _PartnerResource.save({
                                              Partner: $scope.partner,
                                              Debt: $scope.bl.Debt,
                                              CompareDebt: $scope.bl.CompareDebt,
                                          }, function (data) {
                                              $rootScope.showLoading = false;
                                              $scope.posnotification.show($filter('translate')('message_SaveSuccess'), "success");
                                              $modalInstance.close(data);

                                          }, function (error) {
                                              $rootScope.showLoading = false;
                                              $scope.posnotification.show(getMessage(error), "error");
                                          });

                                      };
                                      $scope.backwardButton = function () {
                                          $modalInstance.dismiss('cancel');
                                      };
                                  }
]);
;
App.controller('ProductPopupCtrl', [
                    '$rootScope', '$scope', '$translate', '$filter', 'ProductResource', 'posSession', 'ProductType', 'ProductTypeMap', 'posSettings', '$timeout', '$modal', '$http', 'PrivilegeHelper', '$modalInstance', function ($rootScope, $scope, $translate, $filter, _ProductResource, _session, _ProductType, _ProductTypeMap, _posSettings, $timeout, $modal, $http, _privilege, $modalInstance) {
                        $scope.ispopup = true;
                        $scope._p = _privilege;
                        $scope.settings = _posSettings;
                        $scope.openimage = true;
                        $scope.pconfig = {DontPrintLabel:false};
                        $scope.ProductType = [];
                        $.each(_ProductType, function (key, value) {
                            // key is the key
                            // value is the value
                            $scope.ProductType.push({ text: $filter('translate')(value), value: key });
                        });
                        $scope.ProductTypeMap = _ProductTypeMap;
                        $scope.inventory = { OnHand: 0, CompareOnHand: 0, Cost: 0, MinQuantity: 0, MaxQuantity: 999, CompareCost: 0};
                        $scope.components = [];
                       
                        $scope.calcOnlinePrice = function () {
                            if (!$scope.product.OnlinePrice) {
                                $scope.product.OnlinePrice = $scope.product.Price;
                            }
                        }
                        $scope.product = { Id: 0, ProductType: $scope.ProductTypeMap.Standard, OnlinePrice: 0, PriceLargeUnit: 0, OnlinePriceLargeUnit: 0, Price: 0, ProductImages: [], ProductAttributes: [], ConversionValue: 1, Coefficient: 1, BonusPoint: 0, BonusPointForAssistant: 0, BonusPointForAssistant2: 0, BonusPointForAssistant3: 0, SplitForSalesOrder: $rootScope.IsRestaurant,BlockOfTimeToUseService: $scope.settings.BlockOfTimeToUseService };
                      
                        if ($scope.settings.DifferentiatedproductsbyWarehouse) {
                            $scope.product.ShowOnBranchId = [];
                            $scope.product.ShowOnBranchId.push('[' + $rootScope.currentbranch.Id + ']');
                        }
                        if ($rootScope.IsRestaurant) {
                            $scope.product.Printer = "KitchenA";
                        }
                        
                        $scope.dropCategoryOptions = {
                            dataSource: new kendo.data.DataSource({
                                transport: {
                                    read: {
                                        dataType: "json",
                                        url: "/api/categories/flatten?format=json",
                                    }
                                },
                            }),
                            dataTextField: "text",
                            dataValueField: "id",
                            dataBound: function (e) {
                                $("#dropCategory").data("kendoDropDownList").select(function (dataItem) {
                                    return dataItem.id === $scope.product.CategoryId;
                                    $("#dropCategory").data("kendoDropDownList").refresh();
                                });
                            }
                        };
                        $scope.removeImage = function (index) {

                            $scope.product.ProductImages.splice(index, 1);
                        }
                        $scope.activeImage = function (index) {
                            angular.forEach($scope.product.ProductImages, function (item) {
                                item.IsDefault = false;
                            })
                            $scope.product.ProductImages[index].IsDefault = true;
                        }
                        $scope.checkTime2 = function () {
                            if ($scope.pconfig.TimeFrom2 && $scope.pconfig.TimeTo2 && $scope.pconfig.TimeFrom2 > $scope.pconfig.TimeTo2) {
                                $scope.pconfig.TimeFrom2 = $scope.pconfig.TimeTo2;
                                $scope.posnotification.show('Từ thời gian phải nhỏ hơn Đến thời gian', "error");
                            }
                        }
                        $scope.checkTime1 = function () {
                            if ($scope.pconfig.TimeFrom && $scope.pconfig.TimeTo && $scope.pconfig.TimeFrom > $scope.pconfig.TimeTo) {
                                $scope.pconfig.TimeFrom = $scope.pconfig.TimeTo;
                                $scope.posnotification.show('Từ thời gian phải nhỏ hơn Đến thời gian', "error");
                            }
                        }
                        $scope.save = function () {
                            if (!$scope.inputForm.$valid) {
                                $scope.posnotification.show($filter('translate')('message_ValidateSummary'), "error");
                                return;
                            }
                            $scope.product.CompositeItems1 = [];
                            if ($scope.components && $scope.components.length > 0)
                            {
                                angular.forEach($scope.components, function (val, idx) {
                                    $scope.product.CompositeItems1.push({ ItemId: val.ItemId, Quantity: val.Quantity, QuantityLargeUnit: val.QuantityLargeUnit })
                                });
                            }
                            
                            $rootScope.showLoading = true;
                            if ($scope.pconfig) {
                                $scope.product.PriceConfig = JSON.stringify($scope.pconfig);
                            } else {
                                $scope.product.PriceConfig = null;
                            }
                            _ProductResource.save({
                                Product: $scope.product,
                                OnHand: $scope.inventory.OnHand,
                                CompareOnHand: $scope.inventory.CompareOnHand,
                                CompareCost:$scope.inventory.CompareCost,
                                Cost: $scope.inventory.Cost,
                                MinQuantity: $scope.inventory.MinQuantity,
                                MaxQuantity: $scope.inventory.MaxQuantity
                            }, function (data) {
                                $rootScope.showLoading = false;
                                $scope.posnotification.show($filter('translate')('message_SaveSuccess'), "success");
                                data.RecentPurchasePrice = $scope.inventory.Cost;
                                $modalInstance.close(data);
                                

                            }, function (error) {
                                $rootScope.showLoading = false;
                                $scope.posnotification.show(getMessage(error), "error");
                            });

                        };
                        $scope.removeAttribute = function (index) {

                            $scope.product.ProductAttributes.splice(index, 1);
                        }
                        $scope.AddAttribute = function () {

                            $scope.product.ProductAttributes.push({ AttributeName: '', AttributeValue: '' });
                        }
                        $scope.getAttributes = function (val) {
                            return $http.get('/api/autocomplete/attribute', {
                                params: {
                                    Keyword: val,
                                    format: 'json'
                                }
                            }).then(function (response) {
                                return response.data;
                            });
                        };
                        $scope.getAttributeValues = function (val) {
                            return $http.get('/api/autocomplete/attributevalue', {
                                params: {
                                    Keyword: val,
                                    format: 'json'
                                }
                            }).then(function (response) {
                                return response.data;
                            });
                        };
                        $scope.getProducts = function (val) {
                            return $http.get('/api/autocomplete/products', {
                                params: {
                                    Keyword: val,
                                    format: 'json',
                                    ExcludeComposite: false,
                                    ExcludeSerial: true,
                                    IncludeInventory: true,
                                }
                            }).then(function (response) {
                                return response.data;
                            });
                        };
                        $scope.getProduct = function (event, model) {
                            if (event.keyCode === 13) {
                                var keyword = model;
                                $scope.inputForm.inputtypehead.$setViewValue('');
                                $scope.inputForm.inputtypehead.$render();
                                $http.get('/api/products/getbycode', {
                                    params: {
                                        Code: keyword,
                                        ExcludeComposite: false,
                                        ExcludeSerial: true,
                                        IncludeInventory: true,
                                        format: 'json'
                                    }
                                }).then(function (response) {
                                    return $scope.addProductToCart(response.data);
                                });

                            }

                        }
                        $scope.calcCost = function () {
                            if ($scope.product.ProductType == $scope.ProductTypeMap.Composite) {


                                var newCost = 0;
                                angular.forEach($scope.components, function (ic) {
                                    newCost = newCost + (ic.Quantity * ic.Cost);
                                });
                                if (newCost) {
                                    $scope.inventory.Cost = newCost;
                                }
                            }
                        }
                        $scope.addProductToCart=function(model)
                        {
                            if (model && model.Id > 0) {
                                if (model.Id === $scope.product.Id)
                                    return;
                                var source =($scope.components&&$scope.components.length>0)? $filter('filter')($scope.components, { ItemId: model.Id }):[];
                                if (source && source.length>0)
                                    source[0].Quantity++;
                                else
                                    $scope.components.unshift({ Product: model, ItemId: model.Id, Quantity: 1, Cost: model.Cost, QuantityLargeUnit:0 });
                                $scope.calcCost();
                            }else
                                $scope.posnotification.show($filter('translate')('label_SearchProduct_NotExisting'), "error");
                        }
                        $scope.removeComponent = function (index) {
                            
                            $scope.components.splice(index, 1);
                            $scope.calcCost();
                        }
                       
                        $scope.dropShowOnBranchOptions = {
                            dataSource: _session.branchs.map(function (val) {
                                return {
                                    Name: val.Name,
                                    Id: '[' + val.Id + ']',
                                };
                            }),
                            dataTextField: "Name",
                            dataValueField: "Id",

                        };
                        $scope.AddCategory = function () {
                            var modalInstance = $modal.open({
                                backdrop: true,
                                keyboard: true,
                                modalFade: true,
                                templateUrl: _session.partialPath('category-form.html'),
                                controller: 'CategoryUpdateCtrl',
                                resolve: {
                                    senderId: function () {
                                        return 0;
                                    }
                                }
                            });

                            modalInstance.result.then(function (result) {
                                $scope.product.CategoryId = result.Id;
                                $scope.dropCategoryOptions.dataSource.read();
                                
                            }, function () {

                            });

                        };
                        $scope.setFile = function (element) {

                            if (element.files && element.files.length) {
                                

                                $http.get('/api/google/tocken?format=json').then(function (tocken) {
                                    if (tocken.data && tocken.data.Tocken) {
                                        $rootScope.showLoading = true;
                                        var fileMetadata = {
                                            'name': _session.retailer.Code + '-' + ((new Date()).getTime()) + '-' + element.files[0].name,
                                            'parents': ["0B0kuvBxLBrKiflFvTW5EUkRkZEg1UEZpSXZaVGIwTjFFeGlJSV9vTG5kbm9NUW5sQ2tiSGc"],
                                        };
                                        window.pUploaderForGoogleDrive({
                                            file: element.files[0],
                                            token: tocken.data.Tocken,
                                            metadata: fileMetadata
                                        }).then(function (gresponse) {

                                            $rootScope.showLoading = false;

                                            var imgUrl = 'https://docs.google.com/uc?id=' + gresponse.id + '&export=view';
                                            $scope.product.ProductImages.push({ ImageURL: imgUrl, ThumbnailUrl: imgUrl, IsDefault: ($scope.product.ProductImages.length < 1) });
                                            refresh($scope);
                                        }).catch(function (gerror) {
                                            // handle error
                                            $rootScope.showLoading = false;
                                            refresh($scope);
                                            console.log(gerror);
                                        });




                                    }

                                });
                            }

                        }
                        $scope.cancel = function () {
                            $modalInstance.dismiss('cancel');
                        };
                    }
])
    .controller('CategoryUpdateCtrl', ['$rootScope', '$scope', '$translate', '$filter', 'CategoryResource', 'posSession', 'senderId', '$modalInstance', 'ConfirmDialog', '$timeout', 'posSettings', '$http', function ($rootScope, $scope, $translate, $filter, _CategoryResource, _session, senderId, $modalInstance, ConfirmDialog, $timeout, _posSettings, $http) {
    $scope.settings = _posSettings;
    $scope.dropShowOnBranchOptions = {
        dataSource:  _session.branchs.map(function (val) {
            return {
                Name: val.Name,
                Id: '[' + val.Id + ']',
            };
        }),
        dataTextField: "Name",
        dataValueField: "Id",

    };

    $scope.category = { Id: senderId > 0 ? senderId : 0 };
    if ($scope.settings.DifferentiatedproductsbyWarehouse) {
        $scope.category.ShowOnBranchId = $rootScope.currentbranch.Id;
    }
    $scope.modeltitle = ($scope.category.Id > 0 ? $filter('translate')('button_Update') : $filter('translate')('button_Add')) + ' ' + $filter('translate')('group');
    $scope.dropMainOptions = {
        dataSource: new kendo.data.DataSource({
            transport: {
                read: {
                    dataType: "json",
                    url: "/api/categories/flatten?format=json",
                }
            },
        }),
        dataTextField: "text",
        dataValueField: "id",

    };
    if ($scope.category.Id) {
        _CategoryResource.get({
            categoryId: $scope.category.Id
        }, function (data) {
            $scope.category = data;
            if ($scope.category.ShowOnBranchId) {
                $scope.category.ShowOnBranchId = $scope.category.ShowOnBranchId.replace(/\[\[/g, "[");
                $scope.category.ShowOnBranchId = $scope.category.ShowOnBranchId.replace(/\]\]/g, "]");
                $scope.category.ShowOnBranchId = $scope.category.ShowOnBranchId.split(",");
            }
        }, function (error) {
            $scope.posnotification.show(getMessage(error), "error");
        });
    }
    $scope.save = function () {
        if (!$scope.inputFormCategory.$valid) {
            $scope.posnotification.show($filter('translate')('message_ValidateSummary'), "error");
            return;
        }
        $rootScope.showLoading = true;
        _CategoryResource.save({ Category: $scope.category }, function (data) {
           
            $rootScope.showLoading = false;
            $scope.posnotification.show($filter('translate')('message_SaveSuccess'), "success");
            $modalInstance.close(data);
        }, function (error) {
            $rootScope.showLoading = false;
            $scope.posnotification.show(getMessage(error), "error");
        });
       
    };
    $scope.setFile = function (element) {

        if (element.files && element.files.length) {
            

            $http.get('/api/google/tocken?format=json').then(function (tocken) {
                if (tocken.data && tocken.data.Tocken) {
                    $rootScope.showLoading = true;
                    var fileMetadata = {
                        'name': _session.retailer.Code + '-' + ((new Date()).getTime()) + '-' + element.files[0].name,
                        'parents': ["0B0kuvBxLBrKiflFvTW5EUkRkZEg1UEZpSXZaVGIwTjFFeGlJSV9vTG5kbm9NUW5sQ2tiSGc"],
                    };
                    window.pUploaderForGoogleDrive({
                        file: element.files[0],
                        token: tocken.data.Tocken,
                        metadata: fileMetadata
                    }).then(function (gresponse) {

                        $rootScope.showLoading = false;

                        $scope.category.ImageURL= 'https://docs.google.com/uc?id=' + gresponse.id + '&export=view';
                        
                        refresh($scope);
                    }).catch(function (gerror) {
                        // handle error
                        $rootScope.showLoading = false;
                        refresh($scope);
                        console.log(gerror);
                    });




                }

            });
        }

    }
    $scope.delete = function (item) {
        var modalOptions = {
            closeButtonText: $filter('translate')('button_Cancel'),
            actionButtonText: $filter('translate')('button_Ok'),
            headerText: $filter('translate')('message_Modal_DeleteHeader'),
            bodyText: $filter("stringFormat")($filter('translate')('message_Modal_Message'), $scope.category.Name)
        };

        ConfirmDialog.showModal({}, modalOptions).then(function (result) {
            $rootScope.showLoading = true;
            _CategoryResource.delete({
                categoryId: $scope.category.Id
            }, function (result) {
                $rootScope.showLoading = false;
                $scope.posnotification.show($filter('translate')('message_DeleteSuccess'), "success");
                $modalInstance.close(null);
            }, function (error) {
                $rootScope.showLoading = false;
                $scope.posnotification.show(getMessage(error), "error");
            });
        });
    }
    $scope.cancel = function () {
        $modalInstance.dismiss('cancel');
    };

}]);;
'use strict';

/**
 * @version 2.0.4;
 * @overview 365 Tray Connector
 * <p/>
 * Connects a web client to the 365 Tray software.
 * Enables printing and device communication from javascript.
 *
 * @requires RSVP
 *     Provides Promises/A+ functionality for API calls.
 *     Can be overridden via <code>qz.api.setPromiseType</code> to remove dependency.
 * @requires Sha256
 *     Provides hashing algorithm for signing messages.
 *     Can be overridden via <code>qz.api.setSha256Type</code> to remove dependency.
 */
var qz = (function() {

///// POLYFILLS /////

    if (!Array.isArray) {
        Array.isArray = function(arg) {
            return Object.prototype.toString.call(arg) === '[object Array]';
        };
    }


///// PRIVATE METHODS /////

    var _qz = {
        VERSION: "2.0.4",                              //must match @version above
        DEBUG: false,

        log: {
            /** Debugging messages */
            trace: function() { if (_qz.DEBUG) { console.log.apply(console, arguments); } },
            /** General messages */
            info: function() { console.info.apply(console, arguments); },
            /** Debugging errors */
            warn: function() { if (_qz.DEBUG) { console.warn.apply(console, arguments); } },
            /** General errors */
            error: function() { console.error.apply(console, arguments); }
        },


        //stream types
        streams: {
            serial: 'SERIAL', usb: 'USB', hid: 'HID'
        },


        websocket: {
            /** The actual websocket object managing the connection. */
            connection: null,

            /** Default parameters used on new connections. Override values using options parameter on {@link qz.websocket.connect}. */
            connectConfig: {
                host: ["localhost", "localhost.pos365.vn"], //hosts 365 Tray can be running on
                hostIndex: 0,                           //internal var - index on host array
                usingSecure: true,                      //boolean use of secure protocol
                protocol: {
                    secure: "wss://",                   //secure websocket
                    insecure: "ws://"                   //insecure websocket
                },
                port: {
                    secure: [8181, 8282, 8383, 8484],   //list of secure ports 365 Tray could be listening on
                    insecure: [8182, 8283, 8384, 8485], //list of insecure ports 365 Tray could be listening on
                    portIndex: 0                        //internal var - index on active port array
                },
                keepAlive: 60,                          //time between pings to keep connection alive, in seconds
                retries: 0,                             //number of times to reconnect before failing
                delay: 0                                //seconds before firing a connection
            },

            setup: {
                /** Loop through possible ports to open connection, sets web socket calls that will settle the promise. */
                findConnection: function(config, resolve, reject) {
                    //force flag if missing ports
                    if (!config.port.secure.length) {
                        if (!config.port.insecure.length) {
                            reject(new Error("No ports have been specified to connect over"));
                            return;
                        } else if (config.usingSecure) {
                            _qz.log.error("No secure ports specified - forcing insecure connection");
                            config.usingSecure = false;
                        }
                    } else if (!config.port.insecure.length && !config.usingSecure) {
                        _qz.log.trace("No insecure ports specified - forcing secure connection");
                        config.usingSecure = true;
                    }

                    var deeper = function() {
                        config.port.portIndex++;

                        if ((config.usingSecure && config.port.portIndex >= config.port.secure.length)
                            || (!config.usingSecure && config.port.portIndex >= config.port.insecure.length)) {
                            if (config.hostIndex >= config.host.length - 1) {
                                //give up, all hope is lost
                                reject(new Error("Unable to establish connection with QZ"));
                                return;
                            } else {
                                config.hostIndex++;
                                config.port.portIndex = 0;
                            }
                        }

                        // recursive call until connection established or all ports are exhausted
                        _qz.websocket.setup.findConnection(config, resolve, reject);
                    };

                    var address;
                    if (config.usingSecure) {
                        address = config.protocol.secure + config.host[config.hostIndex] + ":" + config.port.secure[config.port.portIndex];
                    } else {
                        address = config.protocol.insecure + config.host[config.hostIndex] + ":" + config.port.insecure[config.port.portIndex];
                    }

                    try {
                        _qz.log.trace("Attempting connection", address);
                        _qz.websocket.connection = new _qz.tools.ws(address);
                    }
                    catch(err) {
                        _qz.log.error(err);
                        deeper();
                        return;
                    }

                    if (_qz.websocket.connection != null) {
                        _qz.websocket.connection.established = false;

                        //called on successful connection to qz, begins setup of websocket calls and resolves connect promise after certificate is sent
                        _qz.websocket.connection.onopen = function(evt) {
                            _qz.log.trace(evt);
                            _qz.log.info("Established connection with 365 Tray on " + address);

                            _qz.websocket.setup.openConnection({ resolve: resolve, reject: reject });

                            if (config.keepAlive > 0) {
                                var interval = setInterval(function() {
                                    if (!qz.websocket.isActive()) {
                                        clearInterval(interval);
                                        return;
                                    }

                                    _qz.websocket.connection.send("ping");
                                }, config.keepAlive * 1000);
                            }
                        };

                        //called during websocket close during setup
                        _qz.websocket.connection.onclose = function() {
                            // Safari compatibility fix to raise error event
                            if (typeof navigator !== 'undefined' && navigator.userAgent.indexOf('Safari') != -1 && navigator.userAgent.indexOf('Chrome') == -1) {
                                _qz.websocket.connection.onerror();
                            }
                        };

                        //called for errors during setup (such as invalid ports), reject connect promise only if all ports have been tried
                        _qz.websocket.connection.onerror = function(evt) {
                            _qz.log.trace(evt);
                            deeper();
                        };
                    } else {
                        reject(new Error("Unable to create a websocket connection"));
                    }
                },

                /** Finish setting calls on successful connection, sets web socket calls that won't settle the promise. */
                openConnection: function(openPromise) {
                    _qz.websocket.connection.established = true;

                    //called when an open connection is closed
                    _qz.websocket.connection.onclose = function(evt) {
                        _qz.log.trace(evt);
                        _qz.log.info("Closed connection with 365 Tray");

                        //if this is set, then an explicit close call was made
                        if (_qz.websocket.connection.promise != undefined) {
                            _qz.websocket.connection.promise.resolve();
                        }

                        _qz.websocket.callClose(evt);
                        _qz.websocket.connection = null;

                        for(var uid in _qz.websocket.pendingCalls) {
                            if (_qz.websocket.pendingCalls.hasOwnProperty(uid)) {
                                _qz.websocket.pendingCalls[uid].reject(new Error("Connection closed before response received"));
                            }
                        }
                    };

                    //called for any errors with an open connection
                    _qz.websocket.connection.onerror = function(evt) {
                        _qz.websocket.callError(evt);
                    };

                    //send JSON objects to qz
                    _qz.websocket.connection.sendData = function(obj) {
                        _qz.log.trace("Preparing object for websocket", obj);

                        if (obj.timestamp == undefined) {
                            obj.timestamp = Date.now();
                        }
                        if (obj.promise != undefined) {
                            obj.uid = _qz.websocket.setup.newUID();
                            _qz.websocket.pendingCalls[obj.uid] = obj.promise;
                        }

                        try {
                            if (obj.call != undefined && obj.signature == undefined) {
                                var signObj = {
                                    call: obj.call,
                                    params: obj.params,
                                    timestamp: obj.timestamp
                                };

                                _qz.security.callSign(_qz.tools.hash(_qz.tools.stringify(signObj))).then(function(signature) {
                                    _qz.log.trace("Signature for call", signature);
                                    obj.signature = signature;
                                    _qz.signContent = undefined;

                                    _qz.websocket.connection.send(_qz.tools.stringify(obj));
                                });
                            } else {
                                _qz.log.trace("Signature for call", obj.signature);

                                //called for pre-signed content and (unsigned) setup calls
                                _qz.websocket.connection.send(_qz.tools.stringify(obj));
                            }
                        }
                        catch(err) {
                            _qz.log.error(err);

                            if (obj.promise != undefined) {
                                obj.promise.reject(err);
                                delete _qz.websocket.pendingCalls[obj.uid];
                            }
                        }
                    };

                    //receive message from qz
                    _qz.websocket.connection.onmessage = function(evt) {
                        var returned = JSON.parse(evt.data);

                        if (returned.uid == null) {
                            if (returned.type == null) {
                                //incorrect response format, likely connected to incompatible 365  version
                                _qz.websocket.connection.close(4003, "Connected to incompatible 365 Tray version");

                            } else {
                                //streams (callbacks only, no promises)
                                switch(returned.type) {
                                    case _qz.streams.serial:
                                        if (!returned.event) {
                                            returned.event = JSON.stringify({ portName: returned.key, output: returned.data });
                                        }

                                        _qz.serial.callSerial(JSON.parse(returned.event));
                                        break;
                                    case _qz.streams.usb:
                                        if (!returned.event) {
                                            returned.event = JSON.stringify({ vendorId: returned.key[0], productId: returned.key[1], output: returned.data });
                                        }

                                        _qz.usb.callUsb(JSON.parse(returned.event));
                                        break;
                                    case _qz.streams.hid:
                                        _qz.hid.callHid(JSON.parse(returned.event));
                                        break;
                                    default:
                                        _qz.log.warn("Cannot determine stream type for callback", returned);
                                        break;
                                }
                            }

                            return;
                        }

                        _qz.log.trace("Received response from websocket", returned);

                        var promise = _qz.websocket.pendingCalls[returned.uid];
                        if (promise == undefined) {
                            _qz.log.warn('No promise found for returned response');
                        } else {
                            if (returned.error != undefined) {
                                promise.reject(new Error(returned.error));
                            } else {
                                promise.resolve(returned.result);
                            }
                        }

                        delete _qz.websocket.pendingCalls[returned.uid];
                    };


                    //send up the certificate before making any calls
                    //also gives the user a chance to deny the connection
                    function sendCert(cert) {
                        if (cert === undefined) { cert = null; }
                        _qz.websocket.connection.sendData({ certificate: cert, promise: openPromise });
                    }

                    _qz.security.callCert().then(sendCert).catch(sendCert);
                },

                /** Generate unique ID used to map a response to a call. */
                newUID: function() {
                    var len = 6;
                    return (new Array(len + 1).join("0") + (Math.random() * Math.pow(36, len) << 0).toString(36)).slice(-len)
                }
            },

            dataPromise: function(callName, params, signature, signingTimestamp) {
                return _qz.tools.promise(function(resolve, reject) {
                    var msg = {
                        call: callName,
                        promise: { resolve: resolve, reject: reject },
                        params: params,
                        signature: signature,
                        timestamp: signingTimestamp
                    };

                    _qz.websocket.connection.sendData(msg);
                });
            },

            /** Library of promises awaiting a response, uid -> promise */
            pendingCalls: {},

            /** List of functions to call on error from the websocket. */
            errorCallbacks: [],
            /** Calls all functions registered to listen for errors. */
            callError: function(evt) {
                if (Array.isArray(_qz.websocket.errorCallbacks)) {
                    for(var i = 0; i < _qz.websocket.errorCallbacks.length; i++) {
                        _qz.websocket.errorCallbacks[i](evt);
                    }
                } else {
                    _qz.websocket.errorCallbacks(evt);
                }
            },

            /** List of function to call on closing from the websocket. */
            closedCallbacks: [],
            /** Calls all functions registered to listen for closing. */
            callClose: function(evt) {
                if (Array.isArray(_qz.websocket.closedCallbacks)) {
                    for(var i = 0; i < _qz.websocket.closedCallbacks.length; i++) {
                        _qz.websocket.closedCallbacks[i](evt);
                    }
                } else {
                    _qz.websocket.closedCallbacks(evt);
                }
            }
        },


        printing: {
            /** Default options used for new printer configs. Can be overridden using {@link qz.configs.setDefaults}. */
            defaultConfig: {
                //value purposes are explained in the qz.configs.setDefaults docs

                colorType: 'color',
                copies: 1,
                density: 0,
                duplex: false,
                fallbackDensity: null,
                interpolation: 'bicubic',
                jobName: null,
                margins: 0,
                orientation: null,
                paperThickness: null,
                printerTray: null,
                rasterize: true,
                rotation: 0,
                scaleContent: true,
                size: null,
                units: 'in',

                altPrinting: false,
                encoding: null,
                endOfDoc: null,
                perSpool: 1
            }
        },


        serial: {
            /** List of functions called when receiving data from serial connection. */
            serialCallbacks: [],
            /** Calls all functions registered to listen for serial events. */
            callSerial: function(streamEvent) {
                if (Array.isArray(_qz.serial.serialCallbacks)) {
                    for(var i = 0; i < _qz.serial.serialCallbacks.length; i++) {
                        _qz.serial.serialCallbacks[i](streamEvent);
                    }
                } else {
                    _qz.serial.serialCallbacks(streamEvent);
                }
            }
        },


        usb: {
            /** List of functions called when receiving data from usb connection. */
            usbCallbacks: [],
            /** Calls all functions registered to listen for usb events. */
            callUsb: function(streamEvent) {
                if (Array.isArray(_qz.usb.usbCallbacks)) {
                    for(var i = 0; i < _qz.usb.usbCallbacks.length; i++) {
                        _qz.usb.usbCallbacks[i](streamEvent);
                    }
                } else {
                    _qz.usb.usbCallbacks(streamEvent);
                }
            }
        },


        hid: {
            /** List of functions called when receiving data from hid connection. */
            hidCallbacks: [],
            /** Calls all functions registered to listen for hid events. */
            callHid: function(streamEvent) {
                if (Array.isArray(_qz.hid.hidCallbacks)) {
                    for(var i = 0; i < _qz.hid.hidCallbacks.length; i++) {
                        _qz.hid.hidCallbacks[i](streamEvent);
                    }
                } else {
                    _qz.hid.hidCallbacks(streamEvent);
                }
            }
        },


        security: {
            /** Function used to resolve promise when acquiring site's public certificate. */
            certPromise: function(resolve, reject) { reject(); },
            /** Called to create new promise (using {@link _qz.security.certPromise}) for certificate retrieval. */
            callCert: function() {
                return _qz.tools.promise(_qz.security.certPromise);
            },

            /** Function used to create promise resolver when requiring signed calls. */
            signaturePromise: function() { return function(resolve) { resolve(); } },
            /** Called to create new promise (using {@link _qz.security.signaturePromise}) for signed calls. */
            callSign: function(toSign) {
                return _qz.tools.promise(_qz.security.signaturePromise(toSign));
            }
        },


        tools: {
            /** Create a new promise */
            promise: function(resolver) {
                return new RSVP.Promise(resolver);
            },

            stringify: function(object) {
                //old versions of prototype affect stringify
                var pjson = Array.prototype.toJSON;
                delete Array.prototype.toJSON;

                var result = JSON.stringify(object);

                if (pjson) {
                    Array.prototype.toJSON = pjson;
                }

                return result;
            },

            hash: function(data) {
                return Sha256.hash(data);
            },

            ws: typeof WebSocket !== 'undefined' ? WebSocket : null,

            absolute: function(loc) {
                if (typeof window !== 'undefined' && typeof document.createElement === 'function') {
                    var a = document.createElement("a");
                    a.href = loc;
                    return a.href;
                }
                return loc;
            },

            /** Performs deep copy to target from remaining params */
            extend: function(target) {
                //special case when reassigning properties as objects in a deep copy
                if (typeof target !== 'object') {
                    target = {};
                }

                for(var i = 1; i < arguments.length; i++) {
                    var source = arguments[i];
                    if (!source) { continue; }

                    for(var key in source) {
                        if (source.hasOwnProperty(key)) {
                            if (target === source[key]) { continue; }

                            if (source[key] && source[key].constructor && source[key].constructor === Object) {
                                var clone;
                                if (Array.isArray(source[key])) {
                                    clone = target[key] || [];
                                } else {
                                    clone = target[key] || {};
                                }

                                target[key] = _qz.tools.extend(clone, source[key]);
                            } else if (source[key] !== undefined) {
                                target[key] = source[key];
                            }
                        }
                    }
                }

                return target;
            }
        }
    };


///// CONFIG CLASS ////

    /** Object to handle configured printer options. */
    function Config(printer, opts) {
        /**
         * Set the printer assigned to this config.
         * @param {string|Object} newPrinter Name of printer. Use object type to specify printing to file or host.
         *  @param {string} [newPrinter.name] Name of printer to send printing.
         *  @param {string} [newPrinter.file] Name of file to send printing.
         *  @param {string} [newPrinter.host] IP address or host name to send printing.
         *  @param {string} [newPrinter.port] Port used by &lt;printer.host>.
         */
        this.setPrinter = function(newPrinter) {
            if (typeof newPrinter === 'string') {
                newPrinter = { name: newPrinter };
            }

            this.printer = newPrinter;
        };

        /**
         *  @returns {Object} The printer currently assigned to this config.
         */
        this.getPrinter = function() {
            return this.printer;
        };

        /**
         * Alter any of the printer options currently applied to this config.
         * @param newOpts {Object} The options to change. See <code>qz.config.setDefaults</code> docs for available values.
         *
         * @see qz.config.setDefaults
         */
        this.reconfigure = function(newOpts) {
            _qz.tools.extend(this.config, newOpts);
        };

        /**
         * @returns {Object} The currently applied options on this config.
         */
        this.getOptions = function() {
            return this.config;
        };

        // init calls for new config object
        this.setPrinter(printer);
        this.config = opts;
    }

    /**
     * Shortcut method for calling <code>qz.print</code> with a particular config.
     * @param {Array<Object|string>} data Array of data being sent to the printer. See <code>qz.print</code> docs for available values.
     * @param {boolean} [signature] Pre-signed signature of JSON string containing <code>call</code>, <code>params</code>, and <code>timestamp</code>.
     * @param {number} [signingTimestamp] Required with <code>signature</code>. Timestamp used with pre-signed content.
     *
     * @example
     * qz.print(myConfig, ...); // OR
     * myConfig.print(...);
     *
     * @see qz.print
     */
    Config.prototype.print = function(data, signature, signingTimestamp) {
        qz.print(this, data, signature, signingTimestamp);
    };


///// PUBLIC METHODS /////

    /** @namespace qz */
    return {

        /**
         * Calls related specifically to the web socket connection.
         * @namespace qz.websocket
         */
        websocket: {
            /**
             * Check connection status. Active connection is necessary for other calls to run.
             *
             * @returns {boolean} If there is an active connection with 365 Tray.
             *
             * @see connect
             *
             * @memberof  qz.websocket
             */
            isActive: function() {
                return _qz.websocket.connection != null && _qz.websocket.connection.established;
            },

            /**
             * Call to setup connection with 365 Tray on user's system.
             *
             * @param {Object} [options] Configuration options for the web socket connection.
             *  @param {string|Array<string>} [options.host=['localhost', 'localhost.qz.io']] Host running the 365 Tray software.
             *  @param {Object} [options.port] Config options for ports to cycle.
             *   @param {Array<number>} [options.port.secure=[8181, 8282, 8383, 8484]] Array of secure (WSS) ports to try
             *   @param {Array<number>} [options.port.insecure=[8182, 8283, 8384, 8485]] Array of insecure (WS) ports to try
             *  @param {boolean} [options.usingSecure=true] If the web socket should try to use secure ports for connecting.
             *  @param {number} [options.keepAlive=60] Seconds between keep-alive pings to keep connection open. Set to 0 to disable.
             *  @param {number} [options.retries=0] Number of times to reconnect before failing.
             *  @param {number} [options.delay=0] Seconds before firing a connection.  Ignored if <code>options.retries</code> is 0.
             *
             * @returns {Promise<null|Error>}
             *
             * @memberof qz.websocket
             */
            connect: function(options) {
                return _qz.tools.promise(function(resolve, reject) {
                    if (qz.websocket.isActive()) {
                        reject(new Error("An open connection with 365 Tray already exists"));
                        return;
                    } else if (_qz.websocket.connection != null) {
                        reject(new Error("The current connection attempt has not returned yet"));
                        return;
                    }

                    if (!_qz.tools.ws) {
                        reject(new Error("WebSocket not supported by this browser"));
                        return;
                    } else if (!_qz.tools.ws.CLOSED || _qz.tools.ws.CLOSED == 2) {
                        reject(new Error("Unsupported WebSocket version detected: HyBi-00/Hixie-76"));
                        return;
                    }

                    //ensure some form of options exists for value checks
                    if (options == undefined) { options = {}; }

                    //disable secure ports if page is not secure
                    if (typeof location === 'undefined' || location.protocol !== 'https:') {
                        //respect forcing secure ports if it is defined, otherwise disable
                        if (typeof options.usingSecure === 'undefined') {
                            _qz.log.trace("Disabling secure ports due to insecure page");
                            options.usingSecure = false;
                        }
                    }

                    //ensure any hosts are passed to internals as an array
                    if (typeof options.host !== 'undefined' && !Array.isArray(options.host)) {
                        options.host = [options.host];
                    }

                    var attempt = function(count) {
                        var nextAttempt = function() {
                            if (options && count < options.retries) {
                                attempt(count + 1);
                            } else {
                                _qz.websocket.connection = null;
                                reject.apply(null, arguments);
                            }
                        };

                        var delayed = function() {
                            var config = _qz.tools.extend({}, _qz.websocket.connectConfig, options);
                            _qz.websocket.setup.findConnection(config, resolve, nextAttempt)
                        };
                        if (count == 0) {
                            delayed(); // only retries will be called with a delay
                        } else {
                            setTimeout(delayed, options.delay * 1000);
                        }
                    };

                    attempt(0);
                });
            },

            /**
             * Stop any active connection with 365 Tray.
             *
             * @returns {Promise<null|Error>}
             *
             * @memberof qz.websocket
             */
            disconnect: function() {
                return _qz.tools.promise(function(resolve, reject) {
                    if (qz.websocket.isActive()) {
                        _qz.websocket.connection.close();
                        _qz.websocket.connection.promise = { resolve: resolve, reject: reject };
                    } else {
                        reject(new Error("No open connection with 365 Tray"))
                    }
                });
            },

            /**
             * List of functions called for any connections errors outside of an API call.<p/>
             * Also called if {@link websocket#connect} fails to connect.
             *
             * @param {Function|Array<Function>} calls Single or array of <code>Function({Event} event)</code> calls.
             *
             * @memberof qz.websocket
             */
            setErrorCallbacks: function(calls) {
                _qz.websocket.errorCallbacks = calls;
            },

            /**
             * List of functions called for any connection closing event outside of an API call.<p/>
             * Also called when {@link websocket#disconnect} is called.
             *
             * @param {Function|Array<Function>} calls Single or array of <code>Function({Event} event)</code> calls.
             *
             * @memberof qz.websocket
             */
            setClosedCallbacks: function(calls) {
                _qz.websocket.closedCallbacks = calls;
            },

            /**
             * @param {string} [hostname] Hostname to try to connect to when determining network interfaces, defaults to "google.com"
             * @param {number} [port] Port to use with custom hostname, defaults to 443
             *
             * @returns {Promise<Object<{ipAddress: String, macAddress: String}>|Error>} Connected system's network information.
             *
             * @memberof qz.websocket
             */
            getNetworkInfo: function(hostname, port) {
                return _qz.websocket.dataPromise('websocket.getNetworkInfo', {
                    hostname: hostname,
                    port: port
                });
            },

            /**
             * @returns {Object<{socket: String, host: String, port: Number}>} Details of active websocket connection
             *
             * @memberof qz.websocket
             */
            getConnectionInfo: function() {
                if (_qz.websocket.connection) {
                    var url = _qz.websocket.connection.url.split(/[:\/]+/g);
                    return { socket: url[0], host: url[1], port: +url[2] };
                } else {
                    throw new Error("A connection to 365 has not been established yet");
                }
            }

        },


        /**
         * Calls related to getting printer information from the connection.
         * @namespace qz.printers
         */
        printers: {
            /**
             * @returns {Promise<string|Error>} Name of the connected system's default printer.
             *
             * @memberof qz.printers
             */
            getDefault: function() {
                return _qz.websocket.dataPromise('printers.getDefault');
            },

            /**
             * @param {string} [query] Search for a specific printer. All printers are returned if not provided.
             *
             * @returns {Promise<Array<string>|string|Error>} The matched printer name if <code>query</code> is provided.
             *                                                Otherwise an array of printer names found on the connected system.
             *
             * @memberof qz.printers
             */
            find: function(query) {
                return _qz.websocket.dataPromise('printers.find', { query: query });
            }
        },

        /**
         * Calls related to setting up new printer configurations.
         * @namespace qz.configs
         */
        configs: {
            /**
             * Default options used by new configs if not overridden.
             * Setting a value to NULL will use the printer's default options.
             * Updating these will not update the options on any created config.
             *
             * @param {Object} options Default options used by printer configs if not overridden.
             *
             *  @param {string} [options.colorType='color'] Valid values <code>[color | grayscale | blackwhite]</code>
             *  @param {number} [options.copies=1] Number of copies to be printed.
             *  @param {number|Array<number>} [options.density=72] Pixel density (DPI, DPMM, or DPCM depending on <code>[options.units]</code>).
             *      If provided as an array, uses the first supported density found (or the first entry if none found).
             *  @param {boolean} [options.duplex=false] Double sided printing
             *  @param {number} [options.fallbackDensity=null] Value used when default density value cannot be read, or in cases where reported as "Normal" by the driver, (in DPI, DPMM, or DPCM depending on <code>[options.units]</code>).
             *  @param {string} [options.interpolation='bicubic'] Valid values <code>[bicubic | bilinear | nearest-neighbor]</code>. Controls how images are handled when resized.
             *  @param {string} [options.jobName=null] Name to display in print queue.
             *  @param {Object|number} [options.margins=0] If just a number is provided, it is used as the margin for all sides.
             *   @param {number} [options.margins.top=0]
             *   @param {number} [options.margins.right=0]
             *   @param {number} [options.margins.bottom=0]
             *   @param {number} [options.margins.left=0]
             *  @param {string} [options.orientation=null] Valid values <code>[portrait | landscape | reverse-landscape]</code>
             *  @param {number} [options.paperThickness=null]
             *  @param {string} [options.printerTray=null] //TODO - string?
             *  @param {boolean} [options.rasterize=true] Whether documents should be rasterized before printing. Forced TRUE if <code>[options.density]</code> is specified.
             *  @param {number} [options.rotation=0] Image rotation in degrees.
             *  @param {boolean} [options.scaleContent=true] Scales print content to page size, keeping ratio.
             *  @param {Object} [options.size=null] Paper size.
             *   @param {number} [options.size.width=null] Page width.
             *   @param {number} [options.size.height=null] Page height.
             *  @param {string} [options.units='in'] Page units, applies to paper size, margins, and density. Valid value <code>[in | cm | mm]</code>
             *
             *  @param {boolean} [options.altPrinting=false] Print the specified file using CUPS command line arguments.  Has no effect on Windows.
             *  @param {string} [options.encoding=null] Character set
             *  @param {string} [options.endOfDoc=null]
             *  @param {number} [options.perSpool=1] Number of pages per spool.
             *
             * @memberof qz.configs
             */
            setDefaults: function(options) {
                _qz.tools.extend(_qz.printing.defaultConfig, options);
            },

            /**
             * Creates new printer config to be used in printing.
             *
             * @param {string|object} printer Name of printer. Use object type to specify printing to file or host.
             *  @param {string} [printer.name] Name of printer to send printing.
             *  @param {string} [printer.file] Name of file to send printing.
             *  @param {string} [printer.host] IP address or host name to send printing.
             *  @param {string} [printer.port] Port used by &lt;printer.host>.
             * @param {Object} [options] Override any of the default options for this config only.
             *
             * @returns {Config} The new config.
             *
             * @see config.setDefaults
             *
             * @memberof qz.configs
             */
            create: function(printer, options) {
                var myOpts = _qz.tools.extend({}, _qz.printing.defaultConfig, options);
                return new Config(printer, myOpts);
            }
        },


        /**
         * Send data to selected config for printing.
         * The promise for this method will resolve when the document has been sent to the printer. Actual printing may not be complete.
         * <p/>
         * Optionally, print requests can be pre-signed:
         * Signed content consists of a JSON object string containing no spacing,
         * following the format of the "call" and "params" keys in the API call, with the addition of a "timestamp" key in milliseconds
         * ex. <code>'{"call":"<callName>","params":{...},"timestamp":1450000000}'</code>
         *
         * @param {Object<Config>} config Previously created config object.
         * @param {Array<Object|string>} data Array of data being sent to the printer. String values are interpreted the same as the default <code>[raw]</code> object value.
         *  @param {string} data.data
         *  @param {string} data.type Valid values <code>[html | image | pdf | raw]</code>
         *  @param {string} [data.format] Format of data provided.<p/>
         *      For <code>[html]</code> types, valid formats include <code>[file(default) | plain]</code>.<p/>
         *      For <code>[image]</code> types, valid formats include <code>[base64 | file(default)]</code>.<p/>
         *      For <code>[pdf]</code> types, valid format include <code>[base64 | file(default)]</code>.<p/>
         *      For <code>[raw]</code> types, valid formats include <code>[base64 | file | hex | plain(default) | image | xml]</code>.
         *  @param {Object} [data.options]
         *   @param {string} [data.options.language] Required with <code>[raw]</code> type <code>[image]</code> format. Printer language.
         *   @param {number} [data.options.x] Optional with <code>[raw]</code> type <code>[image]</code> format. The X position of the image.
         *   @param {number} [data.options.y] Optional with <code>[raw]</code> type <code>[image]</code> format. The Y position of the image.
         *   @param {string|number} [data.options.dotDensity] Optional with <code>[raw]</code> type <code>[image]</code> format.
         *   @param {string} [data.options.xmlTag] Required with <code>[xml]</code> format. Tag name containing base64 formatted data.
         *   @param {number} [data.options.pageWidth] Optional with <code>[html]</code> type printing. Width of the web page to render. Defaults to paper width.
         *   @param {number} [data.options.pageHeight] Optional with <code>[html]</code> type printing. Height of the web page to render. Defaults to adjusted web page height.
         * @param {boolean} [signature] Pre-signed signature of JSON string containing <code>call</code>, <code>params</code>, and <code>timestamp</code>.
         * @param {number} [signingTimestamp] Required with <code>signature</code>. Timestamp used with pre-signed content.
         *
         * @returns {Promise<null|Error>}
         *
         * @see qz.config.create
         *
         * @memberof qz
         */
        print: function(config, data, signature, signingTimestamp) {
            //change relative links to absolute
            for(var i = 0; i < data.length; i++) {
                if (data[i].constructor === Object) {
                    if ((!data[i].format && data[i].type && data[i].type.toUpperCase() !== 'RAW') //unspecified format and not raw -> assume file
                        || (data[i].format && (data[i].format.toUpperCase() === 'FILE'
                        || (data[i].format.toUpperCase() === 'IMAGE' && !(data[i].data.indexOf("data:image/") === 0 && data[i].data.indexOf(";base64,") !== 0))
                        || data[i].format.toUpperCase() === 'XML'))) {
                        data[i].data = _qz.tools.absolute(data[i].data);
                    }
                }
            }

            var params = {
                printer: config.getPrinter(),
                options: config.getOptions(),
                data: data
            };
            return _qz.websocket.dataPromise('print', params, signature, signingTimestamp);
        },


        /**
         * Calls related to interaction with serial ports.
         * @namespace qz.serial
         */
        serial: {
            /**
             * @returns {Promise<Array<string>|Error>} Communication (RS232, COM, TTY) ports available on connected system.
             *
             * @memberof qz.serial
             */
            findPorts: function() {
                return _qz.websocket.dataPromise('serial.findPorts');
            },

            /**
             * List of functions called for any response from open serial ports.
             * Event data will contain <code>{string} portName</code> for all types.
             *  For RECEIVE types, <code>{string} output</code>.
             *  For ERROR types, <code>{string} exception</code>.
             *
             * @param {Function|Array<Function>} calls Single or array of <code>Function({string} portName, {string} output)</code> calls.
             *
             * @memberof qz.serial
             */
            setSerialCallbacks: function(calls) {
                _qz.serial.serialCallbacks = calls;
            },

            /**
             * @param {string} port Name of port to open.
             * @param {Object} bounds Boundaries of serial port output.
             *  @param {string} [bounds.begin=0x0002] Character denoting start of serial response. Not used if <code>width</code is provided.
             *  @param {string} [bounds.end=0x000D] Character denoting end of serial response. Not used if <code>width</code> is provided.
             *  @param {number} [bounds.width] Used for fixed-width response serial communication.
             *
             * @returns {Promise<null|Error>}
             *
             * @memberof qz.serial
             */
            openPort: function(port, bounds) {
                var params = {
                    port: port,
                    bounds: bounds
                };
                return _qz.websocket.dataPromise('serial.openPort', params);
            },

            /**
             * Send commands over a serial port.
             * Any responses from the device will be sent to serial callback functions.
             *
             * @param {string} port An open port to send data over.
             * @param {string} data The data to send to the serial device.
             * @param {Object} [properties] Properties of data being sent over the serial port.
             *  @param {string} [properties.baudRate=9600]
             *  @param {string} [properties.dataBits=8]
             *  @param {string} [properties.stopBits=1]
             *  @param {string} [properties.parity='NONE'] Valid values <code>[NONE| EVEN | ODD | MARK | SPACE]</code>
             *  @param {string} [properties.flowControl='NONE'] Valid values <code>[NONE | XONXOFF_OUT | XONXOFF_IN | RTSCTS_OUT | RTSCTS_IN]</code>
             *
             * @returns {Promise<null|Error>}
             *
             * @see qz.serial.setSerialCallbacks
             *
             * @memberof qz.serial
             */
            sendData: function(port, data, properties) {
                var params = {
                    port: port,
                    data: data,
                    properties: properties
                };
                return _qz.websocket.dataPromise('serial.sendData', params);
            },

            /**
             * @param {string} port Name of port to close.
             *
             * @returns {Promise<null|Error>}
             *
             * @memberof qz.serial
             */
            closePort: function(port) {
                return _qz.websocket.dataPromise('serial.closePort', { port: port });
            }
        },


        /**
         * Calls related to interaction with USB devices.
         * @namespace qz.usb
         */
        usb: {
            /**
             * List of available USB devices. Includes (hexadecimal) vendor ID, (hexadecimal) product ID, and hub status.
             * If supported, also returns manufacturer and product descriptions.
             *
             * @param includeHubs Whether to include USB hubs.
             * @returns {Promise<Array<Object>|Error>} Array of JSON objects containing information on connected USB devices.
             *
             * @memberof qz.usb
             */
            listDevices: function(includeHubs) {
                return _qz.websocket.dataPromise('usb.listDevices', { includeHubs: includeHubs });
            },

            /**
             * @param vendorId Hex string of USB device's vendor ID.
             * @param productId Hex string of USB device's product ID.
             * @returns {Promise<Array<string>|Error>} List of available (hexadecimal) interfaces on a USB device.
             *
             * @memberof qz.usb
             */
            listInterfaces: function(vendorId, productId) {
                var params = {
                    vendorId: vendorId,
                    productId: productId
                };
                return _qz.websocket.dataPromise('usb.listInterfaces', params);
            },

            /**
             * @param vendorId Hex string of USB device's vendor ID.
             * @param productId Hex string of USB device's product ID.
             * @param iface Hex string of interface on the USB device to search.
             * @returns {Promise<Array<string>|Error>} List of available (hexadecimal) endpoints on a USB device's interface.
             *
             * @memberof qz.usb
             */
            listEndpoints: function(vendorId, productId, iface) {
                var params = {
                    vendorId: vendorId,
                    productId: productId,
                    interface: iface
                };
                return _qz.websocket.dataPromise('usb.listEndpoints', params);
            },

            /**
             * List of functions called for any response from open usb devices.
             * Event data will contain <code>{string} vendorId</code> and <code>{string} productId</code> for all types.
             *  For RECEIVE types, <code>{Array} output</code> (in hexadecimal format).
             *  For ERROR types, <code>{string} exception</code>.
             *
             * @param {Function|Array<Function>} calls Single or array of <code>Function({Object} eventData)</code> calls.
             *
             * @memberof qz.usb
             */
            setUsbCallbacks: function(calls) {
                _qz.usb.usbCallbacks = calls;
            },

            /**
             * Claim a USB device's interface to enable sending/reading data across an endpoint.
             *
             * @param vendorId Hex string of USB device's vendor ID.
             * @param productId Hex string of USB device's product ID.
             * @param iface Hex string of interface on the USB device to claim.
             * @returns {Promise<null|Error>}
             *
             * @memberof qz.usb
             */
            claimDevice: function(vendorId, productId, iface) {
                var params = {
                    vendorId: vendorId,
                    productId: productId,
                    interface: iface
                };
                return _qz.websocket.dataPromise('usb.claimDevice', params);
            },

            /**
             * Check the current claim state of a USB device.
             *
             * @param vendorId Hex string of USB device's vendor ID.
             * @param productId Hex string of USB device's product ID.
             * @returns {Promise<boolean|Error>}
             *
             * @since 2.0.2
             * @memberOf qz.usb
             */
            isClaimed: function(vendorId, productId) {
                var params = {
                    vendorId: vendorId,
                    productId: productId
                };
                return _qz.websocket.dataPromise('usb.isClaimed', params);
            },

            /**
             * Send data to a claimed USB device.
             *
             * @param vendorId Hex string of USB device's vendor ID.
             * @param productId Hex string of USB device's product ID.
             * @param endpoint Hex string of endpoint on the claimed interface for the USB device.
             * @param data Bytes to send over specified endpoint.
             * @returns {Promise<null|Error>}
             *
             * @memberof qz.usb
             */
            sendData: function(vendorId, productId, endpoint, data) {
                var params = {
                    vendorId: vendorId,
                    productId: productId,
                    endpoint: endpoint,
                    data: data
                };
                return _qz.websocket.dataPromise('usb.sendData', params);
            },

            /**
             * Read data from a claimed USB device.
             *
             * @param vendorId Hex string of USB device's vendor ID.
             * @param productId Hex string of USB device's product ID.
             * @param endpoint Hex string of endpoint on the claimed interface for the USB device.
             * @param responseSize Size of the byte array to receive a response in.
             * @returns {Promise<Array<string>|Error>} List of (hexadecimal) bytes received from the USB device.
             *
             * @memberof qz.usb
             */
            readData: function(vendorId, productId, endpoint, responseSize) {
                var params = {
                    vendorId: vendorId,
                    productId: productId,
                    endpoint: endpoint,
                    responseSize: responseSize
                };
                return _qz.websocket.dataPromise('usb.readData', params);
            },

            /**
             * Provides a continuous stream of read data from a claimed USB device.
             *
             * @param vendorId Hex string of USB device's vendor ID.
             * @param productId Hex string of USB device's product ID.
             * @param endpoint Hex string of endpoint on the claimed interface for the USB device.
             * @param responseSize Size of the byte array to receive a response in.
             * @param [interval=100] Frequency to send read data back, in milliseconds.
             * @returns {Promise<null|Error>}
             *
             * @see qz.usb.setUsbCallbacks
             *
             * @memberof qz.usb
             */
            openStream: function(vendorId, productId, endpoint, responseSize, interval) {
                var params = {
                    vendorId: vendorId,
                    productId: productId,
                    endpoint: endpoint,
                    responseSize: responseSize,
                    interval: interval
                };
                return _qz.websocket.dataPromise('usb.openStream', params);
            },

            /**
             * Stops the stream of read data from a claimed USB device.
             *
             * @param vendorId Hex string of USB device's vendor ID.
             * @param productId Hex string of USB device's product ID.
             * @param endpoint Hex string of endpoint on the claimed interface for the USB device.
             * @returns {Promise<null|Error>}
             *
             * @memberof qz.usb
             */
            closeStream: function(vendorId, productId, endpoint) {
                var params = {
                    vendorId: vendorId,
                    productId: productId,
                    endpoint: endpoint
                };
                return _qz.websocket.dataPromise('usb.closeStream', params);
            },

            /**
             * Release a claimed USB device to free resources after sending/reading data.
             *
             * @param vendorId Hex string of USB device's vendor ID.
             * @param productId Hex string of USB device's product ID.
             * @returns {Promise<null|Error>}
             *
             * @memberof qz.usb
             */
            releaseDevice: function(vendorId, productId) {
                var params = {
                    vendorId: vendorId,
                    productId: productId
                };
                return _qz.websocket.dataPromise('usb.releaseDevice', params);
            }
        },


        /**
         * Calls related to interaction with HID USB devices<br/>
         * Many of these calls can be accomplished from the <code>qz.usb</code> namespace,
         * but HID allows for simpler interaction
         * @namespace qz.hid
         * @since 2.0.1
         */
        hid: {
            /**
             * List of available HID devices. Includes (hexadecimal) vendor ID and (hexadecimal) product ID.
             * If available, also returns manufacturer and product descriptions.
             *
             * @returns {Promise<Array<Object>|Error>} Array of JSON objects containing information on connected HID devices.
             * @since 2.0.1
             *
             * @memberof qz.hid
             */
            listDevices: function() {
                return _qz.websocket.dataPromise('hid.listDevices');
            },

            /**
             * Start listening for HID device actions, such as attach / detach events.
             * Reported under the ACTION type in the streamEvent on callbacks.
             *
             * @returns {Promise<null|Error>}
             * @since 2.0.1
             *
             * @see qz.hid.setHidCallbacks
             *
             * @memberof qz.hid
             */
            startListening: function() {
                return _qz.websocket.dataPromise('hid.startListening');
            },

            /**
             * Stop listening for HID device actions.
             *
             * @returns {Promise<null|Error>}
             * @since 2.0.1
             *
             * @see qz.hid.setHidCallbacks
             *
             * @memberof qz.hid
             */
            stopListening: function() {
                return _qz.websocket.dataPromise('hid.stopListening');
            },

            /**
             * List of functions called for any response from open usb devices.
             * Event data will contain <code>{string} vendorId</code> and <code>{string} productId</code> for all types.
             *  For RECEIVE types, <code>{Array} output</code> (in hexadecimal format).
             *  For ERROR types, <code>{string} exception</code>.
             *  For ACTION types, <code>{string} actionType</code>.
             *
             * @param {Function|Array<Function>} calls Single or array of <code>Function({Object} eventData)</code> calls.
             * @since 2.0.1
             *
             * @memberof qz.hid
             */
            setHidCallbacks: function(calls) {
                _qz.hid.hidCallbacks = calls;
            },

            /**
             * Claim a HID device to enable sending/reading data across.
             *
             * @param vendorId Hex string of HID device's vendor ID.
             * @param productId Hex string of HID device's product ID.
             * @returns {Promise<null|Error>}
             * @since 2.0.1
             *
             * @memberof qz.hid
             */
            claimDevice: function(vendorId, productId) {
                var params = {
                    vendorId: vendorId,
                    productId: productId
                };
                return _qz.websocket.dataPromise('hid.claimDevice', params);
            },

            /**
             * Check the current claim state of a HID device.
             *
             * @param vendorId Hex string of HID device's vendor ID.
             * @param productId Hex string of HID device's product ID.
             * @returns {Promise<boolean|Error>}
             *
             * @since 2.0.2
             * @memberOf qz.hid
             */
            isClaimed: function(vendorId, productId) {
                var params = {
                    vendorId: vendorId,
                    productId: productId
                };
                return _qz.websocket.dataPromise('hid.isClaimed', params);
            },

            /**
             * Send data to a claimed HID device.
             *
             * @param vendorId Hex string of USB device's vendor ID.
             * @param productId Hex string of USB device's product ID.
             * @param data Bytes to send over specified endpoint.
             * @param [reportId=0x00] First byte of the data packet signifying the HID report ID.
             *                        Must be 0x00 for devices only supporting a single report.
             * @returns {Promise<null|Error>}
             * @since 2.0.1
             *
             * @memberof qz.hid
             */
            sendData: function(vendorId, productId, data, reportId) {
                var params = {
                    vendorId: vendorId,
                    productId: productId,
                    endpoint: reportId,
                    data: data
                };
                return _qz.websocket.dataPromise('hid.sendData', params);
            },

            /**
             * Read data from a claimed HID device.
             *
             * @param vendorId Hex string of HID device's vendor ID.
             * @param productId Hex string of HID device's product ID.
             * @param responseSize Size of the byte array to receive a response in.
             * @returns {Promise<Array<string>|Error>} List of (hexadecimal) bytes received from the HID device.
             * @since 2.0.1
             *
             * @memberof qz.hid
             */
            readData: function(vendorId, productId, responseSize) {
                var params = {
                    vendorId: vendorId,
                    productId: productId,
                    responseSize: responseSize
                };
                return _qz.websocket.dataPromise('hid.readData', params);
            },

            /**
             * Provides a continuous stream of read data from a claimed HID device.
             *
             * @param vendorId Hex string of UHIDSB device's vendor ID.
             * @param productId Hex string of HID device's product ID.
             * @param responseSize Size of the byte array to receive a response in.
             * @param [interval=100] Frequency to send read data back, in milliseconds.
             * @returns {Promise<null|Error>}
             * @since 2.0.1
             *
             * @see qz.hid.setHidCallbacks
             *
             * @memberof qz.hid
             */
            openStream: function(vendorId, productId, responseSize, interval) {
                var params = {
                    vendorId: vendorId,
                    productId: productId,
                    responseSize: responseSize,
                    interval: interval
                };
                return _qz.websocket.dataPromise('hid.openStream', params);
            },

            /**
             * Stops the stream of read data from a claimed HID device.
             *
             * @param vendorId Hex string of HID device's vendor ID.
             * @param productId Hex string of HID device's product ID.
             * @returns {Promise<null|Error>}
             * @since 2.0.1
             *
             * @memberof qz.hid
             */
            closeStream: function(vendorId, productId) {
                var params = {
                    vendorId: vendorId,
                    productId: productId
                };
                return _qz.websocket.dataPromise('hid.closeStream', params);
            },

            /**
             * Release a claimed HID device to free resources after sending/reading data.
             *
             * @param vendorId Hex string of HID device's vendor ID.
             * @param productId Hex string of HID device's product ID.
             * @returns {Promise<null|Error>}
             * @since 2.0.1
             *
             * @memberof qz.hid
             */
            releaseDevice: function(vendorId, productId) {
                var params = {
                    vendorId: vendorId,
                    productId: productId
                };
                return _qz.websocket.dataPromise('hid.releaseDevice', params);
            }
        },


        /**
         * Calls related to signing connection requests.
         * @namespace qz.security
         */
        security: {
            /**
             * Set promise resolver for calls to acquire the site's certificate.
             *
             * @param {Function} promiseCall <code>Function({function} resolve)</code> called as promise for getting the public certificate.
             *        Should call <code>resolve</code> parameter with the result.
             *
             * @memberof qz.security
             */
            setCertificatePromise: function(promiseCall) {
                _qz.security.certPromise = promiseCall;
            },

            /**
             * Set promise creator for calls to sign API calls.
             *
             * @param {Function} promiseGen <code>Function({function} toSign)</code> Should return a function, <code>Function({function} resolve)</code>, that
             *                              will sign the content and resolve the created promise.
             * @memberof qz.security
             */
            setSignaturePromise: function(promiseGen) {
                _qz.security.signaturePromise = promiseGen;
            }
        },

        /**
         * Calls related to compatibility adjustments
         * @namespace qz.api
         */
        api: {
            /**
             * Show or hide 365 api debugging statements in the browser console.
             *
             * @param {boolean} show Whether the debugging logs for 365 should be shown. Hidden by default.
             *
             * @memberof qz.api
             */
            showDebug: function(show) {
                _qz.DEBUG = show;
            },

            /**
             * Get version of connected 365 Tray application.
             *
             * @returns {Promise<string|Error>} Version number of 365 Tray.
             *
             * @memberof qz.api
             */
            getVersion: function() {
                return _qz.websocket.dataPromise('getVersion');
            },
            getOrders: function () {
                return _qz.websocket.dataPromise('websocket.getOrders');
            },
            setOrders: function (jsonData) {
                var params = {
                    data: jsonData,
                };
                return _qz.websocket.dataPromise('websocket.setOrders', params);
            },
            /**
             * Change the promise library used by 365 API.
             * Should be called before any initialization to avoid possible errors.
             *
             * @param {Function} promiser <code>Function({function} resolver)</code> called to create new promises.
             *
             * @memberof qz.api
             */
            setPromiseType: function(promiser) {
                _qz.tools.promise = promiser;
            },

            /**
             * Change the SHA-256 hashing library used by 365 API.
             * Should be called before any initialization to avoid possible errors.
             *
             * @param {Function} hasher <code>Function({function} message)</code> called to create hash of passed string.
             *
             * @memberof qz.api
             */
            setSha256Type: function(hasher) {
                _qz.tools.hash = hasher;
            },

            /**
             * Change the WebSocket handler.
             * Should be called before any initialization to avoid possible errors.
             *
             * @param {Function} ws <code>Function({function} WebSocket)</code> called to override the internal WebSocket handler.
             *
             * @memberof qz.api
             */
            setWebSocketType: function(ws) {
                _qz.tools.ws = ws;
            }
        },

        /**
         * Version of this JavaScript library
         *
         * @constant {string}
         *
         * @memberof qz
         */
        version: _qz.VERSION
    };

})();


(function() {
    if (typeof define === 'function' && define.amd) {
        define(qz);
    } else if (typeof exports === 'object') {
        module.exports = qz;
        try {
            var crypto = require('crypto');
            qz.api.setSha256Type(function(data) {
                return crypto.createHash('sha256').update(data).digest('hex');
            });
        }
        catch(ignore) {}
    } else {
        window.qz = qz;
    }
})();
;
(function () {
    'use strict'
	App.config(['$translateProvider',function ($translateProvider) {
		$translateProvider.translations('vi-VN', {
					accountingTransactionGroup : 'Hạng mục Thu/Chi', 
								accountingTransactionGroup_Deposit : 'Gửi tiền', 
								accountingTransactionGroup_Othercosts : 'Chi phí khác', 
								accountingTransactionGroup_Otherincome : 'Thu nhập khác', 
								accountingTransactionGroup_Purchases : 'Trả tiền mua hàng/ Trả nợ', 
								accountingTransactionGroup_RecoverMoneyOrdering : 'Thu lại tiền từ đối tác', 
								accountingTransactionGroup_ReturnDeposits : 'Chi trả lại tiền cho đối tác', 
								accountingTransactionGroup_Sell : 'Thu tiền bán hàng/ Thu nợ', 
								accountingTransactionGroup_Withdraw : 'Rút tiền', 
								billion : 'tỷ', 
								branch : 'Chi nhánh', 
								button_Active : 'Kích hoạt', 
								button_Add : 'Thêm mới', 
								button_Cancel : 'Thoát', 
								button_CopyPermissions : 'Sao chép quyền hạn', 
								button_Delete : 'Xóa', 
								button_DeleteAll : 'Xóa hết', 
								button_Export : 'Xuất ra file', 
								button_Export_Helper : 'Mặc định chỉ xuất các cột được hiển thị trong lưới, nếu muốn xuất nhiều cột khác vui lòng chọn trong Menu phía trên cột.', 
								button_GoToHome : 'Quay về trang Quản lý', 
								button_Import : 'Nhập từ file', 
								button_Ok : 'Đồng ý', 
								button_OpenFile : 'Mở file', 
								button_Print : 'In', 
								button_Save : 'Lưu', 
								button_Sent : 'Gửi', 
								button_Success : 'Hoàn thành', 
								button_Update : 'Cập nhật', 
								button_View : 'Xem', 
								button_Void : 'Hủy', 
								chart_Cashflow : 'Thực thu', 
								chart_Revenue : 'Doanh thu trong {0}', 
								chart_RevenueByBranch : 'Doanh thu theo chi nhánh', 
								customer : 'Khách hàng', 
								download : 'Tải về', 
								download_Driver : 'Drivers cho các thiết bị', 
								download_ElectronicScale : 'Tải phần mềm hỗ trợ cân điện tử', 
								download_SilentPrinting : 'Phần mềm hỗ trợ in Tự động, Báo chế biến...', 
								downloadTemplate : 'Tải về file mẫu', 
								enum_Completed : 'Hoàn thành', 
								enum_Exception : 'Lỗi / Chuyển hoàn', 
								enum_Field_Book : 'Cửa hàng Sách, Truyện tranh...', 
								enum_Field_BuildingMaterials : 'Sắt thép, Vật liệu xây dựng', 
								enum_Field_Coffee : 'Coffee, Karaoke, Nhà hàng, Trà sữa, Bi_A-Game...', 
								enum_Field_Cosmetics : 'Spa, Mỹ phẩm, Salon Tóc', 
								enum_Field_Drug : 'Nhà Thuốc , Dược phẩm, Dụng cụ y tế', 
								enum_Field_Electronic : 'Điện tử, điện máy (Điện thoại, Máy tính, Phụ kiện...)', 
								enum_Field_Fashion : 'Cửa hàng Thời trang', 
								enum_Field_Interior : 'Đồ gỗ, Nội & Ngoại thất', 
								enum_Field_Other : 'Lĩnh vực kinh doanh khác', 
								enum_Field_Retail : 'Bán lẻ (Tạp hóa, Siêu thị...)', 
								enum_Field_Stationary : 'Văn phòng phẩm', 
								enum_InProcess : 'Đang xử lý', 
								enum_InTransit : 'Đang giao', 
								enum_OnOrder : 'Đặt hàng', 
								enum_ProductType_Composite : 'Combo', 
								enum_ProductType_Service : 'Dịch vụ', 
								enum_ProductType_Standard : 'Hàng hóa', 
								enum_SmsBrandName : 'Thương hiệu', 
								enum_SmsRandom : 'Ngẫu nhiên', 
								enum_TransactionType_AdjustedDebt : 'Điều chỉnh công nợ', 
								enum_TransactionType_Gift : 'Xuất tặng', 
								enum_TransactionType_ProductDamage : 'Xuất hủy', 
								enum_TransactionType_Recieve : 'Nhận hàng nội bộ', 
								enum_TransactionType_ReduceDirectMaterial : 'Trừ nguyên liệu bán hàng', 
								enum_TransactionType_ReduceMaterial : 'Nguyên liệu sản xuất', 
								enum_TransactionType_Self : 'Xuất tiêu dùng', 
								enum_TransactionType_ShippingCost : 'Chi phí giao hàng', 
								enum_Void : 'Hủy', 
								enum_WaitingForConfirmation : 'Chờ xác nhận', 
								expenses : 'Chi', 
								filter_7Days : '7 ngày trước', 
								filter_CustomRange : 'Lựa chọn khác', 
								filter_ThisMonth : 'Tháng này', 
								filter_ThisQuarter : 'Quý này', 
								filter_ThisYear : 'Năm này', 
								filter_Today : 'Hôm nay', 
								filter_Yesterday : 'Hôm qua', 
								group : 'Nhóm', 
								hotline : 'Hỗ trợ 24/7', 
								inventoryCount : 'Phiếu kiểm kê', 
								keyboardShortcuts_AddNewCustomer : 'Thêm mới khách hàng', 
								keyboardShortcuts_AddNewOrder : 'Thêm mới đơn hàng', 
								keyboardShortcuts_Print : 'Tạm tính', 
								kitchen : 'Báo chế biến', 
								label_AccessDenied : 'Từ chối truy cập', 
								label_Account : 'Tài khoản', 
								label_Account_Name : 'Tên tài khoản (hoặc số TK ngân hàng)', 
								label_Account_Transfer : 'Chuyển khoản', 
								label_AccountingTransaction_Description : 'Lý do', 
								label_AccountingTransaction_Partner : 'Người nộp/nhận', 
								label_AccountingTransactionGroup_ChooseGroup : '-- Chọn hạng mục--', 
								label_ActiveRetailer : 'Kích hoạt bản quyền', 
								label_Addby : 'Thêm theo chứng từ', 
								label_AddByCategory : 'Thêm theo Nhóm', 
								label_AddByPartnerBirthday : 'Thêm theo khách có ngày sinh nhật vào :', 
								label_AddByPartnerGroup : 'Thêm theo nhóm đối tác', 
								label_AddingToDebitAccount : 'Cộng vào tài khoản nợ', 
								label_AddProductBySupplier : 'Mặt hàng của NCC này?', 
								label_Address : 'Địa chỉ', 
								label_AfterPrinting : 'Thao tác sau tạm tính?', 
								label_All : 'Tất cả', 
								label_AllBranchCanView : 'Hiển thị trên tất cả Chi nhánh', 
								label_AllOfBranchs : 'Tất cả chi nhánh', 
								label_AllOfCustomers : 'Tất cả khách hàng', 
								label_AllOfUsers : 'Tất cả nhân viên', 
								label_AllTime : 'Toàn thời gian', 
								label_Amount : 'Tổng', 
								label_AmountReceived : 'Tiền khách trả', 
								label_AssistantBy : 'Nhân viên phụ bán', 
								label_AssistantBy_Help : 'Chỉ định nhân viên hưởng hoa hồng', 
								label_Auto : 'Tự động lựa chọn', 
								label_Autogen : 'Tự động tạo mã', 
								label_AutomaticallyAddMembers : 'Tự động thêm đối tác vào nhóm nếu đạt điều kiện về doanh số?', 
								label_AvailableDate : 'Ngày hiệu lực', 
								label_BarCode : 'Mã vạch', 
								label_BarCode_12Label : 'Khổ giấy 12 nhãn 202x162mm (Tomy 103)', 
								label_BarCode_1Label : 'Khổ giấy 1 nhãn 36x30mm/1.42x1.18 Inch', 
								label_BarCode_1Label50 : 'Khổ giấy 1 nhãn 58x40mm/2.28x1.57 Inch', 
								label_BarCode_2Label : 'Khổ giấy 2 nhãn', 
								label_BarCode_3Label : 'Khổ giấy 3 nhãn 104x22mm/4.2x0.9 Inch', 
								label_BarCode_65Label : 'Khổ giấy A4 65 nhãn (Tomy 145)', 
								label_BarCodePrinterName : 'Tên máy in Tem/Nhãn khi thanh toán', 
								label_BartenderAPrinterName : 'Tên máy in tại Quầy pha chế [A]', 
								label_BartenderAPrinterNameHelp : 'Tên máy in tại Quầy pha chế [A]', 
								label_BartenderBPrinterName : 'Tên máy in tại Quầy pha chế [B]', 
								label_BartenderBPrinterNameHelp : 'Tên máy in tại Quầy pha chế [B]', 
								label_BartenderCPrinterName : 'Tên máy in tại Quầy pha chế [C]', 
								label_BartenderCPrinterNameHelp : 'Tên máy in tại Quầy pha chế [C]', 
								label_BartenderDPrinterName : 'Tên máy in tại Quầy pha chế [D]', 
								label_BartenderDPrinterNameHelp : 'Tên máy in tại Quầy pha chế [D]', 
								label_BasePrice : 'Giá niêm yết', 
								label_BasePriceList : 'Giá niêm yết', 
								label_Beginningdebt : 'Nợ đầu kỳ', 
								label_BonusPoint : 'Hoa hồng nhân viên', 
								label_BonusPoint_Help : 'Thiết lập tỷ lệ để trả hoa hồng cho người bán trực tiếp sản phẩm này.', 
								label_BonusPointForAssistant : 'Hoa hồng nhân viên cấp ', 
								label_BonusPointForAssistant_Help : 'Thiết lập tỷ lệ để trả hoa hồng theo các cấp độ.', 
								label_BookingCalendar : 'Lịch đặt Phòng/Bàn', 
								label_Branch_Address : 'Địa chỉ chi nhánh', 
								label_Branch_IsOnline : 'Bán Online?', 
								label_Branch_IsOnlineHelp : 'Hệ thống yêu cầu phải tồn tại ít nhất 1 chi nhánh trong cửa hàng.', 
								label_Branch_Name : 'Tên chi nhánh', 
								label_Branch_Phone : 'Điện thoại chi nhánh', 
								label_Cash : 'Tiền mặt', 
								label_Cashflow_Balance : 'Tồn quỹ', 
								label_Cashflow_Beginning : 'Quỹ đầu kỳ', 
								label_Cashflow_TotalPaymentVoucher : 'Tổng chi', 
								label_Cashflow_TotalReceiptVoucher : 'Tổng thu', 
								label_CdKey_ActiveBranch : 'Kích hoạt chi nhánh', 
								label_CdKey_ActiveTime : 'Kích hoạt thời gian sử dụng', 
								label_CdKey_Key : 'Mã kích hoạt trong lớp cào thẻ', 
								label_ChangeSellingPrice : 'Thay đổi nhanh giá bán hàng hóa?', 
								label_Checkin : 'Giờ khách vào ', 
								label_Checkout : 'Khách thanh toán', 
								label_Checkout_Timer : 'Giờ khách ra', 
								label_CheckPriceBook : 'Tra cứu giá nhanh', 
								label_ClickToEnterSerials : 'Nhập Lô & Hạn sử dụng', 
								label_ClickToViewSerials : 'Click để xem số Lô & Hạn sử dụng', 
								label_ClosingBalance : 'Tồn cuối', 
								label_Code : 'Mã', 
								label_Commission : 'Hoa hồng', 
								label_Company : 'Công ty', 
								label_Component_Code : 'Mã thành phần', 
								label_Component_Name : 'Tên thành phần', 
								label_ComponentsInvalid : 'Thành phần không chính xác hoặc các thành phần khác tạo ra vòng lặp vô hạn.', 
								label_Config_Printing : 'Thiết lập in ấn & Thiết bị ngoại vi', 
								label_CostMethod_AVG : 'Trung bình', 
								label_CostMethod_Latest : 'Giá nhập cuối', 
								label_CostMethod_Static : 'Cố định', 
								label_CreatedBy : 'Người tạo', 
								label_CreatedDate : 'Ngày tạo', 
								label_CurrentOrder : 'Thực đơn đã xác nhận', 
								label_CurrentPrice : 'Giá bán hiện tại', 
								label_Customer_Address : 'Địa chỉ khách hàng', 
								label_Customer_Code : 'Mã khách hàng', 
								label_Customer_Name : 'Tên khách hàng', 
								label_Customer_Phone : 'Điện thoại khách hàng', 
								label_Customerservice : 'Chăm sóc khách hàng', 
								label_Day : 'Ngày', 
								label_Debit : 'Ghi nợ', 
								label_Debt : 'Dư nợ', 
								label_DebtInvoice : 'Nợ đơn hàng', 
								label_Default : 'mặc định', 
								label_Delivery : 'Giao hàng', 
								label_DeliveryDate : 'Ngày giao hàng', 
								label_Department : 'Bộ phận', 
								label_Description : 'Ghi chú', 
								label_Detail : 'Chi tiết', 
								label_Discount : 'Chiết khấu', 
								label_DiscountByPoint : 'Chiết khấu bằng điểm thưởng', 
								label_DiscountOnOrder : 'Chiết khấu đơn hàng', 
								label_DocumentCode : 'Mã chứng từ', 
								label_DocumentType : 'Phương thức', 
								label_DontPrintEmptyPrice : 'Không in ra hàng giá bán = 0', 
								label_DontPrintLabel : 'Không in ra tem nhãn khí bán hàng?', 
								label_DownloadTemplate : 'Tải file mẫu', 
								label_DuplicateTabs : 'Vui lòng đóng cửa sổ này & đảm bảo chỉ mở duy nhất một màn hình Thu ngân hoặc Bar-Bếp.', 
								label_ElectronicScale : 'Quét mã từ cân điện tử', 
								label_Endingdebt : 'Nợ cuối kỳ', 
								label_Entercard : 'Vui lòng nhập số Serial và Mã kích hoạt của thẻ kích hoạt.', 
								label_EnterSerial : 'Nhập số Lô', 
								label_EnterVerificationCode : 'Nhập mã kiểm tra', 
								label_Exceptinventories : 'Trừ kho khi bán 1 đơn vị', 
								label_ExcessCash : 'Tiền thừa', 
								label_Exchange : 'Ngoại tệ', 
								label_ExchangeRate : 'Tỷ giá ngoại tệ', 
								label_ExpirationDate : 'Hạn sử dụng', 
								label_ExpireIn : 'Hết hạn trong (Ngày)', 
								label_FeatureConfiguration_AllowChangeOrderItems : 'Cho phép nhân viên xóa thực đơn khách đã gọi ?', 
								label_FeatureConfiguration_AllowChangeOrderItemsHelp : 'Sau khi khách đã gọi món, thu ngân có quyền xóa mặt hàng đó ra khỏi đơn hàng.', 
								label_FeatureConfiguration_AllowChangePrice : 'Cho phép nhân viên thay đổi giá khi bán hàng', 
								label_FeatureConfiguration_AllowChangeSalespeople : 'Cho phép chỉ định nhân viên bán hàng', 
								label_FeatureConfiguration_AllowChangeSalespeopleHelp : 'Nhân viên thu ngân đăng nhập để bán hàng có thể chỉ định đơn hàng đó được bán bởi nhân viên bán hàng nào.', 
								label_FeatureConfiguration_AllowPrintPreview : 'Cho phép in tạm tính khi bán hàng', 
								label_FeatureConfiguration_AllowPrintPreviewHelp : 'Cho phép nhân viên được in phiếu tạm tính khi bán hàng', 
								label_FeatureConfiguration_BlockOfTimeToUseService : 'Block tính thời gian sử dụng dịch vụ (Phút)', 
								label_FeatureConfiguration_BlockOfTimeToUseServiceHelp : 'Hệ thống sẽ tính tiền cho mỗi {0} phút được thiết lập tại đây.', 
								label_FeatureConfiguration_ChangeTimer : 'Cho phép nhân viên thay đổi giờ Ra/Vào của Phòng/Bàn?', 
								label_FeatureConfiguration_CostMethod : 'Phương thức tính giá vốn?', 
								label_FeatureConfiguration_CostMethodHelp : 'Phương thức tính giá vốn của hàng hóa, mặc định là Giá vốn cố định.', 
								label_FeatureConfiguration_DifferentiatedproductsbyWarehouse : 'Phân biệt sản phẩm theo từng chi nhánh?', 
								label_FeatureConfiguration_DifferentiatedproductsbyWarehouseHelp : 'Bạn có thể xét sản phẩm hiển thị trên toàn hệ thống chi nhánh hoặc chỉ sử dụng cho 1 chi nhánh.', 
								label_FeatureConfiguration_ElectronicWeightScaleCodeLength : 'Chiều dài mã hàng trên mã vạch cân điện tử', 
								label_FeatureConfiguration_ElectronicWeightScaleCodeLengthHelp : 'Định nghĩa số ký tự mã hàng hóa được in trên mã vạch của cân điện tử', 
								label_FeatureConfiguration_IPFilterConfiguration : 'Chỉ định số IP được phép truy cập vào phần mềm', 
								label_FeatureConfiguration_IPFilterConfigurationHelp : 'Bạn có thể giới hạn nhân viên chỉ được phép truy cập từ địa chỉ IP cửa hàng, ví dụ (e.g. 8.8.8.8,8.8.4.4,...)', 
								label_FeatureConfiguration_LimitTransactionTime : 'Không cho phép thay đổi ngày giao dịch trên chứng từ', 
								label_FeatureConfiguration_LimitTransactionTimeHelp : 'Nhân viên không được thay đổi ngày tháng trên chứng từ, hệ thống luôn lấy  ngày hiện tại.', 
								label_FeatureConfiguration_NotAllowUpdateOrder : 'Không cho phép nhân viên sửa lại đơn hàng sau (x) ngày?', 
								label_FeatureConfiguration_NotAllowUpdateOrderHelp : 'Sau khi đơn hàng đã tạo được (x) ngày, nhân viên không thể thay đổi được đơn hàng này.', 
								label_FeatureConfiguration_QrCodeEnable : 'Kích hoạt thanh toán qua QRCode', 
								label_FeatureConfiguration_StockControlWhenSelling : 'Không cho phép bán hàng khi hết tồn kho', 
								label_FeatureConfiguration_StockControlWhenSellingHelp : 'Khi bán hàng, nếu hàng hóa đã hết tồn kho hệ thống sẽ chặn không cho bán.', 
								label_FeatureConfiguration_TurnOffReturnHistory : 'Kiểm soát lý do Hủy/Trả món?', 
								label_FeatureConfiguration_TurnOffReturnHistory_Help : 'Tất cả các thao tác Hủy món/Giảm món khách đã gọi đều phải nhập [Lý do hủy trả].', 
								label_Female : 'Nữ', 
								label_Filter_Account : 'Lọc theo tài khoản', 
								label_Filter_AllowOnlineSales : 'Cho phép bán Online', 
								label_Filter_Attributes : 'Lọc theo thuộc tính', 
								label_Filter_CashflowGroup : 'Lọc hạng mục', 
								label_Filter_Date : 'Lọc theo ngày', 
								label_Filter_DocumentStatus : 'Lọc theo trạng thái', 
								label_Filter_ExcessInventory : 'Vượt định mức tồn', 
								label_Filter_Group : 'Lọc theo nhóm', 
								label_Filter_InStock : 'Còn hàng', 
								label_Filter_Inventory : 'Lọc theo tồn kho', 
								label_Filter_LowerInventory : 'Dưới định mức tồn', 
								label_Filter_NotFilter : 'Không lọc', 
								label_Filter_Partner : 'Lọc đối tác', 
								label_Filter_PartnerType : 'Lọc theo loại Đối tác', 
								label_Filter_ProductType : 'Lọc theo loại hàng', 
								label_Filter_User : 'Lọc theo nhân viên', 
								label_Filter_Users : 'Lọc theo nhân viên', 
								label_Filterbycategory : 'Chọn theo nhóm', 
								label_FirstTime : '{0} đầu tiên  = {1}.', 
								label_FocusToQuantity : 'Di chuyển chuột vào ô nhập số lượng', 
								label_From : 'Từ ', 
								label_FromDate : 'Từ ngày', 
								label_Gender : 'Giới tính', 
								label_GlobalInventory : 'Tồn hệ thống', 
								label_GrandTotal : 'Tổng cộng', 
								label_Group_ChooseGroup : '-- Chọn nhóm--', 
								label_Group_Name : 'Tên nhóm', 
								label_Group_Parent : 'Nhóm cha', 
								label_Guest : 'Khách lẻ', 
								label_Guide : 'Hướng dẫn', 
								label_Help_CopyTotal : 'Gắn bằng tổng cộng', 
								label_Hour : 'Giờ', 
								label_IdentityCardNumber : 'Số thẻ định danh nhân viên', 
								label_Images : 'Hình ảnh', 
								label_Import_ExcludeOnHand : 'Không cập nhật Tồn kho & Giá vốn?', 
								label_Import_Help : 'Hướng dẫn điền giá trị các cột ?', 
								label_Import_Limit : 'Bạn không được import quá 1000 sản phẩm cho 1 lần thực hiện, vui lòng tách thành nhiều files.', 
								label_Import_Reset : 'Bạn có chắc chắn muốn reset danh sách, các dữ liệu bạn đã nhập vào danh sách bên dưới sẽ bị xóa bỏ?', 
								label_Import_SkipExists : 'Không cập nhật các mặt hàng đã có trong danh mục hàng hóa.', 
								label_Import_Validate : 'Dòng <strong>{0} </strong>, <strong>{1} </strong> không đúng định dạng dữ liệu.', 
								label_IncludeToFinancialReport : 'Hạch toán vào báo cáo kết quả kinh doanh?', 
								label_IncludeToFinancialReport_Helper : 'Những khoản thu/chi thuộc nhóm này sẽ được hạch toán vào báo cáo kết quả lãi lỗ hoạt động kinh doanh.', 
								label_IncomeStatement_01 : '01. Doanh thu bán hàng và cung cấp dịch vụ', 
								label_IncomeStatement_02 : '02. Các khoản giảm trừ doanh thu', 
								label_IncomeStatement_02_1 : '    - Hàng bán bị trả lại', 
								label_IncomeStatement_03 : '03. Doanh thu thuần về bán hàng và cung cấp dịch vụ (01-02)', 
								label_IncomeStatement_04 : '04. Giá vốn hàng bán', 
								label_IncomeStatement_05 : '05. Lợi nhuận gộp về bán hàng và cung cấp dịch vụ (03-04)', 
								label_IncomeStatement_06 : '06. Các khoản thu nhập', 
								label_IncomeStatement_07 : '07. Các khoản chi phí', 
								label_IncomeStatement_08 : '08. Tổng lợi nhuận kinh doanh (05+06-07)', 
								label_Index : 'Số thứ tự', 
								label_Indexing : 'Diễn giải', 
								label_Information : 'Thông tin', 
								label_Input : 'Nhập', 
								label_InventoryCount_ActualCount : 'SL Kiểm kê', 
								label_InventoryCount_AdjustmentDate : 'Ngày cân bằng kho', 
								label_InventoryCount_SetOutOfStock : 'Mặt hàng không nằm trong phiếu kiểm kê này sẽ được coi như hết hàng?', 
								label_Inwords : 'Số tiền bằng chữ', 
								label_IPAddressPrintServer : 'IP máy chủ in ấn ?', 
								label_IPAddressPrintServerHelp : 'Trong trường hợp bạn muốn in hóa đơn, báo bếp trực tiếp từ Ipad, Android bạn có thể thiết lập 365-Tray như 1 máy chủ in ấn để in trực tiếp từ các thiết bị đó. (Mặc định là : localhost)', 
								label_KitchenAPrinterName : 'Tên máy in tại Nhà bếp [A]', 
								label_KitchenAPrinterNameHelp : 'Tên máy in tại Nhà bếp [A]', 
								label_KitchenBPrinterName : 'Tên máy in tại Nhà bếp [B]', 
								label_KitchenBPrinterNameHelp : 'Tên máy in tại Nhà bếp [B]', 
								label_KitchenCPrinterName : 'Tên máy in tại Nhà bếp [C]', 
								label_KitchenCPrinterNameHelp : 'Tên máy in tại Nhà bếp [C]', 
								label_KitchenDPrinterName : 'Tên máy in tại Nhà bếp [D]', 
								label_KitchenDPrinterNameHelp : 'Tên máy in tại Nhà bếp [D]', 
								label_KitchenProcessed : 'Chế biến xong => chờ giao', 
								label_LadingCode : 'Mã vận đơn', 
								label_LargePrintLayout : 'Mẫu in lớn (A4, A5...)', 
								label_LargePrintLayout_Change : 'Đã chuyển đổi kích thước in sang {0}', 
								labeL_LastTransaction : 'Giao dịch cuối', 
								label_LeadOwner : 'Nhân viên quản lý', 
								label_ListOf : 'Danh sách {0}', 
								label_ListOfSerials : 'Danh sách Lô & Hạn sử dụng', 
								label_LoginToDashboard : 'Quản lý', 
								label_LookupLot : 'Tra cứu tất cả số lô & hạn dùng', 
								label_Male : 'Nam', 
								label_ManufactureStep1 : 'Khai báo nguyên liệu đầu vào', 
								label_ManufactureStep2 : 'Khai báo thành phẩm đầu ra', 
								label_Manufacturing_ManufacturingDate : 'Ngày sản xuất', 
								label_Manufacturing_ProducerPrice : 'Giá vốn SX', 
								label_Manufacturing_TabMaterials : 'Bảng kê nguyên liệu', 
								label_Mart14 : 'Tem cài kệ siêu thị', 
								label_MaterialReduction : 'Giảm trừ nguyên liệu', 
								label_Minute : 'Phút', 
								label_ModifiedBy : 'Người sửa', 
								label_ModifiedDate : 'Ngày sửa', 
								label_Month : 'Tháng', 
								label_MoreBarCode : 'Nhiều mã vạch', 
								label_MoreTime : '{0} khác = {1}.', 
								label_Name : 'Tên', 
								label_Nameofvalue : 'Tên cột Giá trị', 
								label_New : 'mới', 
								label_Notebook_Name : 'Tên sổ tay', 
								label_NotRequired : 'Không bắt buộc', 
								label_NumberOfGuests : 'Số lượng khách ngồi', 
								label_NumberOfOrders : 'Số đơn hàng', 
								label_OldDebt : 'Nợ cũ', 
								label_OnlinePrice : 'Giá bán Online', 
								label_OnlinePricingCalculator : 'Tính giá bán Online', 
								label_OnOrderSounds : 'Âm báo đơn đặt hàng ?', 
								label_OpeningBalance : 'Tồn đầu', 
								label_Or : 'hoặc', 
								label_Order_Code : 'Mã đơn hàng', 
								label_Order_Date : 'Ngày bán', 
								label_OrderingSounds : 'Âm báo gọi món', 
								label_OrderOffline : 'Đơn hàng Offline (Chờ đồng bộ)', 
								label_OrderOnline : 'Đặt hàng Online', 
								label_Orderstock_Date : 'Ngày nhập', 
								label_Other : 'Khác', 
								label_OtherAccounts : 'Tài khoản khác', 
								label_OtherInformation : 'Thông tin khác', 
								label_OtherTransaction_Date : 'Ngày thực hiện', 
								label_Output : 'Xuất', 
								label_PageSize : 'Khổ giấy', 
								label_Partner_Address : 'Địa chỉ đối tác', 
								label_Partner_Code : 'Mã đối tác', 
								label_Partner_Name : 'Tên đối tác', 
								label_Partner_Password : 'Mật khẩu đặt hàng', 
								label_Partner_PasswordHelp : 'Đối tác có thể đăng nhập vào hệ thống bằng Mã Đối Tác & Mật khẩu này để đặt hàng từ xa.', 
								label_Partner_Phone : 'Điện thoại đối tác', 
								label_Partner_TaxCode : 'MST', 
								label_Partner_TransactionLimit : 'Tổng giao dịch có thể xem tối đa trong 365 ngày', 
								label_Paybooks : 'Sổ nợ', 
								label_Payment : 'Thanh toán', 
								label_Permission_AccountingTransaction : 'Thu & Chi', 
								label_Permission_Branch : 'Quản lý chi nhánh', 
								label_Permission_DeliveryOrder : 'Giao hàng - COD', 
								label_Permission_GiftCard : 'Phiếu quà tặng', 
								label_Permission_InventoryCount : 'Kiểm kê', 
								label_Permission_Manufacturing : 'Sản xuất & Sơ chế', 
								label_Permission_Order : 'Bán hàng', 
								label_Permission_OtherTransaction : 'Giao dịch khác (hủy, tặng...)', 
								label_Permission_Partner : 'Quản lý đối tác', 
								label_Permission_PointConfig : 'Thiết lập điểm tính thưởng', 
								label_Permission_PosParameter : 'Thiết lập tính năng', 
								label_Permission_PriceBook : 'Thiết lập bảng giá', 
								label_Permission_PrintTemplate : 'Thiết lập mẫu in', 
								label_Permission_Product : 'Quản lý hàng hóa', 
								label_Permission_PurchaseOrder : 'Nhập hàng', 
								label_Permission_PurchaseOrderReturn : 'Trả hàng nhà cung cấp', 
								label_Permission_Report : 'Báo cáo', 
								label_Permission_Return : 'Trả hàng', 
								label_Permission_Room : 'Quản lý danh sách Phòng/Bàn', 
								label_Permission_Sm : 'Gửi tin Sms', 
								label_Permission_Transfer : 'Chuyển hàng nội bộ', 
								label_Permission_User : 'Quản lý nhân viên', 
								label_Permission_Voucher : 'Voucher', 
								label_Phone : 'Điện thoại', 
								label_PlanToChangeCost : 'Ngày áp giá mới', 
								label_Point : 'Điểm thưởng', 
								label_Point_Exchangepoints : 'Đổi điểm thưởng', 
								label_PointConfig_ExcludeOrderDiscount : 'Không quy đổi hóa đơn có Chiết khấu ?', 
								label_PointConfig_ExcludeProductDiscount : 'Không quy đổi các sản phẩm có Chiết khấu ?', 
								label_PointConfig_PointToValue : 'Sử dụng 1 điểm tương đương với  {0}', 
								label_PointConfig_ValueToPoint : 'Quy đổi mỗi {0} theo giá trị đơn hàng thành 1 điểm', 
								label_PoleDisplay : 'Pole Display hiển thị tiền sử dụng cổng (COM1,COM2,COM3...)', 
								label_Position : 'Vị trí ngồi', 
								label_PreOrderCode : '2 ký tự đầu tiên phân biệt số hóa đơn (Mặc định : HD...)', 
								label_PreProductCode : '2 ký tự đầu tiên phân biệt hàng hóa (Mặc định : HH...)', 
								label_Price : 'Giá bán', 
								label_PriceBook_LimitByBranchs : 'Giới hạn chi nhánh', 
								label_PriceBook_LimitByCustomerGroups : 'Giới hạn nhóm khách hàng', 
								label_PriceBook_LimitByUsers : 'Giới hạn nhân viên', 
								label_PriceBook_List : 'Danh sách bảng giá', 
								label_PriceBook_Name : 'Tên bảng giá', 
								label_PriceDiff : 'Chênh lệch', 
								label_PriceForAll : 'Đơn giá', 
								label_PriceForRoom : 'Giá Phòng - Bàn', 
								label_Pricing_FreeTrial : 'Dùng thử', 
								label_Pricing_Premium : 'Trả phí', 
								label_PricingCalculator : 'Tính giá', 
								label_Print80DPI : 'Độ phân giải máy in hóa đơn 80/58mm (DPI, mặc định: 203dpi)', 
								label_PrintA4DPI : 'Độ phân giải máy in A4/A5 (DPI, mặc định: 600dpi)', 
								label_PrintAfterPay : 'In sau khi bấm Thanh toán', 
								label_PrintKitchen80DPI : 'Độ phân giải máy in chế biến 80/58mm (DPI, mặc định: 203dpi)', 
								label_PrintTemplates_Display : 'Hiển thị', 
								label_PrintTemplates_Token : 'Mã nhúng', 
								label_PrintToBartenderA : 'In báo pha chế [A]', 
								label_PrintToBartenderB : 'In báo pha chế [B]', 
								label_PrintToBartenderC : 'In báo pha chế [C]', 
								label_PrintToBartenderD : 'In báo pha chế [D]', 
								label_PrintToKitchenA : 'In báo bếp  [A]', 
								label_PrintToKitchenB : 'In báo bếp [B]', 
								label_PrintToKitchenC : 'In báo bếp  [C]', 
								label_PrintToKitchenD : 'In báo bếp  [D]', 
								label_PrintTransfer : 'Chuyển hàng', 
								label_Product_Active : 'Ngừng kinh doanh mặt hàng này?', 
								label_Product_AttributeName : 'Tên thuộc tính (Mầu sắc, kích thước)', 
								label_Product_Attributes : 'Thuộc tính', 
								label_Product_BaseUnit : 'ĐVT', 
								label_Product_Code : 'Mã hàng hóa', 
								label_Product_Coefficient : 'Hệ số phụ (Mặc định =1)', 
								label_Product_CoefficientHelp : 'Hệ số này sẽ được sử dụng trong bảng tính kích thước, số lượng khi bán hàng, ví dụ trong lĩnh vực sắt thép khi bán 1m tôn thì số lượng tính tiền = 1mx1.08 (1.08 chính là hệ số phụ)', 
								label_Product_Components : 'Thành phần', 
								label_Product_ConversionValue : 'Giá trị quy đổi', 
								label_Product_Cost : 'Giá vốn', 
								label_Product_DontSellingOnline : 'Không cho phép bán Online', 
								label_Product_FirstBlock : 'Số block giờ đầu tiên?', 
								label_Product_Hidden : 'Không cho phép bán?', 
								label_Product_HiddenHelp : 'Sản phẩm này sẽ không xuất hiện trên màn hình bán hàng, nhân viên sẽ không được phép bán ra.', 
								label_Product_History : 'Thẻ kho', 
								label_Product_InStock : 'Còn hàng', 
								label_Product_IsPercentage : 'Giá bán tính theo % giá trị Đơn hàng', 
								label_Product_IsPercentage_Helper : 'Khi đưa mặt hàng này vào đơn hàng, hệ thống sẽ tính theo % giá trị đơn hàng', 
								label_Product_IsPriceForBlock : 'Giá bán được thiết lập cho từng block?', 
								label_Product_IsPriceForBlock_Helper : 'Mặc định giá bán sẽ được thiết lập cho mỗi giờ sử dụng, sử dụng thiết lập này trong trường hợp giá bán của dịch vụ được tính cho mỗi block.', 
								label_Product_LargeUnit : 'ĐVT Lớn', 
								label_Product_LargeUnitCode : 'Mã ĐVT Lớn', 
								label_Product_Lastinventory : 'Tồn cuối', 
								label_Product_MaxQuantity : 'Định mức tồn lớn nhất', 
								label_Product_MinQuantity : 'Định mức tồn nhỏ nhất', 
								label_Product_Name : 'Tên hàng hóa', 
								label_Product_NormsInventory : 'Định mức tồn kho', 
								label_Product_Note : 'Ghi chú trên hàng hóa', 
								label_Product_OnHand : 'Tồn kho', 
								label_Product_Online_Helper : 'Hàng hóa này sẽ xuất hiện trên website bán hàng trực tuyến', 
								label_Product_OnlinePriceLargeUnit : 'Giá Online của ĐVT Lớn', 
								label_Product_OnOrder : 'Đặt hàng', 
								label_Product_OrderQuickNotes : 'Ghi chú nhanh khi bán hàng (Ghi chú 1, Ghi chú 2,...)', 
								label_Product_OtherSettings : 'Các thông số khác', 
								label_Product_OutStock : 'Hết hàng', 
								label_Product_Popular : 'Hàng bán chạy', 
								label_Product_PriceAppliesTo : 'Giá được áp dụng đến', 
								label_Product_PriceAppliesToEnd : 'ngày hôm sau thì bắt đầu tính tiền sử dụng', 
								label_Product_PriceFor : 'Giá cho {0} block giờ đầu tiên.', 
								label_Product_PriceLargeUnit : 'Giá bán ĐVT Lớn', 
								label_Product_Printer : 'Tên máy in?', 
								label_Product_RecentPurchasePrice : 'Giá nhập cuối', 
								label_Product_SellingOnline : 'Cho phép bán Online', 
								label_Product_Serial : 'Quản lý theo số Lô & Hạn sử dụng ?', 
								label_Product_Serial_Helper : 'Tồn kho của mặt hàng sẽ được tính đích danh từng số Lô & Hạn sử dụng.', 
								label_Product_SerialNumbers : 'Số Lô', 
								label_Product_SetHotel : 'Thiết lập cho Nhà nghỉ - Khách sạn', 
								label_Product_SpecialTime : 'Thiết lập khung giờ đặc biệt', 
								label_Product_Specifications : 'Quy cách', 
								label_Product_Split : 'Không tách món thành nhiều dòng?', 
								label_Product_SplitForSalesOrder : 'Tách thành nhiều dòng khi bán hàng', 
								label_Product_SplitForSalesOrder_Helper : 'Khi thêm mặt hàng này vào đơn hàng sẽ không cộng dồn số lượng mà sẽ tách thành nhiều dòng.', 
								label_Product_TimeNote : 'Vui lòng không thiết lập 2 thông số trên (bỏ trống) nếu nghiệp vụ tính giờ của cửa hàng không có ngoại lệ.', 
								label_Product_Timer : 'Số lượng tính theo thời gian sử dụng?', 
								label_Product_TimerHelp : 'Tùy chọn này sử dụng cho các mặt hàng tính thời gian sử dụng như : Giờ thuê phòng, Giờ hát karaoke... Khi được đưa vào màn hình bán hàng hệ thống sẽ tự tính tiền theo thời gian sử dụng.', 
								label_Product_Type : 'Loại hàng', 
								label_Product_Unit : 'ĐVT', 
								label_Profit : 'Lợi nhuận', 
								label_Promotion : 'Khuyến mãi', 
								label_Province : 'Tỉnh thành', 
								label_Provisionalorder : 'Tạm tính', 
								label_PurchaseOrderConfirm : 'Nhận hàng', 
								label_Purchaseplan : 'Dự trù nhu cầu nhập hàng', 
								label_PurchasePrice : 'Giá nhập', 
								label_Qty : 'SL', 
								label_Quantity : 'Số lượng', 
								label_QuickFilter : '--- Lọc nhanh ---', 
								label_QuickSearch : 'Tìm kiếm nhanh', 
								label_Rates : 'Tỷ suất', 
								label_ReceiptPrinterName : 'Tên máy in hóa đơn (Xét khi muốn in không cần xem trước hoặc in từ Tablets)', 
								label_RecentActivities : 'Hoạt động gần đây', 
								label_RemoveNotAchieved : 'Tự động xóa các đối tác không đạt chỉ tiêu ra khỏi nhóm?', 
								label_Report_Time : 'Thời gian', 
								label_Report_Total : 'Tổng giá trị', 
								label_Report_TotalAfterDiscount : 'Tổng giá trị (Sau chiết khấu)', 
								label_Reported : 'Đã báo', 
								label_Restaurant_ChangeTable : 'Chuyển bàn', 
								label_Restaurant_PrintRefund : 'Phiếu xác nhận trả hàng', 
								label_Restaurant_PrintToCooker : 'In báo chế biến', 
								label_Retailer_Address : 'Địa chỉ cửa hàng', 
								label_Retailer_ExpiryDate : 'Ngày hết hạn', 
								label_Retailer_Name : 'Tên của hàng', 
								label_Retailer_Phone : 'Điện thoại của hàng', 
								label_Retailer_TelephoneOfShopkeepers : 'Điện thoại chủ cửa hàng', 
								label_Return_Code : 'Mã trả hàng', 
								label_Return_Desc1 : 'Khách yêu cầu', 
								label_Return_Desc2 : 'Thao tác sai', 
								label_Return_ReturnDate : 'Ngày trả', 
								label_Return_Total : 'Tổng tiền trả khách', 
								label_Return_Totalexpenditure : 'Tổng chi thanh toán', 
								label_ReturnByOrder : 'Trả theo đơn hàng', 
								label_ReturnMoney : 'Trả lại tiền', 
								label_Room : 'Phòng / Bàn', 
								label_Room_Menu : 'Thực đơn', 
								label_Room_Name : 'Tên Phòng / Bàn', 
								label_Room_Position : 'Thứ tự hiển thị', 
								label_Room_Printer : 'Tên máy in tạm tính (In tạm tính trực tiếp tại Phòng/Bàn)', 
								label_Room_Select : '--- Chọn ---', 
								label_RoomClickHelper : '<strong>Bấm 2 lần vào bàn</strong> để mở nhanh thực đơn!', 
								label_Scheduler : 'Lịch chăm sóc khách', 
								label_Search : 'Tìm kiếm', 
								label_SearchCustomer : 'Tìm khách hàng', 
								label_SearchMenu : 'Tìm thực đơn', 
								label_SearchPartner : 'Tìm đối tác', 
								label_SearchPartner_NotExisting : 'Đối tác này không tồn tại trong cửa hàng.', 
								label_SearchProduct : 'Tìm kiếm mặt hàng', 
								label_SearchProduct_NotExisting : 'Sản phẩm không tồn tại', 
								label_SearchSerial_NotExisting : 'Số Serial  {0} không tồn tại hoặc đã được bán.', 
								label_SearchSerials : 'Tìm số serial', 
								label_SearchSupplier : 'Tìm nhà cung cấp', 
								label_SelectFile : 'Chọn file', 
								label_SellLayout : 'Giao diện hỗ trợ màn hình cảm ứng?', 
								label_SellLayoutRightToLeft : 'Giao diện đảo khung Trái <=> Phải', 
								label_SendRequest : 'Gửi thực đơn', 
								label_SessionTimeOut : 'Phiên làm việc đã hết hạn, vui lòng đăng nhập lại.', 
								label_ShippingAddress : 'Địa chỉ giao hàng', 
								label_ShippingCost : 'Phí giao hàng', 
								label_ShippingPartner_Code : 'Mã ĐT giao hàng', 
								label_SmallPrintLayout : 'Mẫu in nhỏ (58mm,80mm)', 
								label_SmartSearch : 'Tìm kiếm thông minh', 
								label_Sms_Birthday : 'Sinh nhật', 
								label_Sms_BrandName : 'Tin nhắn thương hiệu', 
								label_Sms_BrandNameHelp : 'Là tin nhắn hiển thị tên công ty ở mục người gửi', 
								label_Sms_Content : 'Nội dung gửi', 
								label_Sms_Exception : 'Tin nhắn không được vượt quá 160 ký tự.', 
								label_Sms_Length : 'Số ký tự', 
								label_Sms_MaximumSms : 'Bạn không thể gửi quá {0} tin nhắn SMS, vui lòng liên hệ nhân viên kinh doanh để nạp tiền vào tài khoản.', 
								label_Sms_Messages : 'Tổng số tin nhắn', 
								label_Sms_PerMessage : 'Ký tự 1 bản tin', 
								label_Sms_PriceList : 'Giá dịch vụ SMS', 
								label_Sms_Random : 'Tin nhắn đầu số ngẫu nhiên', 
								label_Sms_RandomHelp : 'Là tin nhắn hiển thị số điện thoại dạng 09xxxxx ở mục người gửi', 
								label_Sms_Receiver : 'Người nhận', 
								label_Sms_Remaining : 'Còn lại', 
								label_Sms_Sent : 'Đã gửi', 
								label_Sms_TotalPartner : 'Tổng khách nhận', 
								label_Sms_Type : 'Loại SMS', 
								label_SoldBy : 'Người bán', 
								label_SoldBy_Help : 'Chỉ định nhân viên bán hàng để tính hoa hồng', 
								label_Source : 'Nguồn sao chép', 
								label_Source_Invalid : 'Không thể sao chép quyền hạn từ nhân viên này, vui lòng sao chép từ nhân viên khác.', 
								label_SpecialPrice : 'Giá khung giờ đặc biệt', 
								label_Split : 'Tách bàn', 
								label_SpreadsheetsQuantity : 'Bảng tính số lượng theo kích thước, trọng lượng', 
								label_StartTimer : 'Bắt đầu tính giờ', 
								label_Status : 'Trạng thái', 
								label_StopTimers : 'Ngưng tính giờ ?', 
								label_SubTotal : 'Tổng thành tiền', 
								label_Supplier_Code : 'Mã nhà cung cấp', 
								label_SwichBalanceScale : 'Chuyển đổi cơ chế tìm : Cân điện tử <=> Tìm kiếm thông minh <=> Tìm kiếm nhanh', 
								label_Sync : 'Đồng bộ đơn hàng', 
								label_Sync_Error : 'Không thể đồng bộ', 
								label_Sync_Success : 'Đồng bộ đơn hàng {0} thành công.', 
								label_Task : 'Công việc', 
								label_Task_Description : 'Nội dung công việc', 
								label_Task_DueDate : 'Thời gian thực hiện', 
								label_Task_Subject : 'Tên công việc', 
								label_To : 'Đến', 
								label_ToDate : 'Đến ngày', 
								label_Today_Expiry : 'Hết hạn sử dụng', 
								label_Today_Online : 'Đơn hàng Online', 
								label_Today_Return : 'Trả hàng', 
								label_Today_Return_Coffee : 'Hủy/trả đồ', 
								label_Today_Return_Value : 'Giá trị trả lại', 
								label_Today_Revenue : 'Doanh thu', 
								label_Total : 'Tổng cộng', 
								label_TotalCommission : 'Tổng hoa hồng', 
								label_TotalDebt : 'Tổng nợ', 
								label_TotalDiff : 'Tổng chênh lệch', 
								label_TotalGuests : 'Tổng khách', 
								label_TotalLineItem : 'Thành tiền', 
								label_TotalLineItemBeforeDiscount : 'Thành tiền hàng hóa trước CK', 
								label_TotalPayment : 'Tổng thanh toán', 
								label_TotalProfit : 'Tổng lợi nhuận', 
								label_TotalQuantity : 'Tổng số lượng', 
								label_TotalRevenue : 'Tổng doanh thu', 
								label_TotalSupplierRefunds : 'Đối tác hoàn tiền', 
								label_Transaction_History : 'Lịch sử giao dịch', 
								label_TransactionDate : 'Ngày giao dịch', 
								label_Transactionvalue : 'Tổng giao dịch', 
								label_TransDate : 'Ngày giao dịch', 
								label_Transfer_BranchValid : 'Vui lòng kiểm tra lại Chi nhánh nhận', 
								label_Transfer_ButtonReceive : 'Nhận', 
								label_Transfer_ButtonSent : 'Gửi', 
								label_Transfer_Receive : 'Chi nhánh nhận', 
								label_Transfer_Sender : 'Chi nhánh gửi', 
								label_TrueFalseHelper : '0 = Không áp dụng, 1 = Áp dụng', 
								label_Undefined : 'Không xác định', 
								label_UpdateCost : 'Cập nhật giá vốn', 
								label_User_BacktoLogin : 'Quay lại Đăng nhập', 
								label_User_ConfirmPassword : 'Nhập lại mật khẩu', 
								label_User_DOB : 'Ngày sinh', 
								label_User_EmailAddress : 'Địa chỉ Email', 
								label_User_Forgotyourpassword : 'Quên mật khẩu?', 
								label_User_ForgotyourpasswordGuide : 'Nhập địa chỉ email của bạn để lấy lại mật khẩu đăng nhập.', 
								label_User_ForgotyourpasswordNew : 'Nhập mật khẩu mới', 
								label_User_IsAdmin : 'Admin', 
								label_User_Loginto : 'Đăng nhập vào', 
								label_User_Newinpos : 'PHẦN MỀM BÁN HÀNG 365', 
								label_User_NewPassword : 'Mật khẩu mới', 
								label_User_Password : 'Mật khẩu', 
								label_User_Rememberme : 'Ghi nhớ đăng nhập?', 
								label_User_ResetPassword : 'Reset mật khẩu', 
								label_User_SetPermission : 'Xét quyền hạn', 
								label_User_Signin : 'Đăng nhập phần mềm', 
								label_User_Signout : 'Đăng xuất', 
								label_User_Username : 'Tên đăng nhập', 
								label_User_UsernameOrEmail : 'Tên đăng nhập hoặc Email', 
								label_Using : 'Bàn sử dụng', 
								label_Value : 'Giá trị', 
								label_ViewByRoom : 'Xem theo Phòng/Bàn', 
								label_ViewCost : 'Xem giá vốn', 
								label_Voucher_Code : 'Mã giảm giá', 
								label_WarrantyServiceCare : 'Bảo hành & Chăm sóc dịch vụ', 
								label_Weight : 'Trọng lượng', 
								label_Year : 'Năm', 
								manufacturing : 'Lệnh Sản xuất & Sơ chế', 
								menu_BranchManagement : 'Quản lý chi nhánh', 
								menu_Cashflow : 'Thu & Chi', 
								menu_ChangeBranch : 'Đổi chi nhánh', 
								menu_ChangeBranchHelper : 'Chọn chi nhánh', 
								menu_ClearSampleData : 'Xóa dữ liệu mẫu', 
								menu_ClearSampleData_Confirm : 'Bạn có chắc chắn muốn xóa toàn bộ dữ liệu kinh doanh trong cửa hàng?', 
								menu_CommissionReport : 'Báo cáo hoa hồng', 
								menu_ConfirmationAndAutoPrint : 'Xác nhận & In báo chế biến tự động', 
								menu_CopyKitchen : 'In 2 liên cho phiếu báo chế biến', 
								menu_CopyReceipt : 'In 2 liên cho hóa đơn', 
								menu_Customers : 'Khách hàng', 
								menu_DailyReport : 'Báo cáo ngày', 
								menu_Dashboard : 'Tổng quan', 
								menu_Expirywarning : 'Cảnh báo hàng hết hạn sử dụng', 
								menu_Extra : 'Thiết lập Extra/Topping', 
								menu_FeatureConfiguration : 'Thiết lập tính năng', 
								menu_FinancialReport : 'Kết quả kinh doanh', 
								menu_History : 'Lịch sử', 
								menu_InternalStockTransfer : 'Chuyển hàng nội bộ', 
								menu_InventoryCount : 'Kiểm kê', 
								menu_InventoryReport : 'Báo cáo kho hàng', 
								menu_KeyboardShortcuts : 'Bảng phím tắt', 
								menu_Kitchen : 'Màn hình khu vực Bar-Bếp', 
								menu_LiabilitiesReport : 'Báo cáo công nợ', 
								menu_ListOfPartners : 'Danh sách đối tác', 
								menu_ListOfProduct : 'Danh sách hàng hóa', 
								menu_Logout : 'Đăng xuất', 
								menu_Manufacturing : 'Quản lý Sản xuất & Sơ chế', 
								menu_MaterialUsage : 'Hao phí nguyên vật liệu', 
								menu_MiniCRMReport : 'Báo cáo Chăm sóc khách hàng', 
								menu_MultiBranchReport : 'Báo cáo đa chi nhánh', 
								menu_NotebookSales : 'Sổ tay bán hàng nhanh', 
								menu_Orders : 'Danh sách đơn hàng', 
								menu_OrderStock : 'Nhập hàng', 
								menu_OtherTransaction : 'Giao dịch khác (hủy, tặng...)', 
								menu_Partners : 'Đối tác', 
								menu_PriceBook : 'Thiết lập bảng giá', 
								menu_PrintBarcodeLabels : 'In mã vạch', 
								menu_PrintTemplates : 'Thiết lập mẫu in', 
								menu_Processingorders : 'Xử lý đơn hàng', 
								menu_Products : 'Hàng hóa', 
								menu_Profile : 'Thông tin tài khoản', 
								menu_QrCode : 'Thiết lập thanh toán QRCode', 
								menu_Reporting : 'Báo cáo', 
								menu_Restaurant : 'Nhà hàng', 
								menu_Returns : 'Trả hàng', 
								menu_ReturnsReport : 'Báo cáo trả hàng', 
								menu_ReturnToSupplier : 'Trả hàng nhà cung cấp', 
								menu_SalesAnalysis : 'Phân tích bán hàng', 
								menu_SalesReport : 'Báo cáo bán hàng', 
								menu_Screensforcashiers : 'Màn hình thu ngân', 
								menu_Screensforwaiter : 'Màn hình nhân viên Order', 
								menu_Sell : 'Bán hàng', 
								menu_Served : 'Nhân viên Order', 
								menu_Settings : 'Thiết lập', 
								menu_ShippingPartners : 'Đối tác giao hàng', 
								menu_SMSMarketing : 'Gửi tin SMS', 
								menu_splitPrinting : 'Cắt từng món khi in báo chế biến', 
								menu_StockorderReport : 'Báo cáo nhập hàng', 
								menu_StoreSettings : 'Thông tin cửa hàng', 
								menu_Suppliers : 'Nhà cung cấp', 
								menu_Transactions : 'Giao dịch', 
								menu_UserManagement : 'Quản lý nhân viên', 
								menu_UserProfile : 'Thông tin tài khoản', 
								message_AccessDenied : 'Bạn không có quyền truy cập tính năng này, vui lòng liên hệ chủ cửa hàng.', 
								message_ActivationSuccessful : 'Bạn đã kích hoạt tài khoản thành công, thời hạn sử dụng mới là : {0}', 
								message_Activities_InventoryCount : 'đã tạo phiếu kiểm kê với mã', 
								message_Activities_Manufacturing : 'đã tạo lệnh sản xuất với mã', 
								message_Activities_Order : 'đã bán hàng với giá trị', 
								message_Activities_Orderstock : 'đã nhập hàng với giá trị', 
								message_Activities_ProductDamage : 'created Other transaction  items in document', 
								message_Activities_Receive : 'đã nhận hàng từ phiếu chuyển', 
								message_Activities_Return : 'đã nhận trả hàng với giá trị', 
								message_Activities_ReturnToSupplier : 'đã trả lại hàng cho nhà cung cấp với giá trị', 
								message_Activities_StockTransfer : 'tạo phiếu chuyển hàng với mã', 
								message_BarCodeMax : 'Bạn chỉ có thể in tối đã 1000 mã vạch', 
								message_Branch_CanNotDelete : 'Hệ thống phải tồn tại ít nhất 1 chi nhánh', 
								message_Cashflow_UnableChangePartner : 'Không thể thay đổi đối tác của phiếu thanh toán đã được tạo, vui lòng hủy phiếu & tạo lại.', 
								message_Category_Level : 'Hệ thống chỉ cho phép tối đa 2 cấp của nhóm hàng', 
								message_ChangeBranch : 'Bạn đã chuyển sang chi nhánh : {0}', 
								message_ClearCache_OpenLink : 'Xem hướng dẫn xóa Cache', 
								message_Components_WaringComposite : '<strong>Lưu ý !</strong>Thành phần của hàng Combo sẽ được trừ tự động khi bán hàng.', 
								message_Components_WaringShowProductInBranch : 'Lưu ý !</strong> Để tách biệt hàng hóa giữa các chi nhánh vui lòng vào <a href="/#/FeatureConfiguration">Thiết lập tính năng</a> để mở tính năng.', 
								message_Components_WaringStandard : '<strong>Lưu ý quan trọng !</strong> Thành phần của mặt hàng thường sẽ được trừ trong quá trình Sản xuất.', 
								message_CustomerOrdering_Help : 'Màn hình này sử dụng cho nhân viên đi ghi thực đơn.', 
								message_CustomerOrdering_Return : 'Mặt hàng trả lại không tồn tại hoặc có số lượng lớn hơn số lượng đã gọi.', 
								message_DataInvalid : '{0} không hợp lệ.', 
								message_DataNotExists : '{0} không tồn tại.', 
								message_DeleteReferenceDataUnsuccessfully : 'Không thể xóa dữ liệu đang được sử dụng.', 
								message_DeleteSuccess : 'Xóa dữ liệu thành công', 
								message_DontSetupIdentityCardNumber : 'Bạn chưa thiết lập mã mở khóa cho nhân viên, vui lòng thiết lập trong tính năng quản lý nhân viên.', 
								message_DuplicateData : '{0} đã tồn tại trong hệ thống.', 
								message_EmptyProduct : 'Cửa hàng của bạn chưa có mặt hàng nào để kinh doanh, vui lòng quay lại màn hình quản lý để tạo hàng hóa.', 
								message_EmptyProductRoom : 'Cửa hàng của bạn chưa có mặt hàng hoặc phòng/bàn nào để kinh doanh, vui lòng quay lại màn hình quản lý để khởi tạo dữ liệu bán hàng. (Hoặc xóa Lịch sử trình duyệt nếu đã có dữ liệu nhưng không xuất hiện)', 
								message_EmptyProductTitle : 'Thông báo', 
								message_ErrorShowOnBranch : 'Vui lòng chuyển sang chi nhánh tương ứng với chi nhánh được phép hiển thị để thêm mới hoặc chỉnh sửa hàng hóa.', 
								message_ErrorSummary : 'Có lỗi trong quá trình cập nhật dữ liệu.', 
								message_Featuresupgraded : 'Thông báo cập nhật tính năng mới', 
								message_Featuresupgraded_Content : 'Hệ thống đã nâng cấp tính năng mới, quý khách cần xóa bộ nhớ tạm của trình duyệt để nâng cấp phần mềm, vui lòng thực hiện theo hướng dẫn dưới đây để xóa cache.', 
								message_FileSizeLimit : 'Dung lượng file không được vượt quá {0}.', 
								message_Firewall : 'Chủ cửa hàng không cho phép truy cập từ địa chỉ IP này', 
								message_Group_InvalidParentValues : 'Nhóm cha không hợp lệ', 
								message_HasExpired : 'Tài khoản đã hết hạn vào ngày {0}.<br>Vui lòng liên hệ {1} để được hỗ trợ, hoặc <a href="/Signin/Active"><strong>bấm vào đây</strong></a> để  kích hoạt bản quyền.', 
								message_HasServed : '{0} đã gửi yêu cầu thực đơn mới.', 
								message_InventoryCount_DirectUpdate : 'Thay đổi trực tiếp {0} trong Danh mục hàng hóa', 
								message_InventoryTracking_MaterialsDesc : 'Nguyên liệu sử dụng sản xuất', 
								message_IsOnline : '{0} đang tham gia xử lý bán hàng.', 
								message_LimitData : 'Bạn chỉ được phép tạo tối đa  {0} {1}.', 
								message_LimitedUsage : '{0} bị giới hạn số lượng bản ghi cho các tính năng:<br/>- {1} Hàng hóa <br/>- {2} Chi nhánh <br/>- {3} Đơn hàng<br/>Vui lòng liên hệ <strong>{4}</strong>  để nâng cấp tài khoản của bạn.', 
								message_Modal_ConfirmCompleted : 'Hệ thống sẽ cập nhật tồn kho ngay khi hoàn thành chứng từ. Bạn có chắc chắn muốn hoàn thành chứng từ này?', 
								message_Modal_ConfirmHeader : 'Xác nhận', 
								message_Modal_DeleteHeader : 'Xác nhận xóa dữ liệu ?', 
								message_Modal_Message : 'Bạn có chắc chắn muốn xóa <strong>{0}</strong> ?', 
								message_Modal_ReplaceOrder : 'Đơn hàng này đã được cập nhật phiên bản mới hơn từ thiết bị khác .', 
								message_Modal_SMSCompleted : 'Hệ thống sẽ trừ tài khoản SMS của bạn sau khi gửi thành công, bạn có chắc chắn muốn gửi tin nhắn này?', 
								message_NoProductInCategory : 'Không có mặt hàng nào trong nhóm này.', 
								message_NoRoomInCategory : 'Không có Phòng/Bàn nào trong nhóm này.', 
								message_Notebook_Help : 'Tạo ra các gói hàng hóa, khi bán hàng chỉ cần chọn gói này thì các mặt hàng trong gói sẽ tự đưa vào đơn hàng. Ví dụ : Gói bảo dưỡng, Sổ tay dùng thuốc, Gói quà...', 
								message_OfflineSave : 'Không có kết nối Internet, đơn hàng được lưu vào bộ nhớ tạm trên máy của bạn.', 
								message_OrderIsBeingProcessed : 'Đơn hàng đã có trong danh sách xử lý.', 
								message_PaymentFor : 'Phiếu thanh toán cho chứng từ {0}', 
								message_PreventTimestampUpdate : 'Không thể cập nhật chứng từ nếu vượt quá {0} ngày so với thời điểm hiện tại.', 
								message_PreventUpdateDocument : 'Chứng từ này vừa được cập nhật, bạn chỉ có thể tiếp tục cập nhật sau {0} phút.', 
								message_Product_ValidateComposite : 'Hàng combo bắt buộc phải có thành phần, vui lòng nhập thành phần.', 
								message_Product_ValidateUnit : 'Bạn chưa nhập ĐVT cơ bản.', 
								message_QRCodeConfig : 'Thanh toán QR Code chưa có hiệu lực, vui lòng mở Thiết lập tính năng để cấu hình sử dụng.', 
								message_QRCodeOnline : 'Thanh toán QR Code chỉ có hiệu lực khi có kết nối Internet, vui lòng sử dụng phương thức thanh toán khác khi offline.', 
								message_Retailer_Renew : 'Tài khoản dùng thử của bạn sẽ hết hạn sau {0} ngày. Vui lòng liên hệ tổng đài để ký hợp đồng sử dụng dịch vụ.', 
								message_SaveSuccess : 'Cập nhật dữ liệu thành công.', 
								message_SetupForFirstTime : 'Thiết lập cho lần đầu sử dụng phần mềm.', 
								message_SetupForFirstTime_ChooseField : 'Chọn lĩnh vực kinh doanh của bạn, phần mềm sẽ tự động cấu hình các tính năng phù hợp với lĩnh vực?', 
								message_SetupForFirstTime_GenerateSampleData : 'Bạn có muốn cài đặt dữ liệu mẫu để tìm hiểu tính năng?', 
								message_SynchronizingSuccess : 'Đã tiến hành đồng bộ dữ liệu bán hàng.', 
								message_Tray : 'Bạn chưa cài đặt công cụ 365-Tray để hỗ trợ in báo chế biến, liên hệ 1900.636.680 để được hướng dẫn chi tiết.', 
								message_UnauthorizedObjectAccess : 'No access to {0} in {1} with user {2}.', 
								message_UnauthorizedPropertyAccess : 'Bạn  không được phép thực hiện thao tác này.', 
								message_UnauthorizedRecordAccess : 'Nhân viên {0} không được truy cập tính năng này.', 
								message_Upgrade : 'Hệ thống đã được cập nhật phiên bản mới, vui lòng bấm tổ hợp phím Ctrl+F5 để nâng cấp.', 
								message_User_AccountLocked : 'Tài khoản của bạn đã bị khóa', 
								message_User_AdminAccess : 'Đây là tài khoản quản trị, bạn không cần phân quyền cho tài khoản này.', 
								message_User_CheckEmail : 'Mật khẩu mới đã được gửi về địa chỉ email bạn cung cấp, vui lòng check email để hoàn thiện reset mật khẩu.', 
								message_User_EmailRequired : 'Bạn phải nhập địa chỉ email.', 
								message_User_EmptyPassword : 'Mật khẩu đăng nhập không được bỏ trống.', 
								message_User_ForgotPasswordEmailNotExist : 'Địa chỉ email bạn cung cấp không hợp lệ...', 
								message_User_InvalidSessionKey : 'Invalid session key or session key has expired, please try again.', 
								message_User_NoBranchSelect : 'Bạn chưa chọn chi nhánh, vui lòng chọn lại.', 
								message_User_ResetPasswordSuccessfully : 'Mật khẩu mới được tạo thành công, bạn có thể sử dụng để đăng nhập vào cửa hàng.', 
								message_User_WaringGrantAccess : '<strong>Chú ý !</strong> Sau khi tạo nhân viên bạn phải phân quyền truy cập tính năng.', 
								message_User_WrongLogon : 'Tên đăng nhập hoặc mật khẩu không hợp lệ.', 
								message_User_WrongNewPassword : 'Mật khẩu mới không hợp lệ.', 
								message_ValidateCartEmpty : 'Chưa có mặt hàng nào trong danh sách.', 
								message_ValidateCashflow : 'Hạng mục thu/chi & Số tiền bắt buộc phải nhập, vui lòng kiểm tra lại thông tin.', 
								message_ValidateCdKey : 'Thông tin bản quyền hoạt không hợp lệ hoặc mã kích hoạt này đã được sử dụng, vui lòng kiểm tra lại các thông tin.', 
								message_ValidateCustomer : 'Bạn chưa chọn khách hàng.', 
								message_ValidateOnHand : '<strong>{0}</strong> không đủ tồn kho, vui lòng nhập thêm hàng trước khi bán.', 
								message_ValidatePrinter : 'Bạn chưa cấu hình tên máy in bộ phận chế biến, vui lòng vào Thiết lập tính năng để nhập tên máy in.', 
								message_ValidateRoomEmpty : 'Bạn chưa chọn Phòng/Bàn, vui lòng chọn lại.', 
								message_ValidateRoomHasTimer : 'Phòng/Bàn này chưa cấu hình mặt hàng tính giờ, vui lòng thiết lập trong danh mục phòng bàn.', 
								message_ValidateSummary : 'Vui lòng nhập đủ các thông tin bắt buộc trước khi lưu.', 
								message_VerificationCodeValid : 'Mã xác nhận không hợp lệ.', 
								million : 'tr', 
								notebook : 'Sổ tay', 
								order : 'Đơn hàng', 
								orderstock : 'Phiếu nhập hàng', 
								otherTransaction : 'Giao dịch khác', 
								paymentVoucher : 'Phiếu chi', 
								pricebook : 'Bảng giá', 
								product : 'Hàng hóa', 
								receiptVoucher : 'Phiếu thu', 
								report_BestCustomers : 'Khách hàng doanh số cao', 
								report_BranchProfit : 'Lợi nhuận theo chi nhánh', 
								report_BuyingHabits : 'Phân tích thói quen mua hàng', 
								report_CashBook : 'Sổ quỹ Thu & Chi', 
								report_COD : 'Chi phí giao hàng', 
								report_Commissionforstaffs : 'Hoa hồng nhân viên', 
								report_CustomerProfit : 'Lợi nhuận theo khách hàng', 
								report_CustomerReturnProducts : 'Hàng khách trả lại', 
								report_DebtByOrder : 'Bảng kê nợ theo đơn hàng', 
								report_Difference : 'Chênh lệch', 
								report_DirectMaterialUsage : 'Hao phí nguyên liệu trực tiếp (Combo)', 
								report_EndOfDay : 'Tổng kết cuối ngày', 
								report_GrossingProducts : 'Hàng có doanh thu cao', 
								report_HighProfitsReport : 'Hàng lợi nhuận cao', 
								report_IncomeStatement : 'Kết quả kinh doanh', 
								report_Lot : 'Bảng kê Lô & Hạn sử dụng', 
								report_MaterialUsage : 'Nguyên liệu sản xuất', 
								report_MiniCRMBuyers : 'Phân tích khách mua trong kỳ', 
								report_MiniCRMInfo : 'Thông tin khách hàng', 
								report_MiniCRMReturn : 'Không quay lại mua hàng', 
								report_MultiBranchInventoryDifference : 'Chênh lệch số lượng kiểm kê', 
								report_MultiBranchManufacturing : 'Tổng hợp thành phẩm Sản xuất/Chế biến', 
								report_MultiBranchMaterial : 'Tổng hợp sử dụng Nguyên liệu', 
								report_MultiBranchMinMax : 'Kiểm soát định mức tồn kho', 
								report_MultiBranchPriceDifference : 'Kiểm soát chênh lệch giá bán', 
								report_MultiBranchProductPurchase : 'Tổng hợp hàng nhập kho', 
								report_MultiBranchProductReturn : 'Tổng hợp hàng trả lại', 
								report_MultiBranchProductSold : 'Tổng hợp hàng bán ra', 
								report_MultiBranchReturnToSupplier : 'Tổng hợp hàng trả Nhà Cung Cấp', 
								report_MultiBranchSale : 'Phân tích tần suất bán hàng', 
								report_MultiBranchSalesEffectiveness : 'Hiệu quả bán hàng', 
								report_MultiBranchSalesFrequency : 'Tần suất bán theo mặt hàng', 
								report_MultiBranchTransfer : 'Tổng hợp luân chuyển hàng', 
								report_OnOrderByCustomer : 'Hàng đặt theo khách', 
								report_OrderProfit : 'Lợi nhuận theo đơn hàng', 
								report_OtherTransaction : 'Giao dịch khác (hủy, tặng...)', 
								report_PaymentMethods : 'Phương thức thanh toán', 
								report_PreOrder : 'Tổng hợp hàng khách đặt mua', 
								report_PriceDifference : 'Chênh lệch giá bán', 
								report_ProducInOutStock : 'Xuất - Nhập - Tồn', 
								report_ProductProfit : 'Lợi nhuận hàng bán', 
								report_ProductProfitByBranch : 'Lợi nhuận hàng theo chi nhánh', 
								report_ProductPurchaseDetailReport : 'Chi tiết hàng nhập kho', 
								report_ProductReturnByUser : 'Hàng trả lại theo nhân viên', 
								report_ProductSaleByKitchenReport : 'Hàng bán theo bếp chế biến', 
								report_ProductSaleByRoomReport : 'Hàng bán theo Phòng/Bàn', 
								report_ProductSaleDetail : 'Hàng hóa bán ra (Chi tiết)', 
								report_ProductsReturnedToSuppliers : 'Hàng trả Nhà cung cấp', 
								report_ProductsSold : 'Hàng hóa bán ra', 
								report_ProductsSoldByBranch : 'Hàng bán theo chi nhánh', 
								report_ProductsSoldByPartner : 'Hàng bán theo khách', 
								report_ProductsSoldByUser : 'Hàng bán theo nhân viên', 
								report_PurchaseDetailReport : 'Tổng hợp phiếu nhập hàng', 
								report_RegisterClosureSummary : 'Tổng kết giao ca', 
								report_Reserve : 'Kế hoạch dự trù nhập hàng', 
								report_ReturnToCustomerDetail : 'Tổng hợp phiếu khách trả hàng', 
								report_ReturnToSupplierDetail : 'Tổng hợp đơn trả nhà cung cấp', 
								report_RevenueByBranch : 'Doanh thu theo chi nhánh', 
								report_RevenueByCustomers : 'Doanh thu theo khách hàng', 
								report_RevenueByDays : 'Doanh thu theo ngày', 
								report_RevenueByUsers : 'Doanh thu theo nhân viên', 
								report_RevenueDetail : 'Chi tiết doanh thu', 
								report_SlowSellingProducts : 'Hàng bán chậm', 
								report_StatementOfAccounts : 'Bảng kê công nợ chi tiết', 
								report_StockOrderByPartner : 'Báo cáo tổng hợp hàng nhập theo nhà cung cấp', 
								report_StockOrderDetail : 'Báo cáo tổng hợp hàng nhập', 
								report_Summaryofpayable : 'Tổng hợp công nợ phải trả', 
								report_Summaryofreceivable : 'Tổng hợp công nợ phải thu', 
								report_TransferIn : 'Hàng chuyển đến', 
								report_TransferOut : 'Hàng chuyển đi', 
								report_UnmarketableProducts : 'Hàng không bán được', 
								report_VATSummary : 'Tổng hợp VAT', 
								report_WarehousesValues : 'Giá trị kho hàng', 
								report_WarehousesValuesByBranch : 'Giá trị kho theo chi nhánh', 
								retailer : 'Cửa hàng', 
								return : 'Trả hàng', 
								revenue : 'Thu', 
								supplier : 'Nhà cung cấp', 
								transfer : 'Phiếu chuyển hàng', 
								user : 'Nhân viên', 
					});
		$translateProvider.translations('zh-CN', {
					accountingTransactionGroup : 'Categories', 
								accountingTransactionGroup_Deposit : 'Deposit', 
								accountingTransactionGroup_Othercosts : 'Other costs', 
								accountingTransactionGroup_Otherincome : 'Other income', 
								accountingTransactionGroup_Purchases : 'Pay for purchases', 
								accountingTransactionGroup_RecoverMoneyOrdering : 'Recover money ordering from partner', 
								accountingTransactionGroup_ReturnDeposits : 'Return deposits to partner', 
								accountingTransactionGroup_Sell : 'Sales receipts', 
								accountingTransactionGroup_Withdraw : 'Withdraw', 
								billion : 'billion', 
								branch : 'Branch', 
								button_Active : 'Active', 
								button_Add : 'Add new', 
								button_Cancel : 'Cancel', 
								button_CopyPermissions : 'Copy Permissions', 
								button_Delete : 'Delete', 
								button_DeleteAll : 'Clear', 
								button_Export : 'Export', 
								button_Export_Helper : 'Please select the columns in the grid want to export.', 
								button_GoToHome : 'Back to Home', 
								button_Import : 'Import', 
								button_Ok : 'Ok', 
								button_OpenFile : 'Open', 
								button_Print : 'Print', 
								button_Save : 'Save', 
								button_Sent : 'Sent', 
								button_Success : 'Completed', 
								button_Update : 'Update', 
								button_View : 'View', 
								button_Void : 'Void', 
								chart_Cashflow : 'Cashflow', 
								chart_Revenue : 'Revenue for {0}', 
								chart_RevenueByBranch : 'Revenue by branch', 
								customer : 'Customer', 
								download : 'Download', 
								download_Driver : 'Download drivers', 
								download_ElectronicScale : 'Download Electronic Scale tool', 
								download_SilentPrinting : 'Download Silent printing', 
								downloadTemplate : 'Download template', 
								enum_Completed : 'Completed', 
								enum_Exception : 'Shipping Exceptions', 
								enum_Field_Book : 'Book, Comic book...', 
								enum_Field_BuildingMaterials : 'Steel , Building materials', 
								enum_Field_Coffee : 'Coffee , Karaok, Restaurant...', 
								enum_Field_Cosmetics : 'Spa, Cosmetics', 
								enum_Field_Drug : 'Drug, Medical equipment...', 
								enum_Field_Electronic : 'Electronic (Mobile, PC, Accessories...)', 
								enum_Field_Fashion : 'Fashion', 
								enum_Field_Interior : 'Wooden, The furniture...', 
								enum_Field_Other : 'Other business fields', 
								enum_Field_Retail : 'Retail (Supermarket, Grocery...)', 
								enum_Field_Stationary : 'Stationary', 
								enum_InProcess : 'In Process', 
								enum_InTransit : 'In Transit', 
								enum_OnOrder : 'On Order', 
								enum_ProductType_Composite : 'Composite', 
								enum_ProductType_Service : 'Service', 
								enum_ProductType_Standard : 'Standard', 
								enum_SmsBrandName : 'BrandName', 
								enum_SmsRandom : 'Random', 
								enum_TransactionType_AdjustedDebt : 'Adjusted debt', 
								enum_TransactionType_Gift : 'Gift', 
								enum_TransactionType_ProductDamage : 'Damage', 
								enum_TransactionType_Recieve : 'Recieve', 
								enum_TransactionType_ReduceDirectMaterial : 'Reduce direct materials', 
								enum_TransactionType_ReduceMaterial : 'Reduce Materials', 
								enum_TransactionType_Self : 'Self-use', 
								enum_TransactionType_ShippingCost : 'Shipping Cost', 
								enum_Void : 'Void', 
								enum_WaitingForConfirmation : 'Waiting for confirmation', 
								expenses : 'Expenses', 
								filter_7Days : 'Pass 7 Days', 
								filter_CustomRange : 'Custom range', 
								filter_ThisMonth : 'This Month', 
								filter_ThisQuarter : 'This Quarter', 
								filter_ThisYear : 'ThisYear', 
								filter_Today : 'Today', 
								filter_Yesterday : 'Yesterday', 
								group : 'Group', 
								hotline : 'Hotline 24/7', 
								inventoryCount : 'Inventory count', 
								keyboardShortcuts_AddNewCustomer : 'Add new customer', 
								keyboardShortcuts_AddNewOrder : 'Add new order', 
								keyboardShortcuts_Print : 'Preview', 
								kitchen : 'Kitchen', 
								label_AccessDenied : 'Access Denied', 
								label_Account : 'Account', 
								label_Account_Name : 'Account (Bank account number)', 
								label_Account_Transfer : 'Transfer', 
								label_AccountingTransaction_Description : 'Description', 
								label_AccountingTransaction_Partner : 'Partner', 
								label_AccountingTransactionGroup_ChooseGroup : '-- Select  category--', 
								label_ActiveRetailer : 'Active account', 
								label_Addby : 'Add by', 
								label_AddByCategory : 'Add by Category', 
								label_AddByPartnerBirthday : 'Add the partner has birthday on :', 
								label_AddByPartnerGroup : 'Add by partner group', 
								label_AddingToDebitAccount : 'Adding to debit account', 
								label_AddProductBySupplier : 'Find products', 
								label_Address : 'Address', 
								label_AfterPrinting : 'After printing?', 
								label_All : 'All', 
								label_AllBranchCanView : 'All branchs can view', 
								label_AllOfBranchs : 'All of branchs', 
								label_AllOfCustomers : 'All of customers', 
								label_AllOfUsers : 'All of users', 
								label_AllTime : 'Anytime', 
								label_Amount : 'Amount', 
								label_AmountReceived : 'Amount Received', 
								label_AssistantBy : 'Assistant by', 
								label_AssistantBy_Help : 'Assist sales staff', 
								label_Auto : 'Automatic', 
								label_Autogen : 'Autogen code', 
								label_AutomaticallyAddMembers : 'Automatically add members to group if achieve revenue conditions?', 
								label_AvailableDate : 'Available Date', 
								label_BarCode : 'BarCode', 
								label_BarCode_12Label : '12 Label 202x162mm Tomy 103', 
								label_BarCode_1Label : '1 Label 36x30mm/1.42x1.18 Inch', 
								label_BarCode_1Label50 : '1 Label 58x40mm/2.28x1.57 Inch', 
								label_BarCode_2Label : '2 Label', 
								label_BarCode_3Label : '3 Label 104x22mm/4.2x0.9 Inch', 
								label_BarCode_65Label : '65 Label A4 Tomy 145', 
								label_BarCodePrinterName : 'Barcode printer', 
								label_BartenderAPrinterName : 'Bartender [A] printer name', 
								label_BartenderAPrinterNameHelp : 'Bartender [A] printer name', 
								label_BartenderBPrinterName : 'Bartender [B] printer name', 
								label_BartenderBPrinterNameHelp : 'Bartender [B] printer name', 
								label_BartenderCPrinterName : 'Bartender [C] printer name', 
								label_BartenderCPrinterNameHelp : 'Bartender [C] printer name', 
								label_BartenderDPrinterName : 'Bartender [D] printer name', 
								label_BartenderDPrinterNameHelp : 'Bartender [D] printer name', 
								label_BasePrice : 'Original price', 
								label_BasePriceList : 'Original price', 
								label_Beginningdebt : 'Beginning debt', 
								label_BonusPoint : 'Bonus point', 
								label_BonusPoint_Help : 'Bonus point are number of points used to calculate commissions for employees', 
								label_BonusPointForAssistant : 'Bonus point for assistant', 
								label_BonusPointForAssistant_Help : 'Bonus point are number of points used to calculate commissions for assistants', 
								label_BookingCalendar : 'Booking Calendar', 
								label_Branch_Address : 'Branch Address', 
								label_Branch_IsOnline : 'Online Store?', 
								label_Branch_IsOnlineHelp : 'Only allow 1 Online Store in shop.', 
								label_Branch_Name : 'Branch Name', 
								label_Branch_Phone : 'Branch Phone', 
								label_Cash : 'Cash', 
								label_Cashflow_Balance : 'Balance', 
								label_Cashflow_Beginning : 'Beginning', 
								label_Cashflow_TotalPaymentVoucher : 'Payment voucher', 
								label_Cashflow_TotalReceiptVoucher : 'Receipt voucher', 
								label_CdKey_ActiveBranch : 'Activate branch', 
								label_CdKey_ActiveTime : 'Activation time use', 
								label_CdKey_Key : 'License key', 
								label_ChangeSellingPrice : 'Change selling price?', 
								label_Checkin : 'Checkin', 
								label_Checkout : 'Checkout', 
								label_Checkout_Timer : 'Checkout', 
								label_CheckPriceBook : 'Check price book', 
								label_ClickToEnterSerials : 'Enter Lot number and expiration date', 
								label_ClickToViewSerials : 'Click to view Lot number and expiration date', 
								label_ClosingBalance : 'Closing Balance', 
								label_Code : 'Code', 
								label_Commission : 'Commission', 
								label_Company : 'Company', 
								label_Component_Code : 'Component Code', 
								label_Component_Name : 'Component Name', 
								label_ComponentsInvalid : 'Components invalid or it has created infinite loop.', 
								label_Config_Printing : 'Config printing', 
								label_CostMethod_AVG : 'Avg', 
								label_CostMethod_Latest : 'Latest', 
								label_CostMethod_Static : 'Static', 
								label_CreatedBy : 'Created By', 
								label_CreatedDate : 'Created Date', 
								label_CurrentOrder : 'Current bill', 
								label_CurrentPrice : 'Current price', 
								label_Customer_Address : 'Customer Address', 
								label_Customer_Code : 'Customer Code', 
								label_Customer_Name : 'Customer Name', 
								label_Customer_Phone : 'Customer Phone', 
								label_Customerservice : 'Customer service', 
								label_Day : 'Day', 
								label_Debit : 'Debit', 
								label_Debt : 'Current Debt', 
								label_DebtInvoice : 'Debt Invoice', 
								label_Default : 'default', 
								label_Delivery : 'Delivery', 
								label_DeliveryDate : 'Delivery date', 
								label_Department : 'Department', 
								label_Description : 'Description', 
								label_Detail : 'Detail', 
								label_Discount : 'Discount', 
								label_DiscountByPoint : 'Discount by use point', 
								label_DiscountOnOrder : 'Discount on order', 
								label_DocumentCode : 'Document Code', 
								label_DocumentType : 'Method', 
								label_DontPrintEmptyPrice : 'Don\'t print empty price', 
								label_DontPrintLabel : 'Don\'t print labels', 
								label_DownloadTemplate : 'Download template', 
								label_DuplicateTabs : 'You have Register open on multiple tabs.', 
								label_ElectronicScale : 'Electronic Scale', 
								label_Endingdebt : 'Endingdebt', 
								label_Entercard : 'Enter your 365 card information.', 
								label_EnterSerial : 'Enter new Lot number', 
								label_EnterVerificationCode : 'Enter verification code', 
								label_Exceptinventories : 'Except inventories', 
								label_ExcessCash : 'Excess Cash', 
								label_Exchange : 'Exchange', 
								label_ExchangeRate : 'Exchange rate', 
								label_ExpirationDate : 'Expiration date', 
								label_ExpireIn : 'Expire In', 
								label_FeatureConfiguration_AllowChangeOrderItems : 'Allows the cashier to change product called?', 
								label_FeatureConfiguration_AllowChangeOrderItemsHelp : 'Allows the cashier to change product called?', 
								label_FeatureConfiguration_AllowChangePrice : 'Allow change price on selling screen', 
								label_FeatureConfiguration_AllowChangeSalespeople : 'Allows select salespeople', 
								label_FeatureConfiguration_AllowChangeSalespeopleHelp : 'Allows select salespeople', 
								label_FeatureConfiguration_AllowPrintPreview : 'Allow print preview order.', 
								label_FeatureConfiguration_AllowPrintPreviewHelp : 'Allow print preview order.', 
								label_FeatureConfiguration_BlockOfTimeToUseService : 'Block of time to use the service (minutes)', 
								label_FeatureConfiguration_BlockOfTimeToUseServiceHelp : 'The system will be charged for every {0} minute is set here.', 
								label_FeatureConfiguration_ChangeTimer : 'Allows user to change the Check-in/Check-out time?', 
								label_FeatureConfiguration_CostMethod : 'Cost  method', 
								label_FeatureConfiguration_CostMethodHelp : 'The default method is calculated based on last import price.', 
								label_FeatureConfiguration_DifferentiatedproductsbyWarehouse : 'Differentiated products for each warehouse?', 
								label_FeatureConfiguration_DifferentiatedproductsbyWarehouseHelp : 'Differentiated products for each warehouse?', 
								label_FeatureConfiguration_ElectronicWeightScaleCodeLength : 'Electronic weight scale code length', 
								label_FeatureConfiguration_ElectronicWeightScaleCodeLengthHelp : 'Number characters barcode separation of electronic weight  scales.', 
								label_FeatureConfiguration_IPFilterConfiguration : 'IPs Filter Configuration', 
								label_FeatureConfiguration_IPFilterConfigurationHelp : 'Only this ip addresses can access to your store (e.g. 8.8.8.8,8.8.4.4,...)', 
								label_FeatureConfiguration_LimitTransactionTime : 'Do not allow change transaction time', 
								label_FeatureConfiguration_LimitTransactionTimeHelp : 'Not allowed to set time of transaction, always use the current time', 
								label_FeatureConfiguration_NotAllowUpdateOrder : 'Not allow update order after (x) days', 
								label_FeatureConfiguration_NotAllowUpdateOrderHelp : 'Employee can\'t update order after x days', 
								label_FeatureConfiguration_QrCodeEnable : 'QR Codes Enable', 
								label_FeatureConfiguration_StockControlWhenSelling : 'Stock control when selling', 
								label_FeatureConfiguration_StockControlWhenSellingHelp : 'Tracking the quantity of products sold for businesses selling.', 
								label_FeatureConfiguration_TurnOffReturnHistory : 'Reason for cancellation / return?', 
								label_FeatureConfiguration_TurnOffReturnHistory_Help : 'Reason for cancellation / return?', 
								label_Female : 'Female', 
								label_Filter_Account : 'Filter by account', 
								label_Filter_AllowOnlineSales : 'Allow Online sales', 
								label_Filter_Attributes : 'Filter by Attributes', 
								label_Filter_CashflowGroup : 'Filter by groups', 
								label_Filter_Date : 'Filter by date', 
								label_Filter_DocumentStatus : 'Filter by status', 
								label_Filter_ExcessInventory : 'Excess inventory', 
								label_Filter_Group : 'Filter by Group', 
								label_Filter_InStock : 'In stock', 
								label_Filter_Inventory : 'Filter by Inventory', 
								label_Filter_LowerInventory : 'Lower inventory', 
								label_Filter_NotFilter : 'Not filter', 
								label_Filter_Partner : 'Filter by partner', 
								label_Filter_PartnerType : 'Filter by Partner Type', 
								label_Filter_ProductType : 'Filter by Type', 
								label_Filter_User : 'Filter by Users', 
								label_Filter_Users : 'Filter by users', 
								label_Filterbycategory : 'Filter by category', 
								label_FirstTime : 'The first {0}  = {1}.', 
								label_FocusToQuantity : 'Focus to quantity input', 
								label_From : 'From', 
								label_FromDate : 'From Date', 
								label_Gender : 'Gender', 
								label_GlobalInventory : 'Global Inventory', 
								label_GrandTotal : 'Grand Total', 
								label_Group_ChooseGroup : '-- Select Group--', 
								label_Group_Name : 'Group Name', 
								label_Group_Parent : 'Parent Group', 
								label_Guest : 'Guest', 
								label_Guide : 'Guide', 
								label_Help_CopyTotal : 'Copy from Total field', 
								label_Hour : 'Hour', 
								label_IdentityCardNumber : 'Identity card number', 
								label_Images : 'Images', 
								label_Import_ExcludeOnHand : 'Don\'t update Onhand & Cost?', 
								label_Import_Help : 'Instructions for completing the column values ​​?', 
								label_Import_Limit : 'You can\'t exceed 1000 for once imported products', 
								label_Import_Reset : 'Are you sure to reset current data on excel grid?', 
								label_Import_SkipExists : 'Skip products already exists', 
								label_Import_Validate : 'Line <strong>{0} </strong>, <strong>{1} </strong> is Invalid.', 
								label_IncludeToFinancialReport : 'Include to financial report?', 
								label_IncludeToFinancialReport_Helper : 'These revenues or expenses in this group have been included in financial statement?', 
								label_IncomeStatement_01 : '01. Gross revenue', 
								label_IncomeStatement_02 : '02. Revenue deductions', 
								label_IncomeStatement_02_1 : '    - Sales returns', 
								label_IncomeStatement_03 : '03. Net revenue (01-02)', 
								label_IncomeStatement_04 : '04. Cost of goods sold', 
								label_IncomeStatement_05 : '05. Gross profit (03-04)', 
								label_IncomeStatement_06 : '06. Extraordinary income', 
								label_IncomeStatement_07 : '07. Extraordinary expenses', 
								label_IncomeStatement_08 : '08. Operating profit (05+06-07)', 
								label_Index : 'Index', 
								label_Indexing : 'Indexing', 
								label_Information : 'Info', 
								label_Input : 'Input', 
								label_InventoryCount_ActualCount : 'Count', 
								label_InventoryCount_AdjustmentDate : 'Adjustment Date', 
								label_InventoryCount_SetOutOfStock : 'Items not in stock inventory will be considered as out of stock ?', 
								label_Inwords : 'In words', 
								label_IPAddressPrintServer : 'IP address of your print server?', 
								label_IPAddressPrintServerHelp : 'IP address of your print server, you can print via Ipad, Android over local network.', 
								label_KitchenAPrinterName : 'Kitchen [A] printer name', 
								label_KitchenAPrinterNameHelp : 'Kitchen [A] printer name', 
								label_KitchenBPrinterName : 'Kitchen [B] printer name', 
								label_KitchenBPrinterNameHelp : 'Kitchen [B] printer name', 
								label_KitchenCPrinterName : 'Kitchen [C] printer name', 
								label_KitchenCPrinterNameHelp : 'Kitchen [C] printer name', 
								label_KitchenDPrinterName : 'Kitchen [D] printer name', 
								label_KitchenDPrinterNameHelp : 'Kitchen [D] printer name', 
								label_KitchenProcessed : 'Have processed', 
								label_LadingCode : 'LadingCode', 
								label_LargePrintLayout : 'Printer page size (A4, A5...)', 
								label_LargePrintLayout_Change : 'The system was configured  {0}', 
								labeL_LastTransaction : 'Last transaction', 
								label_LeadOwner : 'Managed by', 
								label_ListOf : 'List of {0}', 
								label_ListOfSerials : 'List of Lot number and expiration date', 
								label_LoginToDashboard : 'Dashboard', 
								label_LookupLot : 'Look up all Lot number & expiry', 
								label_Male : 'Male', 
								label_ManufactureStep1 : 'Declare input materials', 
								label_ManufactureStep2 : 'Declare finished output', 
								label_Manufacturing_ManufacturingDate : 'Manufacturing Date', 
								label_Manufacturing_ProducerPrice : 'Producer Price', 
								label_Manufacturing_TabMaterials : 'List of Materials', 
								label_Mart14 : 'Label for SuperMarket', 
								label_MaterialReduction : 'Material reduction', 
								label_Minute : 'Minute', 
								label_ModifiedBy : 'Modified By', 
								label_ModifiedDate : 'Modified Date', 
								label_Month : 'Month', 
								label_MoreBarCode : 'More BarCode', 
								label_MoreTime : '{0} more  = {1}.', 
								label_Name : 'Name', 
								label_Nameofvalue : 'Name of Value', 
								label_New : 'new', 
								label_Notebook_Name : 'Notebook Name', 
								label_NotRequired : 'Not required', 
								label_NumberOfGuests : 'Number of guests', 
								label_NumberOfOrders : 'Number Of Orders', 
								label_OldDebt : 'Old Debt', 
								label_OnlinePrice : 'Online Price', 
								label_OnlinePricingCalculator : 'Online Pricing Calculator', 
								label_OnOrderSounds : 'Notify sound ?', 
								label_OpeningBalance : 'Opening Balance', 
								label_Or : 'Or', 
								label_Order_Code : 'Order code', 
								label_Order_Date : 'Order date', 
								label_OrderingSounds : 'Ordering sounds', 
								label_OrderOffline : 'Offline order (Wait to sync)', 
								label_OrderOnline : 'Order online', 
								label_Orderstock_Date : 'Orderstock Date', 
								label_Other : 'Other', 
								label_OtherAccounts : 'Other accounts', 
								label_OtherInformation : 'Other information', 
								label_OtherTransaction_Date : 'Transaction Date', 
								label_Output : 'Output', 
								label_PageSize : 'Page Sizw', 
								label_Partner_Address : 'Partner Address', 
								label_Partner_Code : 'Partner Code', 
								label_Partner_Name : 'Partner Name', 
								label_Partner_Password : 'Password (Order Online)', 
								label_Partner_PasswordHelp : 'Partner can login to system with Code & Password to order product online.', 
								label_Partner_Phone : 'Partner Phone', 
								label_Partner_TaxCode : 'Tax Code', 
								label_Partner_TransactionLimit : 'Total transaction may see a maximum of 365 days', 
								label_Paybooks : 'Paybooks', 
								label_Payment : 'Payment', 
								label_Permission_AccountingTransaction : 'Cash flow', 
								label_Permission_Branch : 'Branch Management', 
								label_Permission_DeliveryOrder : 'Delivery order - COD', 
								label_Permission_GiftCard : 'Gift Card', 
								label_Permission_InventoryCount : 'Inventory Count', 
								label_Permission_Manufacturing : 'Manufacturing Management', 
								label_Permission_Order : 'Orders', 
								label_Permission_OtherTransaction : 'Other Transaction', 
								label_Permission_Partner : 'Partner Management', 
								label_Permission_PointConfig : 'Point Configuration', 
								label_Permission_PosParameter : 'Feature Configuration', 
								label_Permission_PriceBook : 'Price Books', 
								label_Permission_PrintTemplate : 'Print Templates', 
								label_Permission_Product : 'Product Management', 
								label_Permission_PurchaseOrder : 'Order Stock', 
								label_Permission_PurchaseOrderReturn : 'Return to suppliers', 
								label_Permission_Report : 'Reports', 
								label_Permission_Return : 'Returns', 
								label_Permission_Room : 'Tables/Rooms Management', 
								label_Permission_Sm : 'SMS Marketing', 
								label_Permission_Transfer : 'Internal stock transfer', 
								label_Permission_User : 'User Management', 
								label_Permission_Voucher : 'Voucher', 
								label_Phone : 'Phone', 
								label_PlanToChangeCost : 'Plan to change cost', 
								label_Point : 'Bonus Point', 
								label_Point_Exchangepoints : 'Exchange points', 
								label_PointConfig_ExcludeOrderDiscount : 'Don\'t convert orders have discount?', 
								label_PointConfig_ExcludeProductDiscount : 'Don\'t convert products have discount?', 
								label_PointConfig_PointToValue : '1 point is equivalent to {0}', 
								label_PointConfig_ValueToPoint : 'Spending {0} earns 1 point', 
								label_PoleDisplay : 'Pole Display Com Port (COM1,COM2,COM3...)', 
								label_Position : 'Position', 
								label_PreOrderCode : 'The first two characters distinguish the bill (Default: HD ...)', 
								label_PreProductCode : 'The first two characters distinguish the product (Default: HH ...)', 
								label_Price : 'Price', 
								label_PriceBook_LimitByBranchs : 'Limit by branchs', 
								label_PriceBook_LimitByCustomerGroups : 'Limit by customer groups', 
								label_PriceBook_LimitByUsers : 'Limit by users', 
								label_PriceBook_List : 'Pricebook List', 
								label_PriceBook_Name : 'Price Book Name', 
								label_PriceDiff : 'Price Difference', 
								label_PriceForAll : 'Price', 
								label_PriceForRoom : 'Price for room', 
								label_Pricing_FreeTrial : 'Free Trial', 
								label_Pricing_Premium : 'Premium', 
								label_PricingCalculator : 'Pricing Calculator', 
								label_Print80DPI : 'PRP 80,58mm Receipt printer resolution (DPI, Default: 203dpi)', 
								label_PrintA4DPI : 'A4/A5 Printer Resolution (DPI, Default: 600dpi)', 
								label_PrintAfterPay : 'Print after click Payment', 
								label_PrintKitchen80DPI : 'PRP 80,58mm Kitchen printer resolution (DPI, Default: 203dpi)', 
								label_PrintTemplates_Display : 'Display', 
								label_PrintTemplates_Token : 'Token', 
								label_PrintToBartenderA : 'Print to bartender [A]', 
								label_PrintToBartenderB : 'Print to bartender [B]', 
								label_PrintToBartenderC : 'Print to bartender [C]', 
								label_PrintToBartenderD : 'Print to bartender [D]', 
								label_PrintToKitchenA : 'Print to kitchen [A]', 
								label_PrintToKitchenB : 'Print to kitchen [B]', 
								label_PrintToKitchenC : 'Print to kitchen [C]', 
								label_PrintToKitchenD : 'Print to kitchen [D]', 
								label_PrintTransfer : 'Transfer', 
								label_Product_Active : 'Stop trading this item?', 
								label_Product_AttributeName : 'Attribute Name(Color,Size...)', 
								label_Product_Attributes : 'Attributes', 
								label_Product_BaseUnit : 'Base Unit', 
								label_Product_Code : 'Product Code', 
								label_Product_Coefficient : 'Coefficient', 
								label_Product_CoefficientHelp : 'When selling, the quantity will be multiplied coefficients', 
								label_Product_Components : 'Components', 
								label_Product_ConversionValue : 'Conversion Value', 
								label_Product_Cost : 'Cost', 
								label_Product_DontSellingOnline : 'Not allow to selling Online', 
								label_Product_FirstBlock : 'Number of the first blocks?', 
								label_Product_Hidden : 'Hidden on Sell screen', 
								label_Product_HiddenHelp : 'This product will be hidden on sell screen.', 
								label_Product_History : 'History', 
								label_Product_InStock : 'In Stock', 
								label_Product_IsPercentage : 'Selling prices = (%) of Total on Order', 
								label_Product_IsPercentage_Helper : 'Selling prices are calculated as a percentage of the value of orders', 
								label_Product_IsPriceForBlock : 'Is priceset for per block?', 
								label_Product_IsPriceForBlock_Helper : 'Price is set for per block instead of a hour', 
								label_Product_LargeUnit : 'Large Unit', 
								label_Product_LargeUnitCode : 'Large Unit Code', 
								label_Product_Lastinventory : 'Last inventory', 
								label_Product_MaxQuantity : 'Max Quantity', 
								label_Product_MinQuantity : 'Min Quantity', 
								label_Product_Name : 'Product Name', 
								label_Product_NormsInventory : 'Norms Inventory', 
								label_Product_Note : 'Product Note on Order', 
								label_Product_OnHand : 'On Hand', 
								label_Product_Online_Helper : 'This product will be displayed in the online store', 
								label_Product_OnlinePriceLargeUnit : 'Large Unit Online Price', 
								label_Product_OnOrder : 'On Order', 
								label_Product_OrderQuickNotes : 'Order quick notes (Note1 , Note 2...)', 
								label_Product_OtherSettings : 'Other settings', 
								label_Product_OutStock : 'Out Stock', 
								label_Product_Popular : 'Popular products', 
								label_Product_PriceAppliesTo : 'The price applies to', 
								label_Product_PriceAppliesToEnd : ' the next day they started charging to use', 
								label_Product_PriceFor : 'Price for the first {0} blocks', 
								label_Product_PriceLargeUnit : 'Large Unit Price', 
								label_Product_Printer : 'Printer name', 
								label_Product_RecentPurchasePrice : 'Recent Purchase Price', 
								label_Product_SellingOnline : 'Selling Online', 
								label_Product_Serial : 'Lot number and expiration date Management', 
								label_Product_Serial_Helper : 'Inventories are calculated for each lot number and expiration date.', 
								label_Product_SerialNumbers : 'Lot number', 
								label_Product_SetHotel : 'Set for Lodging - Hotels', 
								label_Product_SpecialTime : 'Set up a special time slot', 
								label_Product_Specifications : 'Specifications', 
								label_Product_Split : 'Don\'t Split products on cart?', 
								label_Product_SplitForSalesOrder : 'Split for sales order', 
								label_Product_SplitForSalesOrder_Helper : 'Split Based on Item Quantity in Sales order', 
								label_Product_TimeNote : 'Please do not set the two parameters on the ( blank ) if the timer operation of the stores are no exception .', 
								label_Product_Timer : 'Quantity is calculated according to the time of use', 
								label_Product_TimerHelp : 'This option is used for items such as computer usage time : time rented a room , singing karaok Time ... When added to sales screen system will automatically charge use time .', 
								label_Product_Type : 'Product Type', 
								label_Product_Unit : 'Unit', 
								label_Profit : 'Profit', 
								label_Promotion : 'Promotion', 
								label_Province : 'Province', 
								label_Provisionalorder : 'Provisional order', 
								label_PurchaseOrderConfirm : 'PO Confirmation', 
								label_Purchaseplan : 'Purchase plan', 
								label_PurchasePrice : 'Purchase Price', 
								label_Qty : 'Qty', 
								label_Quantity : 'Quantity', 
								label_QuickFilter : '--- Quick filter ---', 
								label_QuickSearch : 'Quick Search', 
								label_Rates : 'Rates', 
								label_ReceiptPrinterName : 'Receipt printer name', 
								label_RecentActivities : 'Recent Activities', 
								label_RemoveNotAchieved : 'Remove members from group if not achieve revenue conditions?', 
								label_Report_Time : 'Time', 
								label_Report_Total : 'Total value', 
								label_Report_TotalAfterDiscount : 'Total value (After discount)', 
								label_Reported : 'Reported', 
								label_Restaurant_ChangeTable : 'Change table', 
								label_Restaurant_PrintRefund : 'Refund items', 
								label_Restaurant_PrintToCooker : 'Print to cooker', 
								label_Retailer_Address : 'Business Address', 
								label_Retailer_ExpiryDate : 'Expiry Date', 
								label_Retailer_Name : 'Business Name', 
								label_Retailer_Phone : 'Business Phone', 
								label_Retailer_TelephoneOfShopkeepers : 'Telephone of shop keepers', 
								label_Return_Code : 'Return code', 
								label_Return_Desc1 : 'Client request', 
								label_Return_Desc2 : 'Bad action', 
								label_Return_ReturnDate : 'Return date', 
								label_Return_Total : 'Total refunds', 
								label_Return_Totalexpenditure : 'Total expenditure', 
								label_ReturnByOrder : 'Return by order', 
								label_ReturnMoney : 'Return money', 
								label_Room : 'Tables / Rooms', 
								label_Room_Menu : 'Menu', 
								label_Room_Name : 'Table or Room name', 
								label_Room_Position : 'Position', 
								label_Room_Printer : 'Printer name (Printed directly in the room / Tables)', 
								label_Room_Select : '--- Select Table/Room ---', 
								label_RoomClickHelper : '<strong>Double Click</strong> to open menu!', 
								label_Scheduler : 'Customer service calendar', 
								label_Search : 'Search', 
								label_SearchCustomer : 'Search customers', 
								label_SearchMenu : 'Search menu', 
								label_SearchPartner : 'Search partners', 
								label_SearchPartner_NotExisting : 'Partner not existing in your shop.', 
								label_SearchProduct : 'Search product', 
								label_SearchProduct_NotExisting : 'Product not existing in your shop.', 
								label_SearchSerial_NotExisting : 'Lot number {0} not existing or out of stock.', 
								label_SearchSerials : 'Search Lot number', 
								label_SearchSupplier : 'Search supplier', 
								label_SelectFile : 'Select File', 
								label_SellLayout : 'The interface supports touch screen ?', 
								label_SellLayoutRightToLeft : 'Right-to-Left Layout', 
								label_SendRequest : 'Send request', 
								label_SessionTimeOut : 'Your session has timed out please login again.', 
								label_ShippingAddress : 'Shipping address', 
								label_ShippingCost : 'Shipping cost', 
								label_ShippingPartner_Code : 'Shipping partner code', 
								label_SmallPrintLayout : 'Printer page size (58mm,80mm)', 
								label_SmartSearch : 'Smart Search', 
								label_Sms_Birthday : 'Birthday', 
								label_Sms_BrandName : 'Sms Brandname', 
								label_Sms_BrandNameHelp : 'As message displays the company name in the sender section', 
								label_Sms_Content : 'Content', 
								label_Sms_Exception : 'Messages must not exceed 160 characters .', 
								label_Sms_Length : 'Length', 
								label_Sms_MaximumSms : 'You can not send more than {0} messages , please contact the sales staff to refill the account.', 
								label_Sms_Messages : 'Messages', 
								label_Sms_PerMessage : 'Per Message', 
								label_Sms_PriceList : 'Price List', 
								label_Sms_Random : 'Messages random head', 
								label_Sms_RandomHelp : 'Is the message displayed phone number in directory format 09xxxxx sender', 
								label_Sms_Receiver : 'Receiver', 
								label_Sms_Remaining : 'Remaining', 
								label_Sms_Sent : 'Sent', 
								label_Sms_TotalPartner : 'Total partners', 
								label_Sms_Type : 'Sms Type', 
								label_SoldBy : 'Sold By', 
								label_SoldBy_Help : 'Assign salespeople', 
								label_Source : 'Copy from', 
								label_Source_Invalid : 'Can\'t copy permission from this user.', 
								label_SpecialPrice : 'Special price for room', 
								label_Split : 'Split', 
								label_SpreadsheetsQuantity : 'Spreadsheets quantity, weight', 
								label_StartTimer : 'Start the timer service', 
								label_Status : 'Status', 
								label_StopTimers : 'Stop timers ?', 
								label_SubTotal : 'Sub Total', 
								label_Supplier_Code : 'Supplier code', 
								label_SwichBalanceScale : 'Change between : Balance Scale <=> Default Search', 
								label_Sync : 'Sync', 
								label_Sync_Error : 'Can\'t sync', 
								label_Sync_Success : 'Synchronous order {0} successfully .', 
								label_Task : 'Task', 
								label_Task_Description : 'Description', 
								label_Task_DueDate : 'Due Date', 
								label_Task_Subject : 'Subject', 
								label_To : 'To  ', 
								label_ToDate : 'To Date', 
								label_Today_Expiry : 'Products expiring next 30 days', 
								label_Today_Online : 'Online Orders', 
								label_Today_Return : 'Sales Return', 
								label_Today_Return_Coffee : 'Return', 
								label_Today_Return_Value : 'Return value', 
								label_Today_Revenue : 'Revenue', 
								label_Total : 'Total', 
								label_TotalCommission : 'Total commission', 
								label_TotalDebt : 'Total debt', 
								label_TotalDiff : 'Total difference', 
								label_TotalGuests : 'Total Guests', 
								label_TotalLineItem : 'Total On Line Item', 
								label_TotalLineItemBeforeDiscount : 'Total On Line Item(Before Discount)', 
								label_TotalPayment : 'Total Payment', 
								label_TotalProfit : 'Total profit', 
								label_TotalQuantity : 'Total Quantity', 
								label_TotalRevenue : 'Total revenue', 
								label_TotalSupplierRefunds : 'Supplier refunds', 
								label_Transaction_History : 'Transaction history', 
								label_TransactionDate : 'Transaction Date', 
								label_Transactionvalue : 'Transaction value', 
								label_TransDate : 'Trans Date', 
								label_Transfer_BranchValid : 'Please check brand to recieve', 
								label_Transfer_ButtonReceive : 'Receive', 
								label_Transfer_ButtonSent : 'Sent', 
								label_Transfer_Receive : 'To branch', 
								label_Transfer_Sender : 'Sent from branch', 
								label_TrueFalseHelper : '0 = False , 1 = True', 
								label_Undefined : 'Undefined', 
								label_UpdateCost : 'Update Cost', 
								label_User_BacktoLogin : 'Back to login', 
								label_User_ConfirmPassword : 'Confirm Password', 
								label_User_DOB : 'Birthday', 
								label_User_EmailAddress : 'Email address', 
								label_User_Forgotyourpassword : 'Forgot your password ?', 
								label_User_ForgotyourpasswordGuide : 'Enter your email address to recover your password.', 
								label_User_ForgotyourpasswordNew : 'Enter your new password.', 
								label_User_IsAdmin : 'Admin', 
								label_User_Loginto : 'Login to', 
								label_User_Newinpos : '365 Software JSC.', 
								label_User_NewPassword : 'New Password', 
								label_User_Password : 'Password', 
								label_User_Rememberme : 'Remember me', 
								label_User_ResetPassword : 'Reset password', 
								label_User_SetPermission : 'Set Permissions', 
								label_User_Signin : 'Sign in', 
								label_User_Signout : 'Sign out', 
								label_User_Username : 'Username', 
								label_User_UsernameOrEmail : 'Username or Email', 
								label_Using : 'Room Status', 
								label_Value : 'Value', 
								label_ViewByRoom : 'View by Table/Room', 
								label_ViewCost : 'View Cost', 
								label_Voucher_Code : 'Voucher code', 
								label_WarrantyServiceCare : 'Warranty & service care', 
								label_Weight : 'Weight', 
								label_Year : 'Year', 
								manufacturing : 'Manufacturing', 
								menu_BranchManagement : 'Branch Management', 
								menu_Cashflow : 'Cash flow', 
								menu_ChangeBranch : 'ChangeBranch', 
								menu_ChangeBranchHelper : 'Select a Branch', 
								menu_ClearSampleData : 'Clear sample data', 
								menu_ClearSampleData_Confirm : 'Are you sure you want to delete all data ?', 
								menu_CommissionReport : 'Commission reports', 
								menu_ConfirmationAndAutoPrint : 'Confirmation & Automatically print', 
								menu_CopyKitchen : 'Make a copy for Kitchen tikets', 
								menu_CopyReceipt : 'Make a copy for Receipts', 
								menu_Customers : 'Customers', 
								menu_DailyReport : 'Daily Report', 
								menu_Dashboard : 'Dashboard', 
								menu_Expirywarning : 'Expiry warning', 
								menu_Extra : 'Extra/Topping', 
								menu_FeatureConfiguration : 'Feature Configuration', 
								menu_FinancialReport : 'Financial Report', 
								menu_History : 'History', 
								menu_InternalStockTransfer : 'Internal Stock Transfer', 
								menu_InventoryCount : 'Inventory Count', 
								menu_InventoryReport : 'Inventory Report', 
								menu_KeyboardShortcuts : 'Keyboard Shortcuts', 
								menu_Kitchen : 'Status Kitchens', 
								menu_LiabilitiesReport : 'Liabilities Report', 
								menu_ListOfPartners : 'List of partners', 
								menu_ListOfProduct : 'List of Products', 
								menu_Logout : 'Sign out', 
								menu_Manufacturing : 'Manufacturing Management', 
								menu_MaterialUsage : 'Material Usage', 
								menu_MiniCRMReport : 'Customer care report', 
								menu_MultiBranchReport : 'Multi Branch Reports', 
								menu_NotebookSales : 'Notebook sales', 
								menu_Orders : 'Orders', 
								menu_OrderStock : 'Order Stock', 
								menu_OtherTransaction : 'Other Transaction', 
								menu_Partners : 'Partners', 
								menu_PriceBook : 'Price Books', 
								menu_PrintBarcodeLabels : 'Print Barcode Labels', 
								menu_PrintTemplates : 'Print Templates', 
								menu_Processingorders : 'Processing orders', 
								menu_Products : 'Products', 
								menu_Profile : 'Profile', 
								menu_QrCode : 'Configuring the QRCode', 
								menu_Reporting : 'Reporting', 
								menu_Restaurant : 'Restaurant', 
								menu_Returns : 'Sales returns', 
								menu_ReturnsReport : 'Returns report', 
								menu_ReturnToSupplier : 'Return to suppliers', 
								menu_SalesAnalysis : 'Sales Analysis', 
								menu_SalesReport : 'Sales Report', 
								menu_Screensforcashiers : 'Screens for cashiers', 
								menu_Screensforwaiter : 'Screens for waiters', 
								menu_Sell : 'Sell', 
								menu_Served : 'Served', 
								menu_Settings : 'Settings', 
								menu_ShippingPartners : 'Shipping Partners', 
								menu_SMSMarketing : 'SMS Marketing', 
								menu_splitPrinting : 'Cut each item when print to cooker.', 
								menu_StockorderReport : 'Stockorder Reports', 
								menu_StoreSettings : 'Store Settings', 
								menu_Suppliers : 'Suppliers', 
								menu_Transactions : 'Transactions', 
								menu_UserManagement : 'User Management', 
								menu_UserProfile : 'User Profile', 
								message_AccessDenied : 'You are not authorized to access this function.', 
								message_ActivationSuccessful : 'You have successfully activate the account , the new expiry date is : { 0 }', 
								message_Activities_InventoryCount : 'created Inventory count with code', 
								message_Activities_Manufacturing : 'created Manufacturing with code', 
								message_Activities_Order : 'created Order with value', 
								message_Activities_Orderstock : 'created Orderstock with value', 
								message_Activities_ProductDamage : 'created Other transaction  items in document', 
								message_Activities_Receive : 'received products from document', 
								message_Activities_Return : 'created return with value', 
								message_Activities_ReturnToSupplier : 'created return to supplier with value', 
								message_Activities_StockTransfer : 'created Stock transfer with code', 
								message_BarCodeMax : 'You can only print up to 1000 barcodes', 
								message_Branch_CanNotDelete : 'Shop must have at least 1 branch.', 
								message_Cashflow_UnableChangePartner : 'Unable to change partners , please delete document & recreate .', 
								message_Category_Level : 'System only allow maximum 2 levels of categories.', 
								message_ChangeBranch : 'You have changed to branch : {0}', 
								message_ClearCache_OpenLink : 'See instructions', 
								message_Components_WaringComposite : '<strong>Attention !</strong> Components of composite product will be reduced when sale.', 
								message_Components_WaringShowProductInBranch : '<strong>Attention !</strong>You can set differentiated products for each warehouse by <a href="/#/FeatureConfiguration">Settings Function</a>.', 
								message_Components_WaringStandard : '<strong>Attention !</strong> Components of product will be reduced in the production process.', 
								message_CustomerOrdering_Help : 'This screen is used for employees to record customer calls menu .', 
								message_CustomerOrdering_Return : 'Items returned nonexistent or exceed the amount already ordered.', 
								message_DataInvalid : '{0} invalid.', 
								message_DataNotExists : '{0} does not exist.', 
								message_DeleteReferenceDataUnsuccessfully : 'Cannot delete currently used data.', 
								message_DeleteSuccess : 'Data deleted successfully', 
								message_DontSetupIdentityCardNumber : 'You have not set the Identity Card Number  for employees', 
								message_DuplicateData : '{0} is already existed.', 
								message_EmptyProduct : 'No product in shop. Please return to management screen to create items.', 
								message_EmptyProductRoom : 'No product or room in shop. Please return to management screen to create items.', 
								message_EmptyProductTitle : 'Notice', 
								message_ErrorShowOnBranch : 'Please switch to the same warehouse to add product.', 
								message_ErrorSummary : 'An error occurs in data updating process.', 
								message_Featuresupgraded : 'Features upgraded', 
								message_Featuresupgraded_Content : 'Update required please clear your browser cache to run the latest update', 
								message_FileSizeLimit : 'The file size can not exceed {0}.', 
								message_Firewall : 'Shop owner has blocked access from this IP addresses.', 
								message_Group_InvalidParentValues : 'Invalid Parent Values', 
								message_HasExpired : 'Shop has expired on {0}.<br>Please contact {1} for further assistance or <a href="/Signin/Active"><strong> click here </strong></a> to pay a renewal payment.', 
								message_HasServed : '{0} has sent requests new menu.', 
								message_InventoryCount_DirectUpdate : 'Direct update {0} from product management', 
								message_InventoryTracking_MaterialsDesc : 'Materials for manufacturing', 
								message_IsOnline : '{0} is online to track sales.', 
								message_LimitData : 'You only add up to  {0} {1}.', 
								message_LimitedUsage : '{0} account feature limited:<br/>- {1} Products <br/>- {2} Branchs <br/>- {3} Orders<br/>Please contact <strong>{4}</strong>  to upgrade account.', 
								message_Modal_ConfirmCompleted : 'System will be update inventory after document is completed. Do you want complete this document?', 
								message_Modal_ConfirmHeader : 'Confirm', 
								message_Modal_DeleteHeader : 'Delete confirmation ?', 
								message_Modal_Message : 'Are you sure you want to delete <strong>{0}</strong> ?', 
								message_Modal_ReplaceOrder : 'This order has newer updates from other devices, the system automatically updates this version.', 
								message_Modal_SMSCompleted : 'System will be reduced SMS  after document is completed. Do you want complete this document?', 
								message_NoProductInCategory : 'Don\'t have any product in this category.', 
								message_NoRoomInCategory : 'Don\'t have any room in this category.', 
								message_Notebook_Help : 'Creation of package goods , while sales this package simply select items in the package will give the order . For example, maintenance package , Manual medicine , Gift Wrapping ...', 
								message_OfflineSave : 'No internet connection. Transaction is temporary saved on computer.', 
								message_OrderIsBeingProcessed : 'This order is being processed', 
								message_PaymentFor : 'Payment for document {0}', 
								message_PreventTimestampUpdate : 'You can not update documents exceeding {0} days compared with the current time', 
								message_PreventUpdateDocument : 'You are only allowed to update the document after {0} minutes', 
								message_Product_ValidateComposite : 'Item components are required for Composite product', 
								message_Product_ValidateUnit : 'Base unit field is required.', 
								message_QRCodeConfig : 'QR code is not enabled, please open Settings to configuration.', 
								message_QRCodeOnline : 'QR Code only effect when Internet connection', 
								message_Retailer_Renew : 'You have {0} days left on your trial. Activate your account now.', 
								message_SaveSuccess : 'Data update successfully', 
								message_SetupForFirstTime : 'Setup shop for first time', 
								message_SetupForFirstTime_ChooseField : 'Choose the right business field for your shop?', 
								message_SetupForFirstTime_GenerateSampleData : 'Do you want generate sample data?', 
								message_SynchronizingSuccess : 'Synchronizing Success', 
								message_Tray : 'You don\'t have the 365-Tray tool installed to support printing, contact 1900.636.680 for detailed instructions.', 
								message_UnauthorizedObjectAccess : 'No access to {0} in {1} with user {2}.', 
								message_UnauthorizedPropertyAccess : 'You don\'t have permission to excute this function.', 
								message_UnauthorizedRecordAccess : 'User {0} is not allowed to access record.', 
								message_Upgrade : 'The system has been updated to the new version, please press CTRL + F5 to upgrade.', 
								message_User_AccountLocked : 'Your account has been locked.', 
								message_User_AdminAccess : 'This is the master administrator account, with access to all features.', 
								message_User_CheckEmail : 'Please check your email for instructions on how to reset your password.', 
								message_User_EmailRequired : 'An email address is required.', 
								message_User_EmptyPassword : 'You haven\'t entered password.', 
								message_User_ForgotPasswordEmailNotExist : 'The email account that you tried to reset password does not exist...', 
								message_User_InvalidSessionKey : 'Invalid session key or session key has expired, please try again.', 
								message_User_NoBranchSelect : 'You haven\'t selected branch.', 
								message_User_ResetPasswordSuccessfully : 'Password has been reset successfully, you can login with new  password.', 
								message_User_WaringGrantAccess : '<strong>Attention !</strong> You must grant permissions to access your shop after created user.', 
								message_User_WrongLogon : 'The username and/or password is invalid.', 
								message_User_WrongNewPassword : 'Please check that you\'ve entered and confirmed your password.', 
								message_ValidateCartEmpty : 'Don\'t have any product on list.', 
								message_ValidateCashflow : 'Amount value and Group are required.', 
								message_ValidateCdKey : 'License key is not valid or has been used, please check the information.', 
								message_ValidateCustomer : 'Please select a customer.', 
								message_ValidateOnHand : '<strong>{0}</strong> is out of stock.', 
								message_ValidatePrinter : 'You don\'t config any printer name, please go to Feature Configuration to set printer.', 
								message_ValidateRoomEmpty : 'Please select a Room or Table to sent request.', 
								message_ValidateRoomHasTimer : 'This room has not set timer product service, please set in the room management.', 
								message_ValidateSummary : 'Please input all the information before saving.', 
								message_VerificationCodeValid : 'Verification code is not valid.', 
								million : 'million', 
								notebook : 'Notebook', 
								order : 'Order', 
								orderstock : 'Orderstock', 
								otherTransaction : 'Other Transaction', 
								paymentVoucher : 'Payment voucher', 
								pricebook : 'Price book', 
								product : 'Product', 
								receiptVoucher : 'Receipt voucher', 
								report_BestCustomers : 'Best Customers', 
								report_BranchProfit : 'Profit By Branch', 
								report_BuyingHabits : 'Buying Habits', 
								report_CashBook : 'CashBook', 
								report_COD : 'Delivery Costs', 
								report_Commissionforstaffs : 'Commission for staffs', 
								report_CustomerProfit : 'Profit by customers', 
								report_CustomerReturnProducts : 'Customer return products', 
								report_DebtByOrder : 'Statement of debt by order', 
								report_Difference : 'Difference', 
								report_DirectMaterialUsage : 'Material Usage (Sell)', 
								report_EndOfDay : 'End Of Day Report', 
								report_GrossingProducts : 'Grossing products', 
								report_HighProfitsReport : 'High Profits', 
								report_IncomeStatement : 'Income Statement', 
								report_Lot : 'Lot & Expiration date', 
								report_MaterialUsage : 'Material Usage (Manufacturing)', 
								report_MiniCRMBuyers : 'Buyers in the period', 
								report_MiniCRMInfo : 'List Of Customers', 
								report_MiniCRMReturn : 'Customer not returns', 
								report_MultiBranchInventoryDifference : 'Inventory Count Difference', 
								report_MultiBranchManufacturing : 'Produce products', 
								report_MultiBranchMaterial : 'Materials', 
								report_MultiBranchMinMax : 'Inventory control', 
								report_MultiBranchPriceDifference : 'Price difference', 
								report_MultiBranchProductPurchase : 'Products Purchase', 
								report_MultiBranchProductReturn : 'Product Returns', 
								report_MultiBranchProductSold : 'Products Sold', 
								report_MultiBranchReturnToSupplier : 'Products return to Supplier', 
								report_MultiBranchSale : 'Sale Analyst', 
								report_MultiBranchSalesEffectiveness : 'Sales Effectiveness', 
								report_MultiBranchSalesFrequency : 'Sales Frequency', 
								report_MultiBranchTransfer : 'Products Transfer', 
								report_OnOrderByCustomer : 'Products ordered by Customers', 
								report_OrderProfit : 'Profit by orders', 
								report_OtherTransaction : 'Other transaction', 
								report_PaymentMethods : 'Payment Methods', 
								report_PreOrder : 'Pre-Order', 
								report_PriceDifference : 'Price difference', 
								report_ProducInOutStock : 'Input - Output - Inventory', 
								report_ProductProfit : 'Profit by products', 
								report_ProductProfitByBranch : 'Profit of products by branchs', 
								report_ProductPurchaseDetailReport : 'Product Purchase Detail', 
								report_ProductReturnByUser : 'Product Return by user', 
								report_ProductSaleByKitchenReport : 'Product Sale By Kitchen', 
								report_ProductSaleByRoomReport : 'Products Sale By Rooms', 
								report_ProductSaleDetail : 'Products sold (Detail)', 
								report_ProductsReturnedToSuppliers : 'Products r eturnedto suppliers', 
								report_ProductsSold : 'Products sold', 
								report_ProductsSoldByBranch : 'Products Sold By Branchs', 
								report_ProductsSoldByPartner : 'Products sold by partners', 
								report_ProductsSoldByUser : 'Products sold by users', 
								report_PurchaseDetailReport : 'Purchase Order Detail Report', 
								report_RegisterClosureSummary : 'Register Closure Summary', 
								report_Reserve : 'Reserve planning', 
								report_ReturnToCustomerDetail : 'List of returns document', 
								report_ReturnToSupplierDetail : 'List of returns to supplier document', 
								report_RevenueByBranch : 'Revenue by branchs', 
								report_RevenueByCustomers : 'Revenue by customers', 
								report_RevenueByDays : 'Revenue by days', 
								report_RevenueByUsers : 'Revenue by users', 
								report_RevenueDetail : 'Revenue detail', 
								report_SlowSellingProducts : 'Slow Selling Products', 
								report_StatementOfAccounts : 'Statement of accounts', 
								report_StockOrderByPartner : 'Synthesis report purchases by partner', 
								report_StockOrderDetail : 'Synthesis report purchases', 
								report_Summaryofpayable : 'Summary of payable', 
								report_Summaryofreceivable : 'Summary of receivable', 
								report_TransferIn : 'Product Transfer In', 
								report_TransferOut : 'Product Transfer Out', 
								report_UnmarketableProducts : 'Unmarketable products', 
								report_VATSummary : 'VAT Summary', 
								report_WarehousesValues : 'Warehouses values', 
								report_WarehousesValuesByBranch : 'Warehouses Values By Branchs', 
								retailer : 'Store', 
								return : 'Return', 
								revenue : 'Revenue', 
								supplier : 'Supplier', 
								transfer : 'Internal stock transfer', 
								user : 'User', 
					});
		$translateProvider.translations('en-US', {
					accountingTransactionGroup : 'Categories', 
								accountingTransactionGroup_Deposit : 'Deposit', 
								accountingTransactionGroup_Othercosts : 'Other costs', 
								accountingTransactionGroup_Otherincome : 'Other income', 
								accountingTransactionGroup_Purchases : 'Pay for purchases', 
								accountingTransactionGroup_RecoverMoneyOrdering : 'Recover money ordering from partner', 
								accountingTransactionGroup_ReturnDeposits : 'Return deposits to partner', 
								accountingTransactionGroup_Sell : 'Sales receipts', 
								accountingTransactionGroup_Withdraw : 'Withdraw', 
								billion : 'billion', 
								branch : 'Branch', 
								button_Active : 'Active', 
								button_Add : 'Add new', 
								button_Cancel : 'Cancel', 
								button_CopyPermissions : 'Copy Permissions', 
								button_Delete : 'Delete', 
								button_DeleteAll : 'Clear', 
								button_Export : 'Export', 
								button_Export_Helper : 'Please select the columns in the grid want to export.', 
								button_GoToHome : 'Back to Home', 
								button_Import : 'Import', 
								button_Ok : 'Ok', 
								button_OpenFile : 'Open', 
								button_Print : 'Print', 
								button_Save : 'Save', 
								button_Sent : 'Sent', 
								button_Success : 'Completed', 
								button_Update : 'Update', 
								button_View : 'View', 
								button_Void : 'Void', 
								chart_Cashflow : 'Cashflow', 
								chart_Revenue : 'Revenue for {0}', 
								chart_RevenueByBranch : 'Revenue by branch', 
								customer : 'Customer', 
								download : 'Download', 
								download_Driver : 'Download drivers', 
								download_ElectronicScale : 'Download Electronic Scale tool', 
								download_SilentPrinting : 'Download Silent printing', 
								downloadTemplate : 'Download template', 
								enum_Completed : 'Completed', 
								enum_Exception : 'Shipping Exceptions', 
								enum_Field_Book : 'Book, Comic book...', 
								enum_Field_BuildingMaterials : 'Steel , Building materials', 
								enum_Field_Coffee : 'Coffee , Karaok, Restaurant...', 
								enum_Field_Cosmetics : 'Spa, Cosmetics', 
								enum_Field_Drug : 'Drug, Medical equipment...', 
								enum_Field_Electronic : 'Electronic (Mobile, PC, Accessories...)', 
								enum_Field_Fashion : 'Fashion', 
								enum_Field_Interior : 'Wooden, The furniture...', 
								enum_Field_Other : 'Other business fields', 
								enum_Field_Retail : 'Retail (Supermarket, Grocery...)', 
								enum_Field_Stationary : 'Stationary', 
								enum_InProcess : 'In Process', 
								enum_InTransit : 'In Transit', 
								enum_OnOrder : 'On Order', 
								enum_ProductType_Composite : 'Composite', 
								enum_ProductType_Service : 'Service', 
								enum_ProductType_Standard : 'Standard', 
								enum_SmsBrandName : 'BrandName', 
								enum_SmsRandom : 'Random', 
								enum_TransactionType_AdjustedDebt : 'Adjusted debt', 
								enum_TransactionType_Gift : 'Gift', 
								enum_TransactionType_ProductDamage : 'Damage', 
								enum_TransactionType_Recieve : 'Recieve', 
								enum_TransactionType_ReduceDirectMaterial : 'Reduce direct materials', 
								enum_TransactionType_ReduceMaterial : 'Reduce Materials', 
								enum_TransactionType_Self : 'Self-use', 
								enum_TransactionType_ShippingCost : 'Shipping Cost', 
								enum_Void : 'Void', 
								enum_WaitingForConfirmation : 'Waiting for confirmation', 
								expenses : 'Expenses', 
								filter_7Days : 'Pass 7 Days', 
								filter_CustomRange : 'Custom range', 
								filter_ThisMonth : 'This Month', 
								filter_ThisQuarter : 'This Quarter', 
								filter_ThisYear : 'ThisYear', 
								filter_Today : 'Today', 
								filter_Yesterday : 'Yesterday', 
								group : 'Group', 
								hotline : 'Hotline 24/7', 
								inventoryCount : 'Inventory count', 
								keyboardShortcuts_AddNewCustomer : 'Add new customer', 
								keyboardShortcuts_AddNewOrder : 'Add new order', 
								keyboardShortcuts_Print : 'Preview', 
								kitchen : 'Kitchen', 
								label_AccessDenied : 'Access Denied', 
								label_Account : 'Account', 
								label_Account_Name : 'Account (Bank account number)', 
								label_Account_Transfer : 'Transfer', 
								label_AccountingTransaction_Description : 'Description', 
								label_AccountingTransaction_Partner : 'Partner', 
								label_AccountingTransactionGroup_ChooseGroup : '-- Select  category--', 
								label_ActiveRetailer : 'Active account', 
								label_Addby : 'Add by', 
								label_AddByCategory : 'Add by Category', 
								label_AddByPartnerBirthday : 'Add the partner has birthday on :', 
								label_AddByPartnerGroup : 'Add by partner group', 
								label_AddingToDebitAccount : 'Adding to debit account', 
								label_AddProductBySupplier : 'Find products', 
								label_Address : 'Address', 
								label_AfterPrinting : 'After printing?', 
								label_All : 'All', 
								label_AllBranchCanView : 'All branchs can view', 
								label_AllOfBranchs : 'All of branchs', 
								label_AllOfCustomers : 'All of customers', 
								label_AllOfUsers : 'All of users', 
								label_AllTime : 'Anytime', 
								label_Amount : 'Amount', 
								label_AmountReceived : 'Amount Received', 
								label_AssistantBy : 'Assistant by', 
								label_AssistantBy_Help : 'Assist sales staff', 
								label_Auto : 'Automatic', 
								label_Autogen : 'Autogen code', 
								label_AutomaticallyAddMembers : 'Automatically add members to group if achieve revenue conditions?', 
								label_AvailableDate : 'Available Date', 
								label_BarCode : 'BarCode', 
								label_BarCode_12Label : '12 Label 202x162mm Tomy 103', 
								label_BarCode_1Label : '1 Label 36x30mm/1.42x1.18 Inch', 
								label_BarCode_1Label50 : '1 Label 58x40mm/2.28x1.57 Inch', 
								label_BarCode_2Label : '2 Label', 
								label_BarCode_3Label : '3 Label 104x22mm/4.2x0.9 Inch', 
								label_BarCode_65Label : '65 Label A4 Tomy 145', 
								label_BarCodePrinterName : 'Barcode printer', 
								label_BartenderAPrinterName : 'Bartender [A] printer name', 
								label_BartenderAPrinterNameHelp : 'Bartender [A] printer name', 
								label_BartenderBPrinterName : 'Bartender [B] printer name', 
								label_BartenderBPrinterNameHelp : 'Bartender [B] printer name', 
								label_BartenderCPrinterName : 'Bartender [C] printer name', 
								label_BartenderCPrinterNameHelp : 'Bartender [C] printer name', 
								label_BartenderDPrinterName : 'Bartender [D] printer name', 
								label_BartenderDPrinterNameHelp : 'Bartender [D] printer name', 
								label_BasePrice : 'Original price', 
								label_BasePriceList : 'Original price', 
								label_Beginningdebt : 'Beginning debt', 
								label_BonusPoint : 'Bonus point', 
								label_BonusPoint_Help : 'Bonus point are number of points used to calculate commissions for employees', 
								label_BonusPointForAssistant : 'Bonus point for assistant', 
								label_BonusPointForAssistant_Help : 'Bonus point are number of points used to calculate commissions for assistants', 
								label_BookingCalendar : 'Booking Calendar', 
								label_Branch_Address : 'Branch Address', 
								label_Branch_IsOnline : 'Online Store?', 
								label_Branch_IsOnlineHelp : 'Only allow 1 Online Store in shop.', 
								label_Branch_Name : 'Branch Name', 
								label_Branch_Phone : 'Branch Phone', 
								label_Cash : 'Cash', 
								label_Cashflow_Balance : 'Balance', 
								label_Cashflow_Beginning : 'Beginning', 
								label_Cashflow_TotalPaymentVoucher : 'Payment voucher', 
								label_Cashflow_TotalReceiptVoucher : 'Receipt voucher', 
								label_CdKey_ActiveBranch : 'Activate branch', 
								label_CdKey_ActiveTime : 'Activation time use', 
								label_CdKey_Key : 'License key', 
								label_ChangeSellingPrice : 'Change selling price?', 
								label_Checkin : 'Checkin', 
								label_Checkout : 'Checkout', 
								label_Checkout_Timer : 'Checkout', 
								label_CheckPriceBook : 'Check price book', 
								label_ClickToEnterSerials : 'Enter Lot number and expiration date', 
								label_ClickToViewSerials : 'Click to view Lot number and expiration date', 
								label_ClosingBalance : 'Closing Balance', 
								label_Code : 'Code', 
								label_Commission : 'Commission', 
								label_Company : 'Company', 
								label_Component_Code : 'Component Code', 
								label_Component_Name : 'Component Name', 
								label_ComponentsInvalid : 'Components invalid or it has created infinite loop.', 
								label_Config_Printing : 'Config printing', 
								label_CostMethod_AVG : 'Avg', 
								label_CostMethod_Latest : 'Latest', 
								label_CostMethod_Static : 'Static', 
								label_CreatedBy : 'Created By', 
								label_CreatedDate : 'Created Date', 
								label_CurrentOrder : 'Current bill', 
								label_CurrentPrice : 'Current price', 
								label_Customer_Address : 'Customer Address', 
								label_Customer_Code : 'Customer Code', 
								label_Customer_Name : 'Customer Name', 
								label_Customer_Phone : 'Customer Phone', 
								label_Customerservice : 'Customer service', 
								label_Day : 'Day', 
								label_Debit : 'Debit', 
								label_Debt : 'Current Debt', 
								label_DebtInvoice : 'Debt Invoice', 
								label_Default : 'default', 
								label_Delivery : 'Delivery', 
								label_DeliveryDate : 'Delivery date', 
								label_Department : 'Department', 
								label_Description : 'Description', 
								label_Detail : 'Detail', 
								label_Discount : 'Discount', 
								label_DiscountByPoint : 'Discount by use point', 
								label_DiscountOnOrder : 'Discount on order', 
								label_DocumentCode : 'Document Code', 
								label_DocumentType : 'Method', 
								label_DontPrintEmptyPrice : 'Don\'t print empty price', 
								label_DontPrintLabel : 'Don\'t print labels', 
								label_DownloadTemplate : 'Download template', 
								label_DuplicateTabs : 'You have Register open on multiple tabs.', 
								label_ElectronicScale : 'Electronic Scale', 
								label_Endingdebt : 'Endingdebt', 
								label_Entercard : 'Enter your 365 card information.', 
								label_EnterSerial : 'Enter new Lot number', 
								label_EnterVerificationCode : 'Enter verification code', 
								label_Exceptinventories : 'Except inventories', 
								label_ExcessCash : 'Excess Cash', 
								label_Exchange : 'Exchange', 
								label_ExchangeRate : 'Exchange rate', 
								label_ExpirationDate : 'Expiration date', 
								label_ExpireIn : 'Expire In', 
								label_FeatureConfiguration_AllowChangeOrderItems : 'Allows the cashier to change product called?', 
								label_FeatureConfiguration_AllowChangeOrderItemsHelp : 'Allows the cashier to change product called?', 
								label_FeatureConfiguration_AllowChangePrice : 'Allow change price on selling screen', 
								label_FeatureConfiguration_AllowChangeSalespeople : 'Allows select salespeople', 
								label_FeatureConfiguration_AllowChangeSalespeopleHelp : 'Allows select salespeople', 
								label_FeatureConfiguration_AllowPrintPreview : 'Allow print preview order.', 
								label_FeatureConfiguration_AllowPrintPreviewHelp : 'Allow print preview order.', 
								label_FeatureConfiguration_BlockOfTimeToUseService : 'Block of time to use the service (minutes)', 
								label_FeatureConfiguration_BlockOfTimeToUseServiceHelp : 'The system will be charged for every {0} minute is set here.', 
								label_FeatureConfiguration_ChangeTimer : 'Allows user to change the Check-in/Check-out time?', 
								label_FeatureConfiguration_CostMethod : 'Cost  method', 
								label_FeatureConfiguration_CostMethodHelp : 'The default method is calculated based on last import price.', 
								label_FeatureConfiguration_DifferentiatedproductsbyWarehouse : 'Differentiated products for each warehouse?', 
								label_FeatureConfiguration_DifferentiatedproductsbyWarehouseHelp : 'Differentiated products for each warehouse?', 
								label_FeatureConfiguration_ElectronicWeightScaleCodeLength : 'Electronic weight scale code length', 
								label_FeatureConfiguration_ElectronicWeightScaleCodeLengthHelp : 'Number characters barcode separation of electronic weight  scales.', 
								label_FeatureConfiguration_IPFilterConfiguration : 'IPs Filter Configuration', 
								label_FeatureConfiguration_IPFilterConfigurationHelp : 'Only this ip addresses can access to your store (e.g. 8.8.8.8,8.8.4.4,...)', 
								label_FeatureConfiguration_LimitTransactionTime : 'Do not allow change transaction time', 
								label_FeatureConfiguration_LimitTransactionTimeHelp : 'Not allowed to set time of transaction, always use the current time', 
								label_FeatureConfiguration_NotAllowUpdateOrder : 'Not allow update order after (x) days', 
								label_FeatureConfiguration_NotAllowUpdateOrderHelp : 'Employee can\'t update order after x days', 
								label_FeatureConfiguration_QrCodeEnable : 'QR Codes Enable', 
								label_FeatureConfiguration_StockControlWhenSelling : 'Stock control when selling', 
								label_FeatureConfiguration_StockControlWhenSellingHelp : 'Tracking the quantity of products sold for businesses selling.', 
								label_FeatureConfiguration_TurnOffReturnHistory : 'Reason for cancellation / return?', 
								label_FeatureConfiguration_TurnOffReturnHistory_Help : 'Reason for cancellation / return?', 
								label_Female : 'Female', 
								label_Filter_Account : 'Filter by account', 
								label_Filter_AllowOnlineSales : 'Allow Online sales', 
								label_Filter_Attributes : 'Filter by Attributes', 
								label_Filter_CashflowGroup : 'Filter by groups', 
								label_Filter_Date : 'Filter by date', 
								label_Filter_DocumentStatus : 'Filter by status', 
								label_Filter_ExcessInventory : 'Excess inventory', 
								label_Filter_Group : 'Filter by Group', 
								label_Filter_InStock : 'In stock', 
								label_Filter_Inventory : 'Filter by Inventory', 
								label_Filter_LowerInventory : 'Lower inventory', 
								label_Filter_NotFilter : 'Not filter', 
								label_Filter_Partner : 'Filter by partner', 
								label_Filter_PartnerType : 'Filter by Partner Type', 
								label_Filter_ProductType : 'Filter by Type', 
								label_Filter_User : 'Filter by Users', 
								label_Filter_Users : 'Filter by users', 
								label_Filterbycategory : 'Filter by category', 
								label_FirstTime : 'The first {0}  = {1}.', 
								label_FocusToQuantity : 'Focus to quantity input', 
								label_From : 'From', 
								label_FromDate : 'From Date', 
								label_Gender : 'Gender', 
								label_GlobalInventory : 'Global Inventory', 
								label_GrandTotal : 'Grand Total', 
								label_Group_ChooseGroup : '-- Select Group--', 
								label_Group_Name : 'Group Name', 
								label_Group_Parent : 'Parent Group', 
								label_Guest : 'Guest', 
								label_Guide : 'Guide', 
								label_Help_CopyTotal : 'Copy from Total field', 
								label_Hour : 'Hour', 
								label_IdentityCardNumber : 'Identity card number', 
								label_Images : 'Images', 
								label_Import_ExcludeOnHand : 'Don\'t update Onhand & Cost?', 
								label_Import_Help : 'Instructions for completing the column values ​​?', 
								label_Import_Limit : 'You can\'t exceed 1000 for once imported products', 
								label_Import_Reset : 'Are you sure to reset current data on excel grid?', 
								label_Import_SkipExists : 'Skip products already exists', 
								label_Import_Validate : 'Line <strong>{0} </strong>, <strong>{1} </strong> is Invalid.', 
								label_IncludeToFinancialReport : 'Include to financial report?', 
								label_IncludeToFinancialReport_Helper : 'These revenues or expenses in this group have been included in financial statement?', 
								label_IncomeStatement_01 : '01. Gross revenue', 
								label_IncomeStatement_02 : '02. Revenue deductions', 
								label_IncomeStatement_02_1 : '    - Sales returns', 
								label_IncomeStatement_03 : '03. Net revenue (01-02)', 
								label_IncomeStatement_04 : '04. Cost of goods sold', 
								label_IncomeStatement_05 : '05. Gross profit (03-04)', 
								label_IncomeStatement_06 : '06. Extraordinary income', 
								label_IncomeStatement_07 : '07. Extraordinary expenses', 
								label_IncomeStatement_08 : '08. Operating profit (05+06-07)', 
								label_Index : 'Index', 
								label_Indexing : 'Indexing', 
								label_Information : 'Info', 
								label_Input : 'Input', 
								label_InventoryCount_ActualCount : 'Count', 
								label_InventoryCount_AdjustmentDate : 'Adjustment Date', 
								label_InventoryCount_SetOutOfStock : 'Items not in stock inventory will be considered as out of stock ?', 
								label_Inwords : 'In words', 
								label_IPAddressPrintServer : 'IP address of your print server?', 
								label_IPAddressPrintServerHelp : 'IP address of your print server, you can print via Ipad, Android over local network.', 
								label_KitchenAPrinterName : 'Kitchen [A] printer name', 
								label_KitchenAPrinterNameHelp : 'Kitchen [A] printer name', 
								label_KitchenBPrinterName : 'Kitchen [B] printer name', 
								label_KitchenBPrinterNameHelp : 'Kitchen [B] printer name', 
								label_KitchenCPrinterName : 'Kitchen [C] printer name', 
								label_KitchenCPrinterNameHelp : 'Kitchen [C] printer name', 
								label_KitchenDPrinterName : 'Kitchen [D] printer name', 
								label_KitchenDPrinterNameHelp : 'Kitchen [D] printer name', 
								label_KitchenProcessed : 'Have processed', 
								label_LadingCode : 'LadingCode', 
								label_LargePrintLayout : 'Printer page size (A4, A5...)', 
								label_LargePrintLayout_Change : 'The system was configured  {0}', 
								labeL_LastTransaction : 'Last transaction', 
								label_LeadOwner : 'Managed by', 
								label_ListOf : 'List of {0}', 
								label_ListOfSerials : 'List of Lot number and expiration date', 
								label_LoginToDashboard : 'Dashboard', 
								label_LookupLot : 'Look up all Lot number & expiry', 
								label_Male : 'Male', 
								label_ManufactureStep1 : 'Declare input materials', 
								label_ManufactureStep2 : 'Declare finished output', 
								label_Manufacturing_ManufacturingDate : 'Manufacturing Date', 
								label_Manufacturing_ProducerPrice : 'Producer Price', 
								label_Manufacturing_TabMaterials : 'List of Materials', 
								label_Mart14 : 'Label for SuperMarket', 
								label_MaterialReduction : 'Material reduction', 
								label_Minute : 'Minute', 
								label_ModifiedBy : 'Modified By', 
								label_ModifiedDate : 'Modified Date', 
								label_Month : 'Month', 
								label_MoreBarCode : 'More BarCode', 
								label_MoreTime : '{0} more  = {1}.', 
								label_Name : 'Name', 
								label_Nameofvalue : 'Name of Value', 
								label_New : 'new', 
								label_Notebook_Name : 'Notebook Name', 
								label_NotRequired : 'Not required', 
								label_NumberOfGuests : 'Number of guests', 
								label_NumberOfOrders : 'Number Of Orders', 
								label_OldDebt : 'Old Debt', 
								label_OnlinePrice : 'Online Price', 
								label_OnlinePricingCalculator : 'Online Pricing Calculator', 
								label_OnOrderSounds : 'Notify sound ?', 
								label_OpeningBalance : 'Opening Balance', 
								label_Or : 'Or', 
								label_Order_Code : 'Order code', 
								label_Order_Date : 'Order date', 
								label_OrderingSounds : 'Ordering sounds', 
								label_OrderOffline : 'Offline order (Wait to sync)', 
								label_OrderOnline : 'Order online', 
								label_Orderstock_Date : 'Orderstock Date', 
								label_Other : 'Other', 
								label_OtherAccounts : 'Other accounts', 
								label_OtherInformation : 'Other information', 
								label_OtherTransaction_Date : 'Transaction Date', 
								label_Output : 'Output', 
								label_PageSize : 'Page Sizw', 
								label_Partner_Address : 'Partner Address', 
								label_Partner_Code : 'Partner Code', 
								label_Partner_Name : 'Partner Name', 
								label_Partner_Password : 'Password (Order Online)', 
								label_Partner_PasswordHelp : 'Partner can login to system with Code & Password to order product online.', 
								label_Partner_Phone : 'Partner Phone', 
								label_Partner_TaxCode : 'Tax Code', 
								label_Partner_TransactionLimit : 'Total transaction may see a maximum of 365 days', 
								label_Paybooks : 'Paybooks', 
								label_Payment : 'Payment', 
								label_Permission_AccountingTransaction : 'Cash flow', 
								label_Permission_Branch : 'Branch Management', 
								label_Permission_DeliveryOrder : 'Delivery order - COD', 
								label_Permission_GiftCard : 'Gift Card', 
								label_Permission_InventoryCount : 'Inventory Count', 
								label_Permission_Manufacturing : 'Manufacturing Management', 
								label_Permission_Order : 'Orders', 
								label_Permission_OtherTransaction : 'Other Transaction', 
								label_Permission_Partner : 'Partner Management', 
								label_Permission_PointConfig : 'Point Configuration', 
								label_Permission_PosParameter : 'Feature Configuration', 
								label_Permission_PriceBook : 'Price Books', 
								label_Permission_PrintTemplate : 'Print Templates', 
								label_Permission_Product : 'Product Management', 
								label_Permission_PurchaseOrder : 'Order Stock', 
								label_Permission_PurchaseOrderReturn : 'Return to suppliers', 
								label_Permission_Report : 'Reports', 
								label_Permission_Return : 'Returns', 
								label_Permission_Room : 'Tables/Rooms Management', 
								label_Permission_Sm : 'SMS Marketing', 
								label_Permission_Transfer : 'Internal stock transfer', 
								label_Permission_User : 'User Management', 
								label_Permission_Voucher : 'Voucher', 
								label_Phone : 'Phone', 
								label_PlanToChangeCost : 'Plan to change cost', 
								label_Point : 'Bonus Point', 
								label_Point_Exchangepoints : 'Exchange points', 
								label_PointConfig_ExcludeOrderDiscount : 'Don\'t convert orders have discount?', 
								label_PointConfig_ExcludeProductDiscount : 'Don\'t convert products have discount?', 
								label_PointConfig_PointToValue : '1 point is equivalent to {0}', 
								label_PointConfig_ValueToPoint : 'Spending {0} earns 1 point', 
								label_PoleDisplay : 'Pole Display Com Port (COM1,COM2,COM3...)', 
								label_Position : 'Position', 
								label_PreOrderCode : 'The first two characters distinguish the bill (Default: HD ...)', 
								label_PreProductCode : 'The first two characters distinguish the product (Default: HH ...)', 
								label_Price : 'Price', 
								label_PriceBook_LimitByBranchs : 'Limit by branchs', 
								label_PriceBook_LimitByCustomerGroups : 'Limit by customer groups', 
								label_PriceBook_LimitByUsers : 'Limit by users', 
								label_PriceBook_List : 'Pricebook List', 
								label_PriceBook_Name : 'Price Book Name', 
								label_PriceDiff : 'Price Difference', 
								label_PriceForAll : 'Price', 
								label_PriceForRoom : 'Price for room', 
								label_Pricing_FreeTrial : 'Free Trial', 
								label_Pricing_Premium : 'Premium', 
								label_PricingCalculator : 'Pricing Calculator', 
								label_Print80DPI : 'PRP 80,58mm Receipt printer resolution (DPI, Default: 203dpi)', 
								label_PrintA4DPI : 'A4/A5 Printer Resolution (DPI, Default: 600dpi)', 
								label_PrintAfterPay : 'Print after click Payment', 
								label_PrintKitchen80DPI : 'PRP 80,58mm Kitchen printer resolution (DPI, Default: 203dpi)', 
								label_PrintTemplates_Display : 'Display', 
								label_PrintTemplates_Token : 'Token', 
								label_PrintToBartenderA : 'Print to bartender [A]', 
								label_PrintToBartenderB : 'Print to bartender [B]', 
								label_PrintToBartenderC : 'Print to bartender [C]', 
								label_PrintToBartenderD : 'Print to bartender [D]', 
								label_PrintToKitchenA : 'Print to kitchen [A]', 
								label_PrintToKitchenB : 'Print to kitchen [B]', 
								label_PrintToKitchenC : 'Print to kitchen [C]', 
								label_PrintToKitchenD : 'Print to kitchen [D]', 
								label_PrintTransfer : 'Transfer', 
								label_Product_Active : 'Stop trading this item?', 
								label_Product_AttributeName : 'Attribute Name(Color,Size...)', 
								label_Product_Attributes : 'Attributes', 
								label_Product_BaseUnit : 'Base Unit', 
								label_Product_Code : 'Product Code', 
								label_Product_Coefficient : 'Coefficient', 
								label_Product_CoefficientHelp : 'When selling, the quantity will be multiplied coefficients', 
								label_Product_Components : 'Components', 
								label_Product_ConversionValue : 'Conversion Value', 
								label_Product_Cost : 'Cost', 
								label_Product_DontSellingOnline : 'Not allow to selling Online', 
								label_Product_FirstBlock : 'Number of the first blocks?', 
								label_Product_Hidden : 'Hidden on Sell screen', 
								label_Product_HiddenHelp : 'This product will be hidden on sell screen.', 
								label_Product_History : 'History', 
								label_Product_InStock : 'In Stock', 
								label_Product_IsPercentage : 'Selling prices = (%) of Total on Order', 
								label_Product_IsPercentage_Helper : 'Selling prices are calculated as a percentage of the value of orders', 
								label_Product_IsPriceForBlock : 'Is priceset for per block?', 
								label_Product_IsPriceForBlock_Helper : 'Price is set for per block instead of a hour', 
								label_Product_LargeUnit : 'Large Unit', 
								label_Product_LargeUnitCode : 'Large Unit Code', 
								label_Product_Lastinventory : 'Last inventory', 
								label_Product_MaxQuantity : 'Max Quantity', 
								label_Product_MinQuantity : 'Min Quantity', 
								label_Product_Name : 'Product Name', 
								label_Product_NormsInventory : 'Norms Inventory', 
								label_Product_Note : 'Product Note on Order', 
								label_Product_OnHand : 'On Hand', 
								label_Product_Online_Helper : 'This product will be displayed in the online store', 
								label_Product_OnlinePriceLargeUnit : 'Large Unit Online Price', 
								label_Product_OnOrder : 'On Order', 
								label_Product_OrderQuickNotes : 'Order quick notes (Note1 , Note 2...)', 
								label_Product_OtherSettings : 'Other settings', 
								label_Product_OutStock : 'Out Stock', 
								label_Product_Popular : 'Popular products', 
								label_Product_PriceAppliesTo : 'The price applies to', 
								label_Product_PriceAppliesToEnd : ' the next day they started charging to use', 
								label_Product_PriceFor : 'Price for the first {0} blocks', 
								label_Product_PriceLargeUnit : 'Large Unit Price', 
								label_Product_Printer : 'Printer name', 
								label_Product_RecentPurchasePrice : 'Recent Purchase Price', 
								label_Product_SellingOnline : 'Selling Online', 
								label_Product_Serial : 'Lot number and expiration date Management', 
								label_Product_Serial_Helper : 'Inventories are calculated for each lot number and expiration date.', 
								label_Product_SerialNumbers : 'Lot number', 
								label_Product_SetHotel : 'Set for Lodging - Hotels', 
								label_Product_SpecialTime : 'Set up a special time slot', 
								label_Product_Specifications : 'Specifications', 
								label_Product_Split : 'Don\'t Split products on cart?', 
								label_Product_SplitForSalesOrder : 'Split for sales order', 
								label_Product_SplitForSalesOrder_Helper : 'Split Based on Item Quantity in Sales order', 
								label_Product_TimeNote : 'Please do not set the two parameters on the ( blank ) if the timer operation of the stores are no exception .', 
								label_Product_Timer : 'Quantity is calculated according to the time of use', 
								label_Product_TimerHelp : 'This option is used for items such as computer usage time : time rented a room , singing karaok Time ... When added to sales screen system will automatically charge use time .', 
								label_Product_Type : 'Product Type', 
								label_Product_Unit : 'Unit', 
								label_Profit : 'Profit', 
								label_Promotion : 'Promotion', 
								label_Province : 'Province', 
								label_Provisionalorder : 'Provisional order', 
								label_PurchaseOrderConfirm : 'PO Confirmation', 
								label_Purchaseplan : 'Purchase plan', 
								label_PurchasePrice : 'Purchase Price', 
								label_Qty : 'Qty', 
								label_Quantity : 'Quantity', 
								label_QuickFilter : '--- Quick filter ---', 
								label_QuickSearch : 'Quick Search', 
								label_Rates : 'Rates', 
								label_ReceiptPrinterName : 'Receipt printer name', 
								label_RecentActivities : 'Recent Activities', 
								label_RemoveNotAchieved : 'Remove members from group if not achieve revenue conditions?', 
								label_Report_Time : 'Time', 
								label_Report_Total : 'Total value', 
								label_Report_TotalAfterDiscount : 'Total value (After discount)', 
								label_Reported : 'Reported', 
								label_Restaurant_ChangeTable : 'Change table', 
								label_Restaurant_PrintRefund : 'Refund items', 
								label_Restaurant_PrintToCooker : 'Print to cooker', 
								label_Retailer_Address : 'Business Address', 
								label_Retailer_ExpiryDate : 'Expiry Date', 
								label_Retailer_Name : 'Business Name', 
								label_Retailer_Phone : 'Business Phone', 
								label_Retailer_TelephoneOfShopkeepers : 'Telephone of shop keepers', 
								label_Return_Code : 'Return code', 
								label_Return_Desc1 : 'Client request', 
								label_Return_Desc2 : 'Bad action', 
								label_Return_ReturnDate : 'Return date', 
								label_Return_Total : 'Total refunds', 
								label_Return_Totalexpenditure : 'Total expenditure', 
								label_ReturnByOrder : 'Return by order', 
								label_ReturnMoney : 'Return money', 
								label_Room : 'Tables / Rooms', 
								label_Room_Menu : 'Menu', 
								label_Room_Name : 'Table or Room name', 
								label_Room_Position : 'Position', 
								label_Room_Printer : 'Printer name (Printed directly in the room / Tables)', 
								label_Room_Select : '--- Select Table/Room ---', 
								label_RoomClickHelper : '<strong>Double Click</strong> to open menu!', 
								label_Scheduler : 'Customer service calendar', 
								label_Search : 'Search', 
								label_SearchCustomer : 'Search customers', 
								label_SearchMenu : 'Search menu', 
								label_SearchPartner : 'Search partners', 
								label_SearchPartner_NotExisting : 'Partner not existing in your shop.', 
								label_SearchProduct : 'Search product', 
								label_SearchProduct_NotExisting : 'Product not existing in your shop.', 
								label_SearchSerial_NotExisting : 'Lot number {0} not existing or out of stock.', 
								label_SearchSerials : 'Search Lot number', 
								label_SearchSupplier : 'Search supplier', 
								label_SelectFile : 'Select File', 
								label_SellLayout : 'The interface supports touch screen ?', 
								label_SellLayoutRightToLeft : 'Right-to-Left Layout', 
								label_SendRequest : 'Send request', 
								label_SessionTimeOut : 'Your session has timed out please login again.', 
								label_ShippingAddress : 'Shipping address', 
								label_ShippingCost : 'Shipping cost', 
								label_ShippingPartner_Code : 'Shipping partner code', 
								label_SmallPrintLayout : 'Printer page size (58mm,80mm)', 
								label_SmartSearch : 'Smart Search', 
								label_Sms_Birthday : 'Birthday', 
								label_Sms_BrandName : 'Sms Brandname', 
								label_Sms_BrandNameHelp : 'As message displays the company name in the sender section', 
								label_Sms_Content : 'Content', 
								label_Sms_Exception : 'Messages must not exceed 160 characters .', 
								label_Sms_Length : 'Length', 
								label_Sms_MaximumSms : 'You can not send more than {0} messages , please contact the sales staff to refill the account.', 
								label_Sms_Messages : 'Messages', 
								label_Sms_PerMessage : 'Per Message', 
								label_Sms_PriceList : 'Price List', 
								label_Sms_Random : 'Messages random head', 
								label_Sms_RandomHelp : 'Is the message displayed phone number in directory format 09xxxxx sender', 
								label_Sms_Receiver : 'Receiver', 
								label_Sms_Remaining : 'Remaining', 
								label_Sms_Sent : 'Sent', 
								label_Sms_TotalPartner : 'Total partners', 
								label_Sms_Type : 'Sms Type', 
								label_SoldBy : 'Sold By', 
								label_SoldBy_Help : 'Assign salespeople', 
								label_Source : 'Copy from', 
								label_Source_Invalid : 'Can\'t copy permission from this user.', 
								label_SpecialPrice : 'Special price for room', 
								label_Split : 'Split', 
								label_SpreadsheetsQuantity : 'Spreadsheets quantity, weight', 
								label_StartTimer : 'Start the timer service', 
								label_Status : 'Status', 
								label_StopTimers : 'Stop timers ?', 
								label_SubTotal : 'Sub Total', 
								label_Supplier_Code : 'Supplier code', 
								label_SwichBalanceScale : 'Change between : Balance Scale <=> Default Search', 
								label_Sync : 'Sync', 
								label_Sync_Error : 'Can\'t sync', 
								label_Sync_Success : 'Synchronous order {0} successfully .', 
								label_Task : 'Task', 
								label_Task_Description : 'Description', 
								label_Task_DueDate : 'Due Date', 
								label_Task_Subject : 'Subject', 
								label_To : 'To  ', 
								label_ToDate : 'To Date', 
								label_Today_Expiry : 'Products expiring next 30 days', 
								label_Today_Online : 'Online Orders', 
								label_Today_Return : 'Sales Return', 
								label_Today_Return_Coffee : 'Return', 
								label_Today_Return_Value : 'Return value', 
								label_Today_Revenue : 'Revenue', 
								label_Total : 'Total', 
								label_TotalCommission : 'Total commission', 
								label_TotalDebt : 'Total debt', 
								label_TotalDiff : 'Total difference', 
								label_TotalGuests : 'Total Guests', 
								label_TotalLineItem : 'Total On Line Item', 
								label_TotalLineItemBeforeDiscount : 'Total On Line Item(Before Discount)', 
								label_TotalPayment : 'Total Payment', 
								label_TotalProfit : 'Total profit', 
								label_TotalQuantity : 'Total Quantity', 
								label_TotalRevenue : 'Total revenue', 
								label_TotalSupplierRefunds : 'Supplier refunds', 
								label_Transaction_History : 'Transaction history', 
								label_TransactionDate : 'Transaction Date', 
								label_Transactionvalue : 'Transaction value', 
								label_TransDate : 'Trans Date', 
								label_Transfer_BranchValid : 'Please check brand to recieve', 
								label_Transfer_ButtonReceive : 'Receive', 
								label_Transfer_ButtonSent : 'Sent', 
								label_Transfer_Receive : 'To branch', 
								label_Transfer_Sender : 'Sent from branch', 
								label_TrueFalseHelper : '0 = False , 1 = True', 
								label_Undefined : 'Undefined', 
								label_UpdateCost : 'Update Cost', 
								label_User_BacktoLogin : 'Back to login', 
								label_User_ConfirmPassword : 'Confirm Password', 
								label_User_DOB : 'Birthday', 
								label_User_EmailAddress : 'Email address', 
								label_User_Forgotyourpassword : 'Forgot your password ?', 
								label_User_ForgotyourpasswordGuide : 'Enter your email address to recover your password.', 
								label_User_ForgotyourpasswordNew : 'Enter your new password.', 
								label_User_IsAdmin : 'Admin', 
								label_User_Loginto : 'Login to', 
								label_User_Newinpos : '365 Software JSC.', 
								label_User_NewPassword : 'New Password', 
								label_User_Password : 'Password', 
								label_User_Rememberme : 'Remember me', 
								label_User_ResetPassword : 'Reset password', 
								label_User_SetPermission : 'Set Permissions', 
								label_User_Signin : 'Sign in', 
								label_User_Signout : 'Sign out', 
								label_User_Username : 'Username', 
								label_User_UsernameOrEmail : 'Username or Email', 
								label_Using : 'Room Status', 
								label_Value : 'Value', 
								label_ViewByRoom : 'View by Table/Room', 
								label_ViewCost : 'View Cost', 
								label_Voucher_Code : 'Voucher code', 
								label_WarrantyServiceCare : 'Warranty & service care', 
								label_Weight : 'Weight', 
								label_Year : 'Year', 
								manufacturing : 'Manufacturing', 
								menu_BranchManagement : 'Branch Management', 
								menu_Cashflow : 'Cash flow', 
								menu_ChangeBranch : 'ChangeBranch', 
								menu_ChangeBranchHelper : 'Select a Branch', 
								menu_ClearSampleData : 'Clear sample data', 
								menu_ClearSampleData_Confirm : 'Are you sure you want to delete all data ?', 
								menu_CommissionReport : 'Commission reports', 
								menu_ConfirmationAndAutoPrint : 'Confirmation & Automatically print', 
								menu_CopyKitchen : 'Make a copy for Kitchen tikets', 
								menu_CopyReceipt : 'Make a copy for Receipts', 
								menu_Customers : 'Customers', 
								menu_DailyReport : 'Daily Report', 
								menu_Dashboard : 'Dashboard', 
								menu_Expirywarning : 'Expiry warning', 
								menu_Extra : 'Extra/Topping', 
								menu_FeatureConfiguration : 'Feature Configuration', 
								menu_FinancialReport : 'Financial Report', 
								menu_History : 'History', 
								menu_InternalStockTransfer : 'Internal Stock Transfer', 
								menu_InventoryCount : 'Inventory Count', 
								menu_InventoryReport : 'Inventory Report', 
								menu_KeyboardShortcuts : 'Keyboard Shortcuts', 
								menu_Kitchen : 'Status Kitchens', 
								menu_LiabilitiesReport : 'Liabilities Report', 
								menu_ListOfPartners : 'List of partners', 
								menu_ListOfProduct : 'List of Products', 
								menu_Logout : 'Sign out', 
								menu_Manufacturing : 'Manufacturing Management', 
								menu_MaterialUsage : 'Material Usage', 
								menu_MiniCRMReport : 'Customer care report', 
								menu_MultiBranchReport : 'Multi Branch Reports', 
								menu_NotebookSales : 'Notebook sales', 
								menu_Orders : 'Orders', 
								menu_OrderStock : 'Order Stock', 
								menu_OtherTransaction : 'Other Transaction', 
								menu_Partners : 'Partners', 
								menu_PriceBook : 'Price Books', 
								menu_PrintBarcodeLabels : 'Print Barcode Labels', 
								menu_PrintTemplates : 'Print Templates', 
								menu_Processingorders : 'Processing orders', 
								menu_Products : 'Products', 
								menu_Profile : 'Profile', 
								menu_QrCode : 'Configuring the QRCode', 
								menu_Reporting : 'Reporting', 
								menu_Restaurant : 'Restaurant', 
								menu_Returns : 'Sales returns', 
								menu_ReturnsReport : 'Returns report', 
								menu_ReturnToSupplier : 'Return to suppliers', 
								menu_SalesAnalysis : 'Sales Analysis', 
								menu_SalesReport : 'Sales Report', 
								menu_Screensforcashiers : 'Screens for cashiers', 
								menu_Screensforwaiter : 'Screens for waiters', 
								menu_Sell : 'Sell', 
								menu_Served : 'Served', 
								menu_Settings : 'Settings', 
								menu_ShippingPartners : 'Shipping Partners', 
								menu_SMSMarketing : 'SMS Marketing', 
								menu_splitPrinting : 'Cut each item when print to cooker.', 
								menu_StockorderReport : 'Stockorder Reports', 
								menu_StoreSettings : 'Store Settings', 
								menu_Suppliers : 'Suppliers', 
								menu_Transactions : 'Transactions', 
								menu_UserManagement : 'User Management', 
								menu_UserProfile : 'User Profile', 
								message_AccessDenied : 'You are not authorized to access this function.', 
								message_ActivationSuccessful : 'You have successfully activate the account , the new expiry date is : { 0 }', 
								message_Activities_InventoryCount : 'created Inventory count with code', 
								message_Activities_Manufacturing : 'created Manufacturing with code', 
								message_Activities_Order : 'created Order with value', 
								message_Activities_Orderstock : 'created Orderstock with value', 
								message_Activities_ProductDamage : 'created Other transaction  items in document', 
								message_Activities_Receive : 'received products from document', 
								message_Activities_Return : 'created return with value', 
								message_Activities_ReturnToSupplier : 'created return to supplier with value', 
								message_Activities_StockTransfer : 'created Stock transfer with code', 
								message_BarCodeMax : 'You can only print up to 1000 barcodes', 
								message_Branch_CanNotDelete : 'Shop must have at least 1 branch.', 
								message_Cashflow_UnableChangePartner : 'Unable to change partners , please delete document & recreate .', 
								message_Category_Level : 'System only allow maximum 2 levels of categories.', 
								message_ChangeBranch : 'You have changed to branch : {0}', 
								message_ClearCache_OpenLink : 'See instructions', 
								message_Components_WaringComposite : '<strong>Attention !</strong> Components of composite product will be reduced when sale.', 
								message_Components_WaringShowProductInBranch : '<strong>Attention !</strong>You can set differentiated products for each warehouse by <a href="/#/FeatureConfiguration">Settings Function</a>.', 
								message_Components_WaringStandard : '<strong>Attention !</strong> Components of product will be reduced in the production process.', 
								message_CustomerOrdering_Help : 'This screen is used for employees to record customer calls menu .', 
								message_CustomerOrdering_Return : 'Items returned nonexistent or exceed the amount already ordered.', 
								message_DataInvalid : '{0} invalid.', 
								message_DataNotExists : '{0} does not exist.', 
								message_DeleteReferenceDataUnsuccessfully : 'Cannot delete currently used data.', 
								message_DeleteSuccess : 'Data deleted successfully', 
								message_DontSetupIdentityCardNumber : 'You have not set the Identity Card Number  for employees', 
								message_DuplicateData : '{0} is already existed.', 
								message_EmptyProduct : 'No product in shop. Please return to management screen to create items.', 
								message_EmptyProductRoom : 'No product or room in shop. Please return to management screen to create items.', 
								message_EmptyProductTitle : 'Notice', 
								message_ErrorShowOnBranch : 'Please switch to the same warehouse to add product.', 
								message_ErrorSummary : 'An error occurs in data updating process.', 
								message_Featuresupgraded : 'Features upgraded', 
								message_Featuresupgraded_Content : 'Update required please clear your browser cache to run the latest update', 
								message_FileSizeLimit : 'The file size can not exceed {0}.', 
								message_Firewall : 'Shop owner has blocked access from this IP addresses.', 
								message_Group_InvalidParentValues : 'Invalid Parent Values', 
								message_HasExpired : 'Shop has expired on {0}.<br>Please contact {1} for further assistance or <a href="/Signin/Active"><strong> click here </strong></a> to pay a renewal payment.', 
								message_HasServed : '{0} has sent requests new menu.', 
								message_InventoryCount_DirectUpdate : 'Direct update {0} from product management', 
								message_InventoryTracking_MaterialsDesc : 'Materials for manufacturing', 
								message_IsOnline : '{0} is online to track sales.', 
								message_LimitData : 'You only add up to  {0} {1}.', 
								message_LimitedUsage : '{0} account feature limited:<br/>- {1} Products <br/>- {2} Branchs <br/>- {3} Orders<br/>Please contact <strong>{4}</strong>  to upgrade account.', 
								message_Modal_ConfirmCompleted : 'System will be update inventory after document is completed. Do you want complete this document?', 
								message_Modal_ConfirmHeader : 'Confirm', 
								message_Modal_DeleteHeader : 'Delete confirmation ?', 
								message_Modal_Message : 'Are you sure you want to delete <strong>{0}</strong> ?', 
								message_Modal_ReplaceOrder : 'This order has newer updates from other devices, the system automatically updates this version.', 
								message_Modal_SMSCompleted : 'System will be reduced SMS  after document is completed. Do you want complete this document?', 
								message_NoProductInCategory : 'Don\'t have any product in this category.', 
								message_NoRoomInCategory : 'Don\'t have any room in this category.', 
								message_Notebook_Help : 'Creation of package goods , while sales this package simply select items in the package will give the order . For example, maintenance package , Manual medicine , Gift Wrapping ...', 
								message_OfflineSave : 'No internet connection. Transaction is temporary saved on computer.', 
								message_OrderIsBeingProcessed : 'This order is being processed', 
								message_PaymentFor : 'Payment for document {0}', 
								message_PreventTimestampUpdate : 'You can not update documents exceeding {0} days compared with the current time', 
								message_PreventUpdateDocument : 'You are only allowed to update the document after {0} minutes', 
								message_Product_ValidateComposite : 'Item components are required for Composite product', 
								message_Product_ValidateUnit : 'Base unit field is required.', 
								message_QRCodeConfig : 'QR code is not enabled, please open Settings to configuration.', 
								message_QRCodeOnline : 'QR Code only effect when Internet connection', 
								message_Retailer_Renew : 'You have {0} days left on your trial. Activate your account now.', 
								message_SaveSuccess : 'Data update successfully', 
								message_SetupForFirstTime : 'Setup shop for first time', 
								message_SetupForFirstTime_ChooseField : 'Choose the right business field for your shop?', 
								message_SetupForFirstTime_GenerateSampleData : 'Do you want generate sample data?', 
								message_SynchronizingSuccess : 'Synchronizing Success', 
								message_Tray : 'You don\'t have the 365-Tray tool installed to support printing, contact 1900.636.680 for detailed instructions.', 
								message_UnauthorizedObjectAccess : 'No access to {0} in {1} with user {2}.', 
								message_UnauthorizedPropertyAccess : 'You don\'t have permission to excute this function.', 
								message_UnauthorizedRecordAccess : 'User {0} is not allowed to access record.', 
								message_Upgrade : 'The system has been updated to the new version, please press CTRL + F5 to upgrade.', 
								message_User_AccountLocked : 'Your account has been locked.', 
								message_User_AdminAccess : 'This is the master administrator account, with access to all features.', 
								message_User_CheckEmail : 'Please check your email for instructions on how to reset your password.', 
								message_User_EmailRequired : 'An email address is required.', 
								message_User_EmptyPassword : 'You haven\'t entered password.', 
								message_User_ForgotPasswordEmailNotExist : 'The email account that you tried to reset password does not exist...', 
								message_User_InvalidSessionKey : 'Invalid session key or session key has expired, please try again.', 
								message_User_NoBranchSelect : 'You haven\'t selected branch.', 
								message_User_ResetPasswordSuccessfully : 'Password has been reset successfully, you can login with new  password.', 
								message_User_WaringGrantAccess : '<strong>Attention !</strong> You must grant permissions to access your shop after created user.', 
								message_User_WrongLogon : 'The username and/or password is invalid.', 
								message_User_WrongNewPassword : 'Please check that you\'ve entered and confirmed your password.', 
								message_ValidateCartEmpty : 'Don\'t have any product on list.', 
								message_ValidateCashflow : 'Amount value and Group are required.', 
								message_ValidateCdKey : 'License key is not valid or has been used, please check the information.', 
								message_ValidateCustomer : 'Please select a customer.', 
								message_ValidateOnHand : '<strong>{0}</strong> is out of stock.', 
								message_ValidatePrinter : 'You don\'t config any printer name, please go to Feature Configuration to set printer.', 
								message_ValidateRoomEmpty : 'Please select a Room or Table to sent request.', 
								message_ValidateRoomHasTimer : 'This room has not set timer product service, please set in the room management.', 
								message_ValidateSummary : 'Please input all the information before saving.', 
								message_VerificationCodeValid : 'Verification code is not valid.', 
								million : 'million', 
								notebook : 'Notebook', 
								order : 'Order', 
								orderstock : 'Orderstock', 
								otherTransaction : 'Other Transaction', 
								paymentVoucher : 'Payment voucher', 
								pricebook : 'Price book', 
								product : 'Product', 
								receiptVoucher : 'Receipt voucher', 
								report_BestCustomers : 'Best Customers', 
								report_BranchProfit : 'Profit By Branch', 
								report_BuyingHabits : 'Buying Habits', 
								report_CashBook : 'CashBook', 
								report_COD : 'Delivery Costs', 
								report_Commissionforstaffs : 'Commission for staffs', 
								report_CustomerProfit : 'Profit by customers', 
								report_CustomerReturnProducts : 'Customer return products', 
								report_DebtByOrder : 'Statement of debt by order', 
								report_Difference : 'Difference', 
								report_DirectMaterialUsage : 'Material Usage (Sell)', 
								report_EndOfDay : 'End Of Day Report', 
								report_GrossingProducts : 'Grossing products', 
								report_HighProfitsReport : 'High Profits', 
								report_IncomeStatement : 'Income Statement', 
								report_Lot : 'Lot & Expiration date', 
								report_MaterialUsage : 'Material Usage (Manufacturing)', 
								report_MiniCRMBuyers : 'Buyers in the period', 
								report_MiniCRMInfo : 'List Of Customers', 
								report_MiniCRMReturn : 'Customer not returns', 
								report_MultiBranchInventoryDifference : 'Inventory Count Difference', 
								report_MultiBranchManufacturing : 'Produce products', 
								report_MultiBranchMaterial : 'Materials', 
								report_MultiBranchMinMax : 'Inventory control', 
								report_MultiBranchPriceDifference : 'Price difference', 
								report_MultiBranchProductPurchase : 'Products Purchase', 
								report_MultiBranchProductReturn : 'Product Returns', 
								report_MultiBranchProductSold : 'Products Sold', 
								report_MultiBranchReturnToSupplier : 'Products return to Supplier', 
								report_MultiBranchSale : 'Sale Analyst', 
								report_MultiBranchSalesEffectiveness : 'Sales Effectiveness', 
								report_MultiBranchSalesFrequency : 'Sales Frequency', 
								report_MultiBranchTransfer : 'Products Transfer', 
								report_OnOrderByCustomer : 'Products ordered by Customers', 
								report_OrderProfit : 'Profit by orders', 
								report_OtherTransaction : 'Other transaction', 
								report_PaymentMethods : 'Payment Methods', 
								report_PreOrder : 'Pre-Order', 
								report_PriceDifference : 'Price difference', 
								report_ProducInOutStock : 'Input - Output - Inventory', 
								report_ProductProfit : 'Profit by products', 
								report_ProductProfitByBranch : 'Profit of products by branchs', 
								report_ProductPurchaseDetailReport : 'Product Purchase Detail', 
								report_ProductReturnByUser : 'Product Return by user', 
								report_ProductSaleByKitchenReport : 'Product Sale By Kitchen', 
								report_ProductSaleByRoomReport : 'Products Sale By Rooms', 
								report_ProductSaleDetail : 'Products sold (Detail)', 
								report_ProductsReturnedToSuppliers : 'Products r eturnedto suppliers', 
								report_ProductsSold : 'Products sold', 
								report_ProductsSoldByBranch : 'Products Sold By Branchs', 
								report_ProductsSoldByPartner : 'Products sold by partners', 
								report_ProductsSoldByUser : 'Products sold by users', 
								report_PurchaseDetailReport : 'Purchase Order Detail Report', 
								report_RegisterClosureSummary : 'Register Closure Summary', 
								report_Reserve : 'Reserve planning', 
								report_ReturnToCustomerDetail : 'List of returns document', 
								report_ReturnToSupplierDetail : 'List of returns to supplier document', 
								report_RevenueByBranch : 'Revenue by branchs', 
								report_RevenueByCustomers : 'Revenue by customers', 
								report_RevenueByDays : 'Revenue by days', 
								report_RevenueByUsers : 'Revenue by users', 
								report_RevenueDetail : 'Revenue detail', 
								report_SlowSellingProducts : 'Slow Selling Products', 
								report_StatementOfAccounts : 'Statement of accounts', 
								report_StockOrderByPartner : 'Synthesis report purchases by partner', 
								report_StockOrderDetail : 'Synthesis report purchases', 
								report_Summaryofpayable : 'Summary of payable', 
								report_Summaryofreceivable : 'Summary of receivable', 
								report_TransferIn : 'Product Transfer In', 
								report_TransferOut : 'Product Transfer Out', 
								report_UnmarketableProducts : 'Unmarketable products', 
								report_VATSummary : 'VAT Summary', 
								report_WarehousesValues : 'Warehouses values', 
								report_WarehousesValuesByBranch : 'Warehouses Values By Branchs', 
								retailer : 'Store', 
								return : 'Return', 
								revenue : 'Revenue', 
								supplier : 'Supplier', 
								transfer : 'Internal stock transfer', 
								user : 'User', 
					});
	    $translateProvider.useSanitizeValueStrategy(null);
     $translateProvider.preferredLanguage('vi-VN');
	}]);
})();
;

function QR8bitByte(data) {
	this.mode = QRMode.MODE_8BIT_BYTE;
	this.data = data;
}

QR8bitByte.prototype = {

	getLength : function(buffer) {
		return this.data.length;
	},
	
	write : function(buffer) {
		for (var i = 0; i < this.data.length; i++) {
			// not JIS ...
			buffer.put(this.data.charCodeAt(i), 8);
		}
	}
};

//---------------------------------------------------------------------
// QRCode
//---------------------------------------------------------------------

function QRCode(typeNumber, errorCorrectLevel) {
	this.typeNumber = typeNumber;
	this.errorCorrectLevel = errorCorrectLevel;
	this.modules = null;
	this.moduleCount = 0;
	this.dataCache = null;
	this.dataList = new Array();
}

QRCode.prototype = {
	
	addData : function(data) {
		var newData = new QR8bitByte(data);
		this.dataList.push(newData);
		this.dataCache = null;
	},
	
	isDark : function(row, col) {
		if (row < 0 || this.moduleCount <= row || col < 0 || this.moduleCount <= col) {
			throw new Error(row + "," + col);
		}
		return this.modules[row][col];
	},

	getModuleCount : function() {
		return this.moduleCount;
	},
	
	make : function() {
		this.makeImpl(false, this.getBestMaskPattern() );
	},
	
	makeImpl : function(test, maskPattern) {
		
		this.moduleCount = this.typeNumber * 4 + 17;
		this.modules = new Array(this.moduleCount);
		
		for (var row = 0; row < this.moduleCount; row++) {
			
			this.modules[row] = new Array(this.moduleCount);
			
			for (var col = 0; col < this.moduleCount; col++) {
				this.modules[row][col] = null;//(col + row) % 3;
			}
		}
	
		this.setupPositionProbePattern(0, 0);
		this.setupPositionProbePattern(this.moduleCount - 7, 0);
		this.setupPositionProbePattern(0, this.moduleCount - 7);
		this.setupPositionAdjustPattern();
		this.setupTimingPattern();
		this.setupTypeInfo(test, maskPattern);
		
		if (this.typeNumber >= 7) {
			this.setupTypeNumber(test);
		}
	
		if (this.dataCache == null) {
			this.dataCache = QRCode.createData(this.typeNumber, this.errorCorrectLevel, this.dataList);
		}
	
		this.mapData(this.dataCache, maskPattern);
	},

	setupPositionProbePattern : function(row, col)  {
		
		for (var r = -1; r <= 7; r++) {
			
			if (row + r <= -1 || this.moduleCount <= row + r) continue;
			
			for (var c = -1; c <= 7; c++) {
				
				if (col + c <= -1 || this.moduleCount <= col + c) continue;
				
				if ( (0 <= r && r <= 6 && (c == 0 || c == 6) )
						|| (0 <= c && c <= 6 && (r == 0 || r == 6) )
						|| (2 <= r && r <= 4 && 2 <= c && c <= 4) ) {
					this.modules[row + r][col + c] = true;
				} else {
					this.modules[row + r][col + c] = false;
				}
			}		
		}		
	},
	
	getBestMaskPattern : function() {
	
		var minLostPoint = 0;
		var pattern = 0;
	
		for (var i = 0; i < 8; i++) {
			
			this.makeImpl(true, i);
	
			var lostPoint = QRUtil.getLostPoint(this);
	
			if (i == 0 || minLostPoint >  lostPoint) {
				minLostPoint = lostPoint;
				pattern = i;
			}
		}
	
		return pattern;
	},
	
	createMovieClip : function(target_mc, instance_name, depth) {
	
		var qr_mc = target_mc.createEmptyMovieClip(instance_name, depth);
		var cs = 1;
	
		this.make();

		for (var row = 0; row < this.modules.length; row++) {
			
			var y = row * cs;
			
			for (var col = 0; col < this.modules[row].length; col++) {
	
				var x = col * cs;
				var dark = this.modules[row][col];
			
				if (dark) {
					qr_mc.beginFill(0, 100);
					qr_mc.moveTo(x, y);
					qr_mc.lineTo(x + cs, y);
					qr_mc.lineTo(x + cs, y + cs);
					qr_mc.lineTo(x, y + cs);
					qr_mc.endFill();
				}
			}
		}
		
		return qr_mc;
	},

	setupTimingPattern : function() {
		
		for (var r = 8; r < this.moduleCount - 8; r++) {
			if (this.modules[r][6] != null) {
				continue;
			}
			this.modules[r][6] = (r % 2 == 0);
		}
	
		for (var c = 8; c < this.moduleCount - 8; c++) {
			if (this.modules[6][c] != null) {
				continue;
			}
			this.modules[6][c] = (c % 2 == 0);
		}
	},
	
	setupPositionAdjustPattern : function() {
	
		var pos = QRUtil.getPatternPosition(this.typeNumber);
		
		for (var i = 0; i < pos.length; i++) {
		
			for (var j = 0; j < pos.length; j++) {
			
				var row = pos[i];
				var col = pos[j];
				
				if (this.modules[row][col] != null) {
					continue;
				}
				
				for (var r = -2; r <= 2; r++) {
				
					for (var c = -2; c <= 2; c++) {
					
						if (r == -2 || r == 2 || c == -2 || c == 2 
								|| (r == 0 && c == 0) ) {
							this.modules[row + r][col + c] = true;
						} else {
							this.modules[row + r][col + c] = false;
						}
					}
				}
			}
		}
	},
	
	setupTypeNumber : function(test) {
	
		var bits = QRUtil.getBCHTypeNumber(this.typeNumber);
	
		for (var i = 0; i < 18; i++) {
			var mod = (!test && ( (bits >> i) & 1) == 1);
			this.modules[Math.floor(i / 3)][i % 3 + this.moduleCount - 8 - 3] = mod;
		}
	
		for (var i = 0; i < 18; i++) {
			var mod = (!test && ( (bits >> i) & 1) == 1);
			this.modules[i % 3 + this.moduleCount - 8 - 3][Math.floor(i / 3)] = mod;
		}
	},
	
	setupTypeInfo : function(test, maskPattern) {
	
		var data = (this.errorCorrectLevel << 3) | maskPattern;
		var bits = QRUtil.getBCHTypeInfo(data);
	
		// vertical		
		for (var i = 0; i < 15; i++) {
	
			var mod = (!test && ( (bits >> i) & 1) == 1);
	
			if (i < 6) {
				this.modules[i][8] = mod;
			} else if (i < 8) {
				this.modules[i + 1][8] = mod;
			} else {
				this.modules[this.moduleCount - 15 + i][8] = mod;
			}
		}
	
		// horizontal
		for (var i = 0; i < 15; i++) {
	
			var mod = (!test && ( (bits >> i) & 1) == 1);
			
			if (i < 8) {
				this.modules[8][this.moduleCount - i - 1] = mod;
			} else if (i < 9) {
				this.modules[8][15 - i - 1 + 1] = mod;
			} else {
				this.modules[8][15 - i - 1] = mod;
			}
		}
	
		// fixed module
		this.modules[this.moduleCount - 8][8] = (!test);
	
	},
	
	mapData : function(data, maskPattern) {
		
		var inc = -1;
		var row = this.moduleCount - 1;
		var bitIndex = 7;
		var byteIndex = 0;
		
		for (var col = this.moduleCount - 1; col > 0; col -= 2) {
	
			if (col == 6) col--;
	
			while (true) {
	
				for (var c = 0; c < 2; c++) {
					
					if (this.modules[row][col - c] == null) {
						
						var dark = false;
	
						if (byteIndex < data.length) {
							dark = ( ( (data[byteIndex] >>> bitIndex) & 1) == 1);
						}
	
						var mask = QRUtil.getMask(maskPattern, row, col - c);
	
						if (mask) {
							dark = !dark;
						}
						
						this.modules[row][col - c] = dark;
						bitIndex--;
	
						if (bitIndex == -1) {
							byteIndex++;
							bitIndex = 7;
						}
					}
				}
								
				row += inc;
	
				if (row < 0 || this.moduleCount <= row) {
					row -= inc;
					inc = -inc;
					break;
				}
			}
		}
		
	}

};

QRCode.PAD0 = 0xEC;
QRCode.PAD1 = 0x11;

QRCode.createData = function(typeNumber, errorCorrectLevel, dataList) {
	
	var rsBlocks = QRRSBlock.getRSBlocks(typeNumber, errorCorrectLevel);
	
	var buffer = new QRBitBuffer();
	
	for (var i = 0; i < dataList.length; i++) {
		var data = dataList[i];
		buffer.put(data.mode, 4);
		buffer.put(data.getLength(), QRUtil.getLengthInBits(data.mode, typeNumber) );
		data.write(buffer);
	}

	// calc num max data.
	var totalDataCount = 0;
	for (var i = 0; i < rsBlocks.length; i++) {
		totalDataCount += rsBlocks[i].dataCount;
	}

	if (buffer.getLengthInBits() > totalDataCount * 8) {
		throw new Error("code length overflow. ("
			+ buffer.getLengthInBits()
			+ ">"
			+  totalDataCount * 8
			+ ")");
	}

	// end code
	if (buffer.getLengthInBits() + 4 <= totalDataCount * 8) {
		buffer.put(0, 4);
	}

	// padding
	while (buffer.getLengthInBits() % 8 != 0) {
		buffer.putBit(false);
	}

	// padding
	while (true) {
		
		if (buffer.getLengthInBits() >= totalDataCount * 8) {
			break;
		}
		buffer.put(QRCode.PAD0, 8);
		
		if (buffer.getLengthInBits() >= totalDataCount * 8) {
			break;
		}
		buffer.put(QRCode.PAD1, 8);
	}

	return QRCode.createBytes(buffer, rsBlocks);
}

QRCode.createBytes = function(buffer, rsBlocks) {

	var offset = 0;
	
	var maxDcCount = 0;
	var maxEcCount = 0;
	
	var dcdata = new Array(rsBlocks.length);
	var ecdata = new Array(rsBlocks.length);
	
	for (var r = 0; r < rsBlocks.length; r++) {

		var dcCount = rsBlocks[r].dataCount;
		var ecCount = rsBlocks[r].totalCount - dcCount;

		maxDcCount = Math.max(maxDcCount, dcCount);
		maxEcCount = Math.max(maxEcCount, ecCount);
		
		dcdata[r] = new Array(dcCount);
		
		for (var i = 0; i < dcdata[r].length; i++) {
			dcdata[r][i] = 0xff & buffer.buffer[i + offset];
		}
		offset += dcCount;
		
		var rsPoly = QRUtil.getErrorCorrectPolynomial(ecCount);
		var rawPoly = new QRPolynomial(dcdata[r], rsPoly.getLength() - 1);

		var modPoly = rawPoly.mod(rsPoly);
		ecdata[r] = new Array(rsPoly.getLength() - 1);
		for (var i = 0; i < ecdata[r].length; i++) {
            var modIndex = i + modPoly.getLength() - ecdata[r].length;
			ecdata[r][i] = (modIndex >= 0)? modPoly.get(modIndex) : 0;
		}

	}
	
	var totalCodeCount = 0;
	for (var i = 0; i < rsBlocks.length; i++) {
		totalCodeCount += rsBlocks[i].totalCount;
	}

	var data = new Array(totalCodeCount);
	var index = 0;

	for (var i = 0; i < maxDcCount; i++) {
		for (var r = 0; r < rsBlocks.length; r++) {
			if (i < dcdata[r].length) {
				data[index++] = dcdata[r][i];
			}
		}
	}

	for (var i = 0; i < maxEcCount; i++) {
		for (var r = 0; r < rsBlocks.length; r++) {
			if (i < ecdata[r].length) {
				data[index++] = ecdata[r][i];
			}
		}
	}

	return data;

}

//---------------------------------------------------------------------
// QRMode
//---------------------------------------------------------------------

var QRMode = {
	MODE_NUMBER :		1 << 0,
	MODE_ALPHA_NUM : 	1 << 1,
	MODE_8BIT_BYTE : 	1 << 2,
	MODE_KANJI :		1 << 3
};

//---------------------------------------------------------------------
// QRErrorCorrectLevel
//---------------------------------------------------------------------
 
var QRErrorCorrectLevel = {
	L : 1,
	M : 0,
	Q : 3,
	H : 2
};

//---------------------------------------------------------------------
// QRMaskPattern
//---------------------------------------------------------------------

var QRMaskPattern = {
	PATTERN000 : 0,
	PATTERN001 : 1,
	PATTERN010 : 2,
	PATTERN011 : 3,
	PATTERN100 : 4,
	PATTERN101 : 5,
	PATTERN110 : 6,
	PATTERN111 : 7
};

//---------------------------------------------------------------------
// QRUtil
//---------------------------------------------------------------------
 
var QRUtil = {

    PATTERN_POSITION_TABLE : [
	    [],
	    [6, 18],
	    [6, 22],
	    [6, 26],
	    [6, 30],
	    [6, 34],
	    [6, 22, 38],
	    [6, 24, 42],
	    [6, 26, 46],
	    [6, 28, 50],
	    [6, 30, 54],		
	    [6, 32, 58],
	    [6, 34, 62],
	    [6, 26, 46, 66],
	    [6, 26, 48, 70],
	    [6, 26, 50, 74],
	    [6, 30, 54, 78],
	    [6, 30, 56, 82],
	    [6, 30, 58, 86],
	    [6, 34, 62, 90],
	    [6, 28, 50, 72, 94],
	    [6, 26, 50, 74, 98],
	    [6, 30, 54, 78, 102],
	    [6, 28, 54, 80, 106],
	    [6, 32, 58, 84, 110],
	    [6, 30, 58, 86, 114],
	    [6, 34, 62, 90, 118],
	    [6, 26, 50, 74, 98, 122],
	    [6, 30, 54, 78, 102, 126],
	    [6, 26, 52, 78, 104, 130],
	    [6, 30, 56, 82, 108, 134],
	    [6, 34, 60, 86, 112, 138],
	    [6, 30, 58, 86, 114, 142],
	    [6, 34, 62, 90, 118, 146],
	    [6, 30, 54, 78, 102, 126, 150],
	    [6, 24, 50, 76, 102, 128, 154],
	    [6, 28, 54, 80, 106, 132, 158],
	    [6, 32, 58, 84, 110, 136, 162],
	    [6, 26, 54, 82, 110, 138, 166],
	    [6, 30, 58, 86, 114, 142, 170]
    ],

    G15 : (1 << 10) | (1 << 8) | (1 << 5) | (1 << 4) | (1 << 2) | (1 << 1) | (1 << 0),
    G18 : (1 << 12) | (1 << 11) | (1 << 10) | (1 << 9) | (1 << 8) | (1 << 5) | (1 << 2) | (1 << 0),
    G15_MASK : (1 << 14) | (1 << 12) | (1 << 10)	| (1 << 4) | (1 << 1),

    getBCHTypeInfo : function(data) {
	    var d = data << 10;
	    while (QRUtil.getBCHDigit(d) - QRUtil.getBCHDigit(QRUtil.G15) >= 0) {
		    d ^= (QRUtil.G15 << (QRUtil.getBCHDigit(d) - QRUtil.getBCHDigit(QRUtil.G15) ) ); 	
	    }
	    return ( (data << 10) | d) ^ QRUtil.G15_MASK;
    },

    getBCHTypeNumber : function(data) {
	    var d = data << 12;
	    while (QRUtil.getBCHDigit(d) - QRUtil.getBCHDigit(QRUtil.G18) >= 0) {
		    d ^= (QRUtil.G18 << (QRUtil.getBCHDigit(d) - QRUtil.getBCHDigit(QRUtil.G18) ) ); 	
	    }
	    return (data << 12) | d;
    },

    getBCHDigit : function(data) {

	    var digit = 0;

	    while (data != 0) {
		    digit++;
		    data >>>= 1;
	    }

	    return digit;
    },

    getPatternPosition : function(typeNumber) {
	    return QRUtil.PATTERN_POSITION_TABLE[typeNumber - 1];
    },

    getMask : function(maskPattern, i, j) {
	    
	    switch (maskPattern) {
		    
	    case QRMaskPattern.PATTERN000 : return (i + j) % 2 == 0;
	    case QRMaskPattern.PATTERN001 : return i % 2 == 0;
	    case QRMaskPattern.PATTERN010 : return j % 3 == 0;
	    case QRMaskPattern.PATTERN011 : return (i + j) % 3 == 0;
	    case QRMaskPattern.PATTERN100 : return (Math.floor(i / 2) + Math.floor(j / 3) ) % 2 == 0;
	    case QRMaskPattern.PATTERN101 : return (i * j) % 2 + (i * j) % 3 == 0;
	    case QRMaskPattern.PATTERN110 : return ( (i * j) % 2 + (i * j) % 3) % 2 == 0;
	    case QRMaskPattern.PATTERN111 : return ( (i * j) % 3 + (i + j) % 2) % 2 == 0;

	    default :
		    throw new Error("bad maskPattern:" + maskPattern);
	    }
    },

    getErrorCorrectPolynomial : function(errorCorrectLength) {

	    var a = new QRPolynomial([1], 0);

	    for (var i = 0; i < errorCorrectLength; i++) {
		    a = a.multiply(new QRPolynomial([1, QRMath.gexp(i)], 0) );
	    }

	    return a;
    },

    getLengthInBits : function(mode, type) {

	    if (1 <= type && type < 10) {

		    // 1 - 9

		    switch(mode) {
		    case QRMode.MODE_NUMBER 	: return 10;
		    case QRMode.MODE_ALPHA_NUM 	: return 9;
		    case QRMode.MODE_8BIT_BYTE	: return 8;
		    case QRMode.MODE_KANJI  	: return 8;
		    default :
			    throw new Error("mode:" + mode);
		    }

	    } else if (type < 27) {

		    // 10 - 26

		    switch(mode) {
		    case QRMode.MODE_NUMBER 	: return 12;
		    case QRMode.MODE_ALPHA_NUM 	: return 11;
		    case QRMode.MODE_8BIT_BYTE	: return 16;
		    case QRMode.MODE_KANJI  	: return 10;
		    default :
			    throw new Error("mode:" + mode);
		    }

	    } else if (type < 41) {

		    // 27 - 40

		    switch(mode) {
		    case QRMode.MODE_NUMBER 	: return 14;
		    case QRMode.MODE_ALPHA_NUM	: return 13;
		    case QRMode.MODE_8BIT_BYTE	: return 16;
		    case QRMode.MODE_KANJI  	: return 12;
		    default :
			    throw new Error("mode:" + mode);
		    }

	    } else {
		    throw new Error("type:" + type);
	    }
    },

    getLostPoint : function(qrCode) {
	    
	    var moduleCount = qrCode.getModuleCount();
	    
	    var lostPoint = 0;
	    
	    // LEVEL1
	    
	    for (var row = 0; row < moduleCount; row++) {

		    for (var col = 0; col < moduleCount; col++) {

			    var sameCount = 0;
			    var dark = qrCode.isDark(row, col);

				for (var r = -1; r <= 1; r++) {

				    if (row + r < 0 || moduleCount <= row + r) {
					    continue;
				    }

				    for (var c = -1; c <= 1; c++) {

					    if (col + c < 0 || moduleCount <= col + c) {
						    continue;
					    }

					    if (r == 0 && c == 0) {
						    continue;
					    }

					    if (dark == qrCode.isDark(row + r, col + c) ) {
						    sameCount++;
					    }
				    }
			    }

			    if (sameCount > 5) {
				    lostPoint += (3 + sameCount - 5);
			    }
		    }
	    }

	    // LEVEL2

	    for (var row = 0; row < moduleCount - 1; row++) {
		    for (var col = 0; col < moduleCount - 1; col++) {
			    var count = 0;
			    if (qrCode.isDark(row,     col    ) ) count++;
			    if (qrCode.isDark(row + 1, col    ) ) count++;
			    if (qrCode.isDark(row,     col + 1) ) count++;
			    if (qrCode.isDark(row + 1, col + 1) ) count++;
			    if (count == 0 || count == 4) {
				    lostPoint += 3;
			    }
		    }
	    }

	    // LEVEL3

	    for (var row = 0; row < moduleCount; row++) {
		    for (var col = 0; col < moduleCount - 6; col++) {
			    if (qrCode.isDark(row, col)
					    && !qrCode.isDark(row, col + 1)
					    &&  qrCode.isDark(row, col + 2)
					    &&  qrCode.isDark(row, col + 3)
					    &&  qrCode.isDark(row, col + 4)
					    && !qrCode.isDark(row, col + 5)
					    &&  qrCode.isDark(row, col + 6) ) {
				    lostPoint += 40;
			    }
		    }
	    }

	    for (var col = 0; col < moduleCount; col++) {
		    for (var row = 0; row < moduleCount - 6; row++) {
			    if (qrCode.isDark(row, col)
					    && !qrCode.isDark(row + 1, col)
					    &&  qrCode.isDark(row + 2, col)
					    &&  qrCode.isDark(row + 3, col)
					    &&  qrCode.isDark(row + 4, col)
					    && !qrCode.isDark(row + 5, col)
					    &&  qrCode.isDark(row + 6, col) ) {
				    lostPoint += 40;
			    }
		    }
	    }

	    // LEVEL4
	    
	    var darkCount = 0;

	    for (var col = 0; col < moduleCount; col++) {
		    for (var row = 0; row < moduleCount; row++) {
			    if (qrCode.isDark(row, col) ) {
				    darkCount++;
			    }
		    }
	    }
	    
	    var ratio = Math.abs(100 * darkCount / moduleCount / moduleCount - 50) / 5;
	    lostPoint += ratio * 10;

	    return lostPoint;		
    }

};


//---------------------------------------------------------------------
// QRMath
//---------------------------------------------------------------------

var QRMath = {

	glog : function(n) {
	
		if (n < 1) {
			throw new Error("glog(" + n + ")");
		}
		
		return QRMath.LOG_TABLE[n];
	},
	
	gexp : function(n) {
	
		while (n < 0) {
			n += 255;
		}
	
		while (n >= 256) {
			n -= 255;
		}
	
		return QRMath.EXP_TABLE[n];
	},
	
	EXP_TABLE : new Array(256),
	
	LOG_TABLE : new Array(256)

};
	
for (var i = 0; i < 8; i++) {
	QRMath.EXP_TABLE[i] = 1 << i;
}
for (var i = 8; i < 256; i++) {
	QRMath.EXP_TABLE[i] = QRMath.EXP_TABLE[i - 4]
		^ QRMath.EXP_TABLE[i - 5]
		^ QRMath.EXP_TABLE[i - 6]
		^ QRMath.EXP_TABLE[i - 8];
}
for (var i = 0; i < 255; i++) {
	QRMath.LOG_TABLE[QRMath.EXP_TABLE[i] ] = i;
}

//---------------------------------------------------------------------
// QRPolynomial
//---------------------------------------------------------------------

function QRPolynomial(num, shift) {

	if (num.length == undefined) {
		throw new Error(num.length + "/" + shift);
	}

	var offset = 0;

	while (offset < num.length && num[offset] == 0) {
		offset++;
	}

	this.num = new Array(num.length - offset + shift);
	for (var i = 0; i < num.length - offset; i++) {
		this.num[i] = num[i + offset];
	}
}

QRPolynomial.prototype = {

	get : function(index) {
		return this.num[index];
	},
	
	getLength : function() {
		return this.num.length;
	},
	
	multiply : function(e) {
	
		var num = new Array(this.getLength() + e.getLength() - 1);
	
		for (var i = 0; i < this.getLength(); i++) {
			for (var j = 0; j < e.getLength(); j++) {
				num[i + j] ^= QRMath.gexp(QRMath.glog(this.get(i) ) + QRMath.glog(e.get(j) ) );
			}
		}
	
		return new QRPolynomial(num, 0);
	},
	
	mod : function(e) {
	
		if (this.getLength() - e.getLength() < 0) {
			return this;
		}
	
		var ratio = QRMath.glog(this.get(0) ) - QRMath.glog(e.get(0) );
	
		var num = new Array(this.getLength() );
		
		for (var i = 0; i < this.getLength(); i++) {
			num[i] = this.get(i);
		}
		
		for (var i = 0; i < e.getLength(); i++) {
			num[i] ^= QRMath.gexp(QRMath.glog(e.get(i) ) + ratio);
		}
	
		// recursive call
		return new QRPolynomial(num, 0).mod(e);
	}
};

//---------------------------------------------------------------------
// QRRSBlock
//---------------------------------------------------------------------

function QRRSBlock(totalCount, dataCount) {
	this.totalCount = totalCount;
	this.dataCount  = dataCount;
}

QRRSBlock.RS_BLOCK_TABLE = [

  // L
  // M
  // Q
  // H

  // 1
  [1, 26, 19],
  [1, 26, 16],
  [1, 26, 13],
  [1, 26, 9],

  // 2
  [1, 44, 34],
  [1, 44, 28],
  [1, 44, 22],
  [1, 44, 16],

  // 3
  [1, 70, 55],
  [1, 70, 44],
  [2, 35, 17],
  [2, 35, 13],

  // 4		
  [1, 100, 80],
  [2, 50, 32],
  [2, 50, 24],
  [4, 25, 9],

  // 5
  [1, 134, 108],
  [2, 67, 43],
  [2, 33, 15, 2, 34, 16],
  [2, 33, 11, 2, 34, 12],

  // 6
  [2, 86, 68],
  [4, 43, 27],
  [4, 43, 19],
  [4, 43, 15],

  // 7		
  [2, 98, 78],
  [4, 49, 31],
  [2, 32, 14, 4, 33, 15],
  [4, 39, 13, 1, 40, 14],

  // 8
  [2, 121, 97],
  [2, 60, 38, 2, 61, 39],
  [4, 40, 18, 2, 41, 19],
  [4, 40, 14, 2, 41, 15],

  // 9
  [2, 146, 116],
  [3, 58, 36, 2, 59, 37],
  [4, 36, 16, 4, 37, 17],
  [4, 36, 12, 4, 37, 13],

  // 10		
  [2, 86, 68, 2, 87, 69],
  [4, 69, 43, 1, 70, 44],
  [6, 43, 19, 2, 44, 20],
  [6, 43, 15, 2, 44, 16],

  // 11
  [4, 101, 81],
  [1, 80, 50, 4, 81, 51],
  [4, 50, 22, 4, 51, 23],
  [3, 36, 12, 8, 37, 13],

  // 12
  [2, 116, 92, 2, 117, 93],
  [6, 58, 36, 2, 59, 37],
  [4, 46, 20, 6, 47, 21],
  [7, 42, 14, 4, 43, 15],

  // 13
  [4, 133, 107],
  [8, 59, 37, 1, 60, 38],
  [8, 44, 20, 4, 45, 21],
  [12, 33, 11, 4, 34, 12],

  // 14
  [3, 145, 115, 1, 146, 116],
  [4, 64, 40, 5, 65, 41],
  [11, 36, 16, 5, 37, 17],
  [11, 36, 12, 5, 37, 13],

  // 15
  [5, 109, 87, 1, 110, 88],
  [5, 65, 41, 5, 66, 42],
  [5, 54, 24, 7, 55, 25],
  [11, 36, 12],

  // 16
  [5, 122, 98, 1, 123, 99],
  [7, 73, 45, 3, 74, 46],
  [15, 43, 19, 2, 44, 20],
  [3, 45, 15, 13, 46, 16],

  // 17
  [1, 135, 107, 5, 136, 108],
  [10, 74, 46, 1, 75, 47],
  [1, 50, 22, 15, 51, 23],
  [2, 42, 14, 17, 43, 15],

  // 18
  [5, 150, 120, 1, 151, 121],
  [9, 69, 43, 4, 70, 44],
  [17, 50, 22, 1, 51, 23],
  [2, 42, 14, 19, 43, 15],

  // 19
  [3, 141, 113, 4, 142, 114],
  [3, 70, 44, 11, 71, 45],
  [17, 47, 21, 4, 48, 22],
  [9, 39, 13, 16, 40, 14],

  // 20
  [3, 135, 107, 5, 136, 108],
  [3, 67, 41, 13, 68, 42],
  [15, 54, 24, 5, 55, 25],
  [15, 43, 15, 10, 44, 16],

  // 21
  [4, 144, 116, 4, 145, 117],
  [17, 68, 42],
  [17, 50, 22, 6, 51, 23],
  [19, 46, 16, 6, 47, 17],

  // 22
  [2, 139, 111, 7, 140, 112],
  [17, 74, 46],
  [7, 54, 24, 16, 55, 25],
  [34, 37, 13],

  // 23
  [4, 151, 121, 5, 152, 122],
  [4, 75, 47, 14, 76, 48],
  [11, 54, 24, 14, 55, 25],
  [16, 45, 15, 14, 46, 16],

  // 24
  [6, 147, 117, 4, 148, 118],
  [6, 73, 45, 14, 74, 46],
  [11, 54, 24, 16, 55, 25],
  [30, 46, 16, 2, 47, 17],

  // 25
  [8, 132, 106, 4, 133, 107],
  [8, 75, 47, 13, 76, 48],
  [7, 54, 24, 22, 55, 25],
  [22, 45, 15, 13, 46, 16],

  // 26
  [10, 142, 114, 2, 143, 115],
  [19, 74, 46, 4, 75, 47],
  [28, 50, 22, 6, 51, 23],
  [33, 46, 16, 4, 47, 17],

  // 27
  [8, 152, 122, 4, 153, 123],
  [22, 73, 45, 3, 74, 46],
  [8, 53, 23, 26, 54, 24],
  [12, 45, 15, 28, 46, 16],

  // 28
  [3, 147, 117, 10, 148, 118],
  [3, 73, 45, 23, 74, 46],
  [4, 54, 24, 31, 55, 25],
  [11, 45, 15, 31, 46, 16],

  // 29
  [7, 146, 116, 7, 147, 117],
  [21, 73, 45, 7, 74, 46],
  [1, 53, 23, 37, 54, 24],
  [19, 45, 15, 26, 46, 16],

  // 30
  [5, 145, 115, 10, 146, 116],
  [19, 75, 47, 10, 76, 48],
  [15, 54, 24, 25, 55, 25],
  [23, 45, 15, 25, 46, 16],

  // 31
  [13, 145, 115, 3, 146, 116],
  [2, 74, 46, 29, 75, 47],
  [42, 54, 24, 1, 55, 25],
  [23, 45, 15, 28, 46, 16],

  // 32
  [17, 145, 115],
  [10, 74, 46, 23, 75, 47],
  [10, 54, 24, 35, 55, 25],
  [19, 45, 15, 35, 46, 16],

  // 33
  [17, 145, 115, 1, 146, 116],
  [14, 74, 46, 21, 75, 47],
  [29, 54, 24, 19, 55, 25],
  [11, 45, 15, 46, 46, 16],

  // 34
  [13, 145, 115, 6, 146, 116],
  [14, 74, 46, 23, 75, 47],
  [44, 54, 24, 7, 55, 25],
  [59, 46, 16, 1, 47, 17],

  // 35
  [12, 151, 121, 7, 152, 122],
  [12, 75, 47, 26, 76, 48],
  [39, 54, 24, 14, 55, 25],
  [22, 45, 15, 41, 46, 16],

  // 36
  [6, 151, 121, 14, 152, 122],
  [6, 75, 47, 34, 76, 48],
  [46, 54, 24, 10, 55, 25],
  [2, 45, 15, 64, 46, 16],

  // 37
  [17, 152, 122, 4, 153, 123],
  [29, 74, 46, 14, 75, 47],
  [49, 54, 24, 10, 55, 25],
  [24, 45, 15, 46, 46, 16],

  // 38
  [4, 152, 122, 18, 153, 123],
  [13, 74, 46, 32, 75, 47],
  [48, 54, 24, 14, 55, 25],
  [42, 45, 15, 32, 46, 16],

  // 39
  [20, 147, 117, 4, 148, 118],
  [40, 75, 47, 7, 76, 48],
  [43, 54, 24, 22, 55, 25],
  [10, 45, 15, 67, 46, 16],

  // 40
  [19, 148, 118, 6, 149, 119],
  [18, 75, 47, 31, 76, 48],
  [34, 54, 24, 34, 55, 25],
  [20, 45, 15, 61, 46, 16]

];

QRRSBlock.getRSBlocks = function(typeNumber, errorCorrectLevel) {
	
	var rsBlock = QRRSBlock.getRsBlockTable(typeNumber, errorCorrectLevel);
	
	if (rsBlock == undefined) {
		throw new Error("bad rs block @ typeNumber:" + typeNumber + "/errorCorrectLevel:" + errorCorrectLevel);
	}

	var length = rsBlock.length / 3;
	
	var list = new Array();
	
	for (var i = 0; i < length; i++) {

		var count = rsBlock[i * 3 + 0];
		var totalCount = rsBlock[i * 3 + 1];
		var dataCount  = rsBlock[i * 3 + 2];

		for (var j = 0; j < count; j++) {
			list.push(new QRRSBlock(totalCount, dataCount) );	
		}
	}
	
	return list;
}

QRRSBlock.getRsBlockTable = function(typeNumber, errorCorrectLevel) {

	switch(errorCorrectLevel) {
	case QRErrorCorrectLevel.L :
		return QRRSBlock.RS_BLOCK_TABLE[(typeNumber - 1) * 4 + 0];
	case QRErrorCorrectLevel.M :
		return QRRSBlock.RS_BLOCK_TABLE[(typeNumber - 1) * 4 + 1];
	case QRErrorCorrectLevel.Q :
		return QRRSBlock.RS_BLOCK_TABLE[(typeNumber - 1) * 4 + 2];
	case QRErrorCorrectLevel.H :
		return QRRSBlock.RS_BLOCK_TABLE[(typeNumber - 1) * 4 + 3];
	default :
		return undefined;
	}
}

//---------------------------------------------------------------------
// QRBitBuffer
//---------------------------------------------------------------------

function QRBitBuffer() {
	this.buffer = new Array();
	this.length = 0;
}

QRBitBuffer.prototype = {

	get : function(index) {
		var bufIndex = Math.floor(index / 8);
		return ( (this.buffer[bufIndex] >>> (7 - index % 8) ) & 1) == 1;
	},
	
	put : function(num, length) {
		for (var i = 0; i < length; i++) {
			this.putBit( ( (num >>> (length - i - 1) ) & 1) == 1);
		}
	},
	
	getLengthInBits : function() {
		return this.length;
	},
	
	putBit : function(bit) {
	
		var bufIndex = Math.floor(this.length / 8);
		if (this.buffer.length <= bufIndex) {
			this.buffer.push(0);
		}
	
		if (bit) {
			this.buffer[bufIndex] |= (0x80 >>> (this.length % 8) );
		}
	
		this.length++;
	}
};
;
//---------------------------------------------------------------------
// JavaScript-HTML5 QRCode Generator
//
// Copyright (c) 2011 Amanuel Tewolde
//
// Licensed under the MIT license:
//   http://www.opensource.org/licenses/mit-license.php
//
//---------------------------------------------------------------------

// Generates a QRCode of text provided.
// First QRCode is rendered to a canvas.
// The canvas is then turned to an image PNG
// before being returned as an <img> tag.
function showQRCode(text) {

  
  var dotsize = 5;  // size of box drawn on canvas
  var padding = 5; // (white area around your QRCode)
  var black = "rgb(0,0,0)";
  var white = "rgb(255,255,255)";
  var QRCodeVersion = 8; // 1-40 see http://www.denso-wave.com/qrcode/qrgene2-e.html
	
	var canvas=document.createElement('canvas');
	var qrCanvasContext = canvas.getContext('2d');
  try {
    // QR Code Error Correction Capability 
    // Higher levels improves error correction capability while decreasing the amount of data QR Code size.
    // QRErrorCorrectLevel.L (5%) QRErrorCorrectLevel.M (15%) QRErrorCorrectLevel.Q (25%) QRErrorCorrectLevel.H (30%)
    // eg. L can survive approx 5% damage...etc.
    var qr = new QRCode(QRCodeVersion, QRErrorCorrectLevel.L); 
   	qr.addData(text);
   	qr.make();
   }
  catch (err) {
      console.log(err);
  }
    
  var qrsize = qr.getModuleCount();
 	canvas.setAttribute('height',(qrsize * dotsize) + padding);
 	canvas.setAttribute('width',(qrsize * dotsize) + padding);
 	var shiftForPadding = padding/2;
 	if (canvas.getContext){
 		for (var r = 0; r < qrsize; r++) {
 			for (var c = 0; c < qrsize; c++) {
 				if (qr.isDark(r, c))
 					qrCanvasContext.fillStyle = black;  
 				else
 					qrCanvasContext.fillStyle = white;  
 				qrCanvasContext.fillRect ((c*dotsize) +shiftForPadding,(r*dotsize) + shiftForPadding,dotsize,dotsize);   // x, y, w, h
 			}	
 		}
 	}
    return canvas.toDataURL("image/png");
    
}

;
